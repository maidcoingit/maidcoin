{
  "address": "0x7A8f65243F6A57b682d1dA1C741EE7C817140842",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IUniswapV2Pair",
          "name": "_lpToken",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "_sushi",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_royaltyReceiver",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lpTokenAmount",
          "type": "uint256"
        }
      ],
      "name": "Desupport",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lpTokenAmount",
          "type": "uint256"
        }
      ],
      "name": "Support",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DOMAIN_SEPARATOR",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_MAID_COUNT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PERMIT_ALL_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PERMIT_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "accSushiPerShare",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "claimSushiReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lpTokenAmount",
          "type": "uint256"
        }
      ],
      "name": "desupport",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lpToken",
      "outputs": [
        {
          "internalType": "contract IUniswapV2Pair",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "maids",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "originPower",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "supportedLPTokenAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "sushiRewardDebt",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "masterChefPid",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "power",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "powers",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "amounts",
          "type": "uint256"
        }
      ],
      "name": "mintBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "nonces",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "noncesForAll",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "pendingSushiReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "permit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "permitAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "powerAndLP",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_salePrice",
          "type": "uint256"
        }
      ],
      "name": "royaltyInfo",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_royaltyFee",
          "type": "uint256"
        }
      ],
      "name": "setRoyaltyInfo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IMasterChef",
          "name": "_masterChef",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        }
      ],
      "name": "setSushiMasterChef",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lpTokenAmount",
          "type": "uint256"
        }
      ],
      "name": "support",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lpTokenAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "supportWithPermit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sushi",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sushiLastRewardBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sushiMasterChef",
      "outputs": [
        {
          "internalType": "contract IMasterChef",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenOfOwnerByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xfbc8c8ba059dee0151b2205d5180665e3d0c3fce37375f0fb4e0e30ba6b4eb1d",
  "receipt": {
    "to": null,
    "from": "0x77466365e1be100f8E1Ac907AfE4151Ea21c528E",
    "contractAddress": "0x7A8f65243F6A57b682d1dA1C741EE7C817140842",
    "transactionIndex": 29,
    "gasUsed": "3699283",
    "logsBloom": "0x
    "blockHash": "0x89cfe1939f707500f7c0210001fe4661eeff88b7a1c2e3f2e3cf9b41d73ed578",
    "transactionHash": "0xfbc8c8ba059dee0151b2205d5180665e3d0c3fce37375f0fb4e0e30ba6b4eb1d",
    "logs": [
      {
        "transactionIndex": 29,
        "blockNumber": 11098642,
        "transactionHash": "0xfbc8c8ba059dee0151b2205d5180665e3d0c3fce37375f0fb4e0e30ba6b4eb1d",
        "address": "0x7A8f65243F6A57b682d1dA1C741EE7C817140842",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000077466365e1be100f8e1ac907afe4151ea21c528e"
        ],
        "data": "0x",
        "logIndex": 41,
        "blockHash": "0x89cfe1939f707500f7c0210001fe4661eeff88b7a1c2e3f2e3cf9b41d73ed578"
      }
    ],
    "blockNumber": 11098642,
    "cumulativeGasUsed": "7080713",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xAfAF29D58437107c78641D5C9924C9d606c72fD8",
    "0x0769fd68dFb93167989C6f7254cd0D766Fb2841F",
    "0xf98268209f839B3cCD4cCb92D8E23ACf45D335b4"
  ],
  "solcInputHash": "a8024d08cac240e1437225c8fb245dbd",
  "metadata": "{\"compiler\":{\"version\":\"0.8.5+commit.a4f2e591\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IUniswapV2Pair\",\"name\":\"_lpToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_sushi\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_royaltyReceiver\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lpTokenAmount\",\"type\":\"uint256\"}],\"name\":\"Desupport\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lpTokenAmount\",\"type\":\"uint256\"}],\"name\":\"Support\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_MAID_COUNT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERMIT_ALL_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERMIT_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accSushiPerShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"claimSushiReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lpTokenAmount\",\"type\":\"uint256\"}],\"name\":\"desupport\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpToken\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Pair\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"maids\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"originPower\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"supportedLPTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sushiRewardDebt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"masterChefPid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"power\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"powers\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"amounts\",\"type\":\"uint256\"}],\"name\":\"mintBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"noncesForAll\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"pendingSushiReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permitAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"powerAndLP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_salePrice\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_royaltyFee\",\"type\":\"uint256\"}],\"name\":\"setRoyaltyInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IMasterChef\",\"name\":\"_masterChef\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"setSushiMasterChef\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lpTokenAmount\",\"type\":\"uint256\"}],\"name\":\"support\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lpTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"supportWithPermit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sushi\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sushiLastRewardBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sushiMasterChef\",\"outputs\":[{\"internalType\":\"contract IMasterChef\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"See {IERC721Enumerable-tokenOfOwnerByIndex}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Maids.sol\":\"Maids\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x1cae4f85f114ff17b90414f5da67365b1d00337abb5bce9bf944eb78a2c0673c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xf8e8d118a7a8b2e134181f7da655f6266aa3a0f9134b2605747139fcb0c5d835\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\\n      *\\n      * Requirements:\\n      *\\n      * - `from` cannot be the zero address.\\n      * - `to` cannot be the zero address.\\n      * - `tokenId` token must exist and be owned by `from`.\\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n      *\\n      * Emits a {Transfer} event.\\n      */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0xc1c941ad1e580b4623007305921efe2f26fc7320a4edc226234dd707c658a428\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x96877bb2eb8ca360e949ee1bd77b47a14e92e42f79897c350f088f87a3c231d4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xccb7e6475afcb1c5cb13b3fbf1329c10b93620a9b66393388066683915271a78\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xb8d11e77eb1ed34a33720edb551d7d6a6b0eee2bfaa40a7024020e1fdf879b16\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x069b2631bb5b5193a58ccf7a06266c7361bd2c20095667af4402817605627f45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xf930d2df426bfcfc1f7415be724f04081c96f4fb9ec8d0e3a521c07692dface0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant alphabet = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = alphabet[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n}\\n\",\"keccak256\":\"0x456e9b3a2bfe189b5249857f624f4139e59331db518483b456c4e587a20552e0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x5718c5df9bd67ac68a796961df938821bb5dc0cd4c6118d77e9145afb187409b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"contracts/Maids.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.5;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./libraries/ERC721Enumerable.sol\\\";\\nimport \\\"./uniswapv2/interfaces/IUniswapV2Pair.sol\\\";\\nimport \\\"./interfaces/IERC1271.sol\\\";\\nimport \\\"./interfaces/IMaids.sol\\\";\\nimport \\\"./libraries/Signature.sol\\\";\\nimport \\\"./libraries/MasterChefModule.sol\\\";\\nimport \\\"./interfaces/IERC2981.sol\\\";\\n\\ncontract Maids is Ownable, ERC721(\\\"MaidCoin Maids\\\", \\\"MAIDS\\\"), ERC721Enumerable, MasterChefModule, IERC2981, IMaids {\\n    struct MaidInfo {\\n        uint256 originPower;\\n        uint256 supportedLPTokenAmount;\\n        uint256 sushiRewardDebt;\\n    }\\n\\n    bytes32 private immutable _CACHED_DOMAIN_SEPARATOR;\\n    uint256 private immutable _CACHED_CHAIN_ID;\\n\\n    bytes32 private immutable _HASHED_NAME;\\n    bytes32 private immutable _HASHED_VERSION;\\n    bytes32 private immutable _TYPE_HASH;\\n\\n    // keccak256(\\\"Permit(address spender,uint256 tokenId,uint256 nonce,uint256 deadline)\\\");\\n    bytes32 public constant override PERMIT_TYPEHASH =\\n        0x49ecf333e5b8c95c40fdafc95c1ad136e8914a8fb55e9dc8bb01eaa83a2df9ad;\\n\\n    // keccak256(\\\"Permit(address owner,address spender,uint256 nonce,uint256 deadline)\\\");\\n    bytes32 public constant override PERMIT_ALL_TYPEHASH =\\n        0xdaab21af31ece73a508939fedd476a5ee5129a5ed4bb091f3236ffb45394df62;\\n\\n    uint256 public constant override MAX_MAID_COUNT = 1000;\\n\\n    mapping(uint256 => uint256) public override nonces;\\n    mapping(address => uint256) public override noncesForAll;\\n\\n    MaidInfo[] public override maids;\\n\\n    uint256 private royaltyFee = 25; // out of 1000\\n    address private royaltyReceiver; // MaidCafe\\n\\n    constructor(\\n        IUniswapV2Pair _lpToken,\\n        IERC20 _sushi,\\n        address _royaltyReceiver\\n    ) MasterChefModule(_lpToken, _sushi) {\\n        _CACHED_CHAIN_ID = block.chainid;\\n        _HASHED_NAME = keccak256(bytes(\\\"MaidCoin Maids\\\"));\\n        _HASHED_VERSION = keccak256(bytes(\\\"1\\\"));\\n        _TYPE_HASH = keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\");\\n\\n        _CACHED_DOMAIN_SEPARATOR = keccak256(\\n            abi.encode(\\n                keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"),\\n                keccak256(bytes(\\\"MaidCoin Maids\\\")),\\n                keccak256(bytes(\\\"1\\\")),\\n                block.chainid,\\n                address(this)\\n            )\\n        );\\n\\n        royaltyReceiver = _royaltyReceiver;\\n    }\\n\\n    function _baseURI() internal pure override returns (string memory) {\\n        return \\\"https://api.maidcoin.org/maids/\\\";\\n    }\\n\\n    function DOMAIN_SEPARATOR() public view override returns (bytes32) {\\n        if (block.chainid == _CACHED_CHAIN_ID) {\\n            return _CACHED_DOMAIN_SEPARATOR;\\n        } else {\\n            return keccak256(abi.encode(_TYPE_HASH, _HASHED_NAME, _HASHED_VERSION, block.chainid, address(this)));\\n        }\\n    }\\n\\n    function totalSupply() public view override(ERC721Enumerable, IERC721Enumerable) returns (uint256) {\\n        return maids.length;\\n    }\\n\\n    function tokenByIndex(uint256 index)\\n        public\\n        view\\n        virtual\\n        override(ERC721Enumerable, IERC721Enumerable)\\n        returns (uint256)\\n    {\\n        require(index < totalSupply(), \\\"Maids: Invalid index\\\");\\n        return index;\\n    }\\n\\n    function mint(uint256 power) public onlyOwner returns (uint256 id) {\\n        id = maids.length;\\n        require(id < MAX_MAID_COUNT, \\\"Maids: Maximum Maids\\\");\\n        maids.push(MaidInfo({originPower: power, supportedLPTokenAmount: 0, sushiRewardDebt: 0}));\\n        _mint(msg.sender, id);\\n    }\\n\\n    function mintBatch(uint256[] calldata powers, uint256 amounts) external onlyOwner {\\n        require(powers.length == amounts, \\\"Maids: Invalid parameters\\\");\\n        uint256 from = maids.length;\\n        for (uint256 i = 0; i < amounts; i += 1) {\\n            maids.push(MaidInfo({originPower: powers[i], supportedLPTokenAmount: 0, sushiRewardDebt: 0}));\\n            _mint(msg.sender, (i + from));\\n        }\\n    }\\n\\n    function powerAndLP(uint256 id) external view override returns (uint256, uint256) {\\n        MaidInfo storage maid = maids[id];\\n        return (maid.originPower, maid.supportedLPTokenAmount);\\n    }\\n\\n    function support(uint256 id, uint256 lpTokenAmount) public override {\\n        require(ownerOf(id) == msg.sender, \\\"Maids: Forbidden\\\");\\n        require(lpTokenAmount > 0, \\\"Maids: Invalid lpTokenAmount\\\");\\n        uint256 _supportedLPTokenAmount = maids[id].supportedLPTokenAmount;\\n\\n        maids[id].supportedLPTokenAmount = _supportedLPTokenAmount + lpTokenAmount;\\n        lpToken.transferFrom(msg.sender, address(this), lpTokenAmount);\\n\\n        uint256 _pid = masterChefPid;\\n        if (_pid > 0) {\\n            maids[id].sushiRewardDebt = _depositModule(\\n                _pid,\\n                lpTokenAmount,\\n                _supportedLPTokenAmount,\\n                maids[id].sushiRewardDebt\\n            );\\n        }\\n\\n        emit Support(id, lpTokenAmount);\\n    }\\n\\n    function supportWithPermit(\\n        uint256 id,\\n        uint256 lpTokenAmount,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external override {\\n        lpToken.permit(msg.sender, address(this), lpTokenAmount, deadline, v, r, s);\\n        support(id, lpTokenAmount);\\n    }\\n\\n    function desupport(uint256 id, uint256 lpTokenAmount) external override {\\n        require(ownerOf(id) == msg.sender, \\\"Maids: Forbidden\\\");\\n        require(lpTokenAmount > 0, \\\"Maids: Invalid lpTokenAmount\\\");\\n        uint256 _supportedLPTokenAmount = maids[id].supportedLPTokenAmount;\\n\\n        maids[id].supportedLPTokenAmount = _supportedLPTokenAmount - lpTokenAmount;\\n\\n        uint256 _pid = masterChefPid;\\n        if (_pid > 0) {\\n            maids[id].sushiRewardDebt = _withdrawModule(\\n                _pid,\\n                lpTokenAmount,\\n                _supportedLPTokenAmount,\\n                maids[id].sushiRewardDebt\\n            );\\n        }\\n\\n        lpToken.transfer(msg.sender, lpTokenAmount);\\n        emit Desupport(id, lpTokenAmount);\\n    }\\n\\n    function claimSushiReward(uint256 id) public override {\\n        require(ownerOf(id) == msg.sender, \\\"Maids: Forbidden\\\");\\n        maids[id].sushiRewardDebt = _claimSushiReward(maids[id].supportedLPTokenAmount, maids[id].sushiRewardDebt);\\n    }\\n\\n    function pendingSushiReward(uint256 id) external view override returns (uint256) {\\n        return _pendingSushiReward(maids[id].supportedLPTokenAmount, maids[id].sushiRewardDebt);\\n    }\\n\\n    function permit(\\n        address spender,\\n        uint256 id,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external override {\\n        require(block.timestamp <= deadline, \\\"Maids: Expired deadline\\\");\\n        bytes32 _DOMAIN_SEPARATOR = DOMAIN_SEPARATOR();\\n\\n        bytes32 digest = keccak256(\\n            abi.encodePacked(\\n                \\\"\\\\x19\\\\x01\\\",\\n                _DOMAIN_SEPARATOR,\\n                keccak256(abi.encode(PERMIT_TYPEHASH, spender, id, nonces[id], deadline))\\n            )\\n        );\\n        nonces[id] += 1;\\n\\n        address owner = ownerOf(id);\\n        require(spender != owner, \\\"Maids: Invalid spender\\\");\\n\\n        if (Address.isContract(owner)) {\\n            require(\\n                IERC1271(owner).isValidSignature(digest, abi.encodePacked(r, s, v)) == 0x1626ba7e,\\n                \\\"Maids: Unauthorized\\\"\\n            );\\n        } else {\\n            address recoveredAddress = Signature.recover(digest, v, r, s);\\n            require(recoveredAddress == owner, \\\"Maids: Unauthorized\\\");\\n        }\\n\\n        _approve(spender, id);\\n    }\\n\\n    function permitAll(\\n        address owner,\\n        address spender,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external override {\\n        require(block.timestamp <= deadline, \\\"Maids: Expired deadline\\\");\\n        bytes32 _DOMAIN_SEPARATOR = DOMAIN_SEPARATOR();\\n\\n        bytes32 digest = keccak256(\\n            abi.encodePacked(\\n                \\\"\\\\x19\\\\x01\\\",\\n                _DOMAIN_SEPARATOR,\\n                keccak256(abi.encode(PERMIT_ALL_TYPEHASH, owner, spender, noncesForAll[owner], deadline))\\n            )\\n        );\\n        noncesForAll[owner] += 1;\\n\\n        if (Address.isContract(owner)) {\\n            require(\\n                IERC1271(owner).isValidSignature(digest, abi.encodePacked(r, s, v)) == 0x1626ba7e,\\n                \\\"Maids: Unauthorized\\\"\\n            );\\n        } else {\\n            address recoveredAddress = Signature.recover(digest, v, r, s);\\n            require(recoveredAddress == owner, \\\"Maids: Unauthorized\\\");\\n        }\\n\\n        _setApprovalForAll(owner, spender, true);\\n    }\\n\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal override(ERC721, ERC721Enumerable) {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        override(ERC721, ERC721Enumerable, IERC165)\\n        returns (bool)\\n    {\\n        return interfaceId == 0x2a55205a || super.supportsInterface(interfaceId);\\n    }\\n\\n    function royaltyInfo(uint256, uint256 _salePrice) external view override returns (address, uint256) {\\n        return (royaltyReceiver, (_salePrice * royaltyFee) / 1000);\\n    }\\n\\n    function setRoyaltyInfo(address _receiver, uint256 _royaltyFee) external onlyOwner {\\n        royaltyReceiver = _receiver;\\n        royaltyFee = _royaltyFee;\\n    }\\n}\\n\",\"keccak256\":\"0xcb2eed711ff219d8459a017588e57f057086d93235a6c863064441f8596d3df3\",\"license\":\"MIT\"},\"contracts/interfaces/IERC1271.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.5.0;\\n\\n/// @title Interface for verifying contract-based account signatures\\n/// @notice Interface that verifies provided signature for the data\\n/// @dev Interface defined by EIP-1271\\ninterface IERC1271 {\\n    /// @notice Returns whether the provided signature is valid for the provided data\\n    /// @dev MUST return the bytes4 magic value 0x1626ba7e when function passes.\\n    /// MUST NOT modify state (using STATICCALL for solc < 0.5, view modifier for solc > 0.5).\\n    /// MUST allow external calls.\\n    /// @param hash Hash of the data to be signed\\n    /// @param signature Signature byte array associated with _data\\n    /// @return magicValue The bytes4 magic value 0x1626ba7e\\n    function isValidSignature(bytes32 hash, bytes memory signature) external view returns (bytes4 magicValue);\\n}\\n\",\"keccak256\":\"0x7115b65c073af6cadf4dad8baa66422be19ad0741d41566cc3db888def037f80\",\"license\":\"MIT\"},\"contracts/interfaces/IERC2981.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.5;\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\n///\\n/// @dev Interface for the NFT Royalty Standard\\n///\\ninterface IERC2981 is IERC165 {\\n    /// ERC165 bytes to add to interface array - set in parent contract\\n    /// implementing this standard\\n    ///\\n    /// bytes4(keccak256(\\\"royaltyInfo(uint256,uint256)\\\")) == 0x2a55205a\\n    /// bytes4 private constant _INTERFACE_ID_ERC2981 = 0x2a55205a;\\n    /// _registerInterface(_INTERFACE_ID_ERC2981);\\n\\n    /// @notice Called with the sale price to determine how much royalty\\n    //          is owed and to whom.\\n    /// @param _tokenId - the NFT asset queried for royalty information\\n    /// @param _salePrice - the sale price of the NFT asset specified by _tokenId\\n    /// @return receiver - address of who should be sent the royalty payment\\n    /// @return royaltyAmount - the royalty payment amount for _salePrice\\n    function royaltyInfo(uint256 _tokenId, uint256 _salePrice)\\n        external\\n        view\\n        returns (address receiver, uint256 royaltyAmount);\\n}\\n\",\"keccak256\":\"0xd1bb686f52e765d693ef1845dc110f51fa3ebffe6e13ee36c1e1f7042289525c\",\"license\":\"MIT\"},\"contracts/interfaces/IMaids.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.5.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\\\";\\nimport \\\"../uniswapv2/interfaces/IUniswapV2Pair.sol\\\";\\nimport \\\"./IMasterChefModule.sol\\\";\\n\\ninterface IMaids is IERC721, IERC721Metadata, IERC721Enumerable, IMasterChefModule {\\n    event Support(uint256 indexed id, uint256 lpTokenAmount);\\n    event Desupport(uint256 indexed id, uint256 lpTokenAmount);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n    function PERMIT_TYPEHASH() external view returns (bytes32);\\n\\n    function PERMIT_ALL_TYPEHASH() external view returns (bytes32);\\n\\n    function MAX_MAID_COUNT() external view returns (uint256);\\n\\n    function nonces(uint256 id) external view returns (uint256);\\n\\n    function noncesForAll(address owner) external view returns (uint256);\\n\\n    function maids(uint256 id)\\n        external\\n        view\\n        returns (\\n            uint256 originPower,\\n            uint256 supportedLPTokenAmount,\\n            uint256 sushiRewardDebt\\n        );\\n\\n    function powerAndLP(uint256 id) external view returns (uint256, uint256);\\n\\n    function support(uint256 id, uint256 lpTokenAmount) external;\\n\\n    function supportWithPermit(\\n        uint256 id,\\n        uint256 lpTokenAmount,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    function desupport(uint256 id, uint256 lpTokenAmount) external;\\n\\n    function claimSushiReward(uint256 id) external;\\n\\n    function pendingSushiReward(uint256 id) external view returns (uint256);\\n\\n    function permit(\\n        address spender,\\n        uint256 id,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    function permitAll(\\n        address owner,\\n        address spender,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n}\\n\",\"keccak256\":\"0x2c767e863abe65b8be69eb062115e782a2a628c08da219ccca7b61429ad171e6\",\"license\":\"MIT\"},\"contracts/interfaces/IMasterChef.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.12;\\npragma experimental ABIEncoderV2;\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IMasterChef {\\n    struct UserInfo {\\n        uint256 amount; // How many LP tokens the user has provided.\\n        uint256 rewardDebt; // Reward debt. See explanation below.\\n    }\\n\\n    struct PoolInfo {\\n        IERC20 lpToken; // Address of LP token contract.\\n        uint256 allocPoint; // How many allocation points assigned to this pool. SUSHI to distribute per block.\\n        uint256 lastRewardBlock; // Last block number that SUSHI distribution occurs.\\n        uint256 accSushiPerShare; // Accumulated SUSHI per share, times 1e12. See below.\\n    }\\n\\n    function poolInfo(uint256 pid) external view returns (IMasterChef.PoolInfo memory);\\n\\n    function userInfo(uint256 pid, address user) external view returns (IMasterChef.UserInfo memory);\\n\\n    function pendingSushi(uint256 _pid, address _user) external view returns (uint256);\\n\\n    function deposit(uint256 _pid, uint256 _amount) external;\\n\\n    function withdraw(uint256 _pid, uint256 _amount) external;\\n}\\n\",\"keccak256\":\"0xf0983f7cb6bb9cdd6ed934f3aba076a84666d55a3ce53e10c2bab2c70224f282\",\"license\":\"MIT\"},\"contracts/interfaces/IMasterChefModule.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.5.0;\\n\\nimport \\\"./IMasterChef.sol\\\";\\nimport \\\"../uniswapv2/interfaces/IUniswapV2Pair.sol\\\";\\n\\ninterface IMasterChefModule {\\n    function lpToken() external view returns (IUniswapV2Pair);\\n\\n    function sushi() external view returns (IERC20);\\n\\n    function sushiMasterChef() external view returns (IMasterChef);\\n\\n    function masterChefPid() external view returns (uint256);\\n\\n    function sushiLastRewardBlock() external view returns (uint256);\\n\\n    function accSushiPerShare() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x2c0111c97d7034bec9ac8917fc05da68a8e3ccee1fc1a0babfc4e1dccf993e2e\",\"license\":\"MIT\"},\"contracts/libraries/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver(to).onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x410ab54efef42f0d5048c00d94260521a769d53bc95f68e608f1c9d900213c55\",\"license\":\"MIT\"},\"contracts/libraries/ERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n\\n * @dev MaidCoin: This is for Maids and the like minted in order from 0 and doesn't have burn function.\\n */\\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    //TODO\\n    function totalSupply() public view virtual override returns (uint256) {\\n        // return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    //TODO\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        // require(index < ERC721Enumerable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        // return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n\\n        if (from == address(0)) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        } else if (to == address(0)) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        } else {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n}\\n\",\"keccak256\":\"0x556ee290e07015c01b7bffeeeac567b96d48904576307ac882d8dd87b921774b\",\"license\":\"MIT\"},\"contracts/libraries/MasterChefModule.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.5;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"../interfaces/IMasterChefModule.sol\\\";\\n\\nabstract contract MasterChefModule is Ownable, IMasterChefModule {\\n    IUniswapV2Pair public immutable override lpToken;\\n\\n    IERC20 public immutable override sushi;\\n    IMasterChef public override sushiMasterChef;\\n    uint256 public override masterChefPid;\\n    uint256 public override sushiLastRewardBlock;\\n    uint256 public override accSushiPerShare;\\n    bool private initialDeposited;\\n\\n    constructor(IUniswapV2Pair _lpToken, IERC20 _sushi) {\\n        lpToken = _lpToken;\\n        sushi = _sushi;\\n    }\\n\\n    function _depositModule(\\n        uint256 _pid,\\n        uint256 depositAmount,\\n        uint256 supportedLPTokenAmount,\\n        uint256 sushiRewardDebt\\n    ) internal returns (uint256 newRewardDebt) {\\n        uint256 _totalSupportedLPTokenAmount = sushiMasterChef.userInfo(_pid, address(this)).amount;\\n        uint256 _accSushiPerShare = _depositToSushiMasterChef(_pid, depositAmount, _totalSupportedLPTokenAmount);\\n        uint256 pending = (supportedLPTokenAmount * _accSushiPerShare) / 1e18 - sushiRewardDebt;\\n        if (pending > 0) safeSushiTransfer(msg.sender, pending);\\n        return ((supportedLPTokenAmount + depositAmount) * _accSushiPerShare) / 1e18;\\n    }\\n\\n    function _withdrawModule(\\n        uint256 _pid,\\n        uint256 withdrawalAmount,\\n        uint256 supportedLPTokenAmount,\\n        uint256 sushiRewardDebt\\n    ) internal returns (uint256 newRewardDebt) {\\n        uint256 _totalSupportedLPTokenAmount = sushiMasterChef.userInfo(_pid, address(this)).amount;\\n        uint256 _accSushiPerShare = _withdrawFromSushiMasterChef(_pid, withdrawalAmount, _totalSupportedLPTokenAmount);\\n        uint256 pending = (supportedLPTokenAmount * _accSushiPerShare) / 1e18 - sushiRewardDebt;\\n        if (pending > 0) safeSushiTransfer(msg.sender, pending);\\n        return ((supportedLPTokenAmount - withdrawalAmount) * _accSushiPerShare) / 1e18;\\n    }\\n\\n    function _claimSushiReward(uint256 supportedLPTokenAmount, uint256 sushiRewardDebt)\\n        internal\\n        returns (uint256 newRewardDebt)\\n    {\\n        uint256 _pid = masterChefPid;\\n        require(_pid > 0, \\\"MasterChefModule: Unclaimable\\\");\\n\\n        uint256 _totalSupportedLPTokenAmount = sushiMasterChef.userInfo(_pid, address(this)).amount;\\n        uint256 _accSushiPerShare = _depositToSushiMasterChef(_pid, 0, _totalSupportedLPTokenAmount);\\n        uint256 pending = (supportedLPTokenAmount * _accSushiPerShare) / 1e18 - sushiRewardDebt;\\n        require(pending > 0, \\\"MasterChefModule: Nothing can be claimed\\\");\\n        safeSushiTransfer(msg.sender, pending);\\n        return (supportedLPTokenAmount * _accSushiPerShare) / 1e18;\\n    }\\n\\n    function _pendingSushiReward(uint256 supportedLPTokenAmount, uint256 sushiRewardDebt)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        uint256 _pid = masterChefPid;\\n        if (_pid == 0) return 0;\\n        uint256 _totalSupportedLPTokenAmount = sushiMasterChef.userInfo(_pid, address(this)).amount;\\n\\n        uint256 _accSushiPerShare = accSushiPerShare;\\n        if (block.number > sushiLastRewardBlock && _totalSupportedLPTokenAmount != 0) {\\n            uint256 reward = sushiMasterChef.pendingSushi(masterChefPid, address(this));\\n            _accSushiPerShare += ((reward * 1e18) / _totalSupportedLPTokenAmount);\\n        }\\n\\n        return (supportedLPTokenAmount * _accSushiPerShare) / 1e18 - sushiRewardDebt;\\n    }\\n\\n    function setSushiMasterChef(IMasterChef _masterChef, uint256 _pid) external onlyOwner {\\n        require(address(_masterChef.poolInfo(_pid).lpToken) == address(lpToken), \\\"MasterChefModule: Invalid pid\\\");\\n        if (!initialDeposited) {\\n            initialDeposited = true;\\n            lpToken.approve(address(_masterChef), type(uint256).max);\\n\\n            sushiMasterChef = _masterChef;\\n            masterChefPid = _pid;\\n            _depositToSushiMasterChef(_pid, lpToken.balanceOf(address(this)), 0);\\n        } else {\\n            IMasterChef oldChef = sushiMasterChef;\\n            uint256 oldpid = masterChefPid;\\n            _withdrawFromSushiMasterChef(oldpid, oldChef.userInfo(oldpid, address(this)).amount, 0);\\n            if (_masterChef != oldChef) {\\n                lpToken.approve(address(oldChef), 0);\\n                lpToken.approve(address(_masterChef), type(uint256).max);\\n            }\\n\\n            sushiMasterChef = _masterChef;\\n            masterChefPid = _pid;\\n            _depositToSushiMasterChef(_pid, lpToken.balanceOf(address(this)), 0);\\n        }\\n    }\\n\\n    function _depositToSushiMasterChef(\\n        uint256 _pid,\\n        uint256 _amount,\\n        uint256 _totalSupportedLPTokenAmount\\n    ) internal returns (uint256 _accSushiPerShare) {\\n        return _toSushiMasterChef(true, _pid, _amount, _totalSupportedLPTokenAmount);\\n    }\\n\\n    function _withdrawFromSushiMasterChef(\\n        uint256 _pid,\\n        uint256 _amount,\\n        uint256 _totalSupportedLPTokenAmount\\n    ) internal returns (uint256 _accSushiPerShare) {\\n        return _toSushiMasterChef(false, _pid, _amount, _totalSupportedLPTokenAmount);\\n    }\\n\\n    function _toSushiMasterChef(\\n        bool deposit,\\n        uint256 _pid,\\n        uint256 _amount,\\n        uint256 _totalSupportedLPTokenAmount\\n    ) internal returns (uint256) {\\n        uint256 reward;\\n        if (block.number <= sushiLastRewardBlock) {\\n            if (deposit) sushiMasterChef.deposit(_pid, _amount);\\n            else sushiMasterChef.withdraw(_pid, _amount);\\n            return accSushiPerShare;\\n        } else {\\n            uint256 balance0 = sushi.balanceOf(address(this));\\n            if (deposit) sushiMasterChef.deposit(_pid, _amount);\\n            else sushiMasterChef.withdraw(_pid, _amount);\\n            uint256 balance1 = sushi.balanceOf(address(this));\\n            reward = balance1 - balance0;\\n        }\\n        sushiLastRewardBlock = block.number;\\n        if (_totalSupportedLPTokenAmount > 0 && reward > 0) {\\n            uint256 _accSushiPerShare = accSushiPerShare + ((reward * 1e18) / _totalSupportedLPTokenAmount);\\n            accSushiPerShare = _accSushiPerShare;\\n            return _accSushiPerShare;\\n        } else {\\n            return accSushiPerShare;\\n        }\\n    }\\n\\n    function safeSushiTransfer(address _to, uint256 _amount) internal {\\n        uint256 sushiBal = sushi.balanceOf(address(this));\\n        if (_amount > sushiBal) {\\n            sushi.transfer(_to, sushiBal);\\n        } else {\\n            sushi.transfer(_to, _amount);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xdca10bbd599a988b66e6ab66886bb3f5a0be07469789c8d3387136bdaa7101a5\",\"license\":\"MIT\"},\"contracts/libraries/Signature.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.5;\\n\\nlibrary Signature {\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        require(\\n            uint256(s) <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0,\\n            \\\"ECDSA: invalid signature 's' value\\\"\\n        );\\n        require(v == 27 || v == 28, \\\"ECDSA: invalid signature 'v' value\\\");\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        require(signer != address(0), \\\"ECDSA: invalid signature\\\");\\n\\n        return signer;\\n    }\\n}\\n\",\"keccak256\":\"0x37eeee811e730f46592bce8da44034bda5265e1f047eb19c8bd71fa9dae4747a\",\"license\":\"MIT\"},\"contracts/uniswapv2/interfaces/IUniswapV2Pair.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    function name() external pure returns (string memory);\\n\\n    function symbol() external pure returns (string memory);\\n\\n    function decimals() external pure returns (uint8);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address owner) external view returns (uint256);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n\\n    function nonces(address owner) external view returns (uint256);\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\\n    event Burn(address indexed sender, uint256 amount0, uint256 amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint256 amount0In,\\n        uint256 amount1In,\\n        uint256 amount0Out,\\n        uint256 amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\\n\\n    function factory() external view returns (address);\\n\\n    function token0() external view returns (address);\\n\\n    function token1() external view returns (address);\\n\\n    function getReserves()\\n        external\\n        view\\n        returns (\\n            uint112 reserve0,\\n            uint112 reserve1,\\n            uint32 blockTimestampLast\\n        );\\n\\n    function price0CumulativeLast() external view returns (uint256);\\n\\n    function price1CumulativeLast() external view returns (uint256);\\n\\n    function kLast() external view returns (uint256);\\n\\n    function mint(address to) external returns (uint256 liquidity);\\n\\n    function burn(address to) external returns (uint256 amount0, uint256 amount1);\\n\\n    function swap(\\n        uint256 amount0Out,\\n        uint256 amount1Out,\\n        address to,\\n        bytes calldata data\\n    ) external;\\n\\n    function skim(address to) external;\\n\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\",\"keccak256\":\"0x1acf4ebf8ce4e52df2c1dbc3aa76a0895657471001631c2e90121cee574180af\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x61016060405260196011553480156200001757600080fd5b506040516200442f3803806200442f8339810160408190526200003a916200030f565b82826040518060400160405280600e81526020016d4d616964436f696e204d6169647360901b815250604051806040016040528060058152602001644d4149445360d81b8152506000620000936200026560201b60201c565b600080546001600160a01b0319166001600160a01b0383169081178255604051929350917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3508151620000f290600190602085019062000269565b5080516200010890600290602084019062000269565b5050506001600160601b0319606092831b8116608090815291831b1660a09081524660e0819052604080518082018252600e8082526d4d616964436f696e204d6169647360901b60209283018190527fa82d4fbbaa1126728993832399ddf946bf46e7cb76e9f4a73d75fbc889fab91a610100819052845180860186526001808252603160f81b9186018290527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc66101208190527f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f6101408190528851808a018a529687529587019490945286518088018852908152850152845193840192909252928201529485015291830191909152309082015260c00160408051808303601f19018152919052805160209091012060c052601280546001600160a01b0319166001600160a01b039290921691909117905550620003b99050565b3390565b828054620002779062000363565b90600052602060002090601f0160209004810192826200029b5760008555620002e6565b82601f10620002b657805160ff1916838001178555620002e6565b82800160010185558215620002e6579182015b82811115620002e6578251825591602001919060010190620002c9565b50620002f4929150620002f8565b5090565b5b80821115620002f45760008155600101620002f9565b6000806000606084860312156200032557600080fd5b83516200033281620003a0565b60208501519093506200034581620003a0565b60408501519092506200035881620003a0565b809150509250925092565b600181811c908216806200037857607f821691505b602082108114156200039a57634e487b7160e01b600052602260045260246000fd5b50919050565b6001600160a01b0381168114620003b657600080fd5b50565b60805160601c60a05160601c60c05160e051610100516101205161014051613fb36200047c6000396000610a9c01526000610aea01526000610ac201526000610a4b01526000610a7401526000818161033401528181613049015281816130fb0152818161319e015281816132d1015261344301526000818161047601528181610f7701528181611403015281816117b9015281816118b8015281816119cc01528181611a8901528181611be101528181611c850152611d430152613fb36000f3fe608060405234801561001057600080fd5b506004361061027f5760003560e01c8063715018a61161015c578063a234d608116100ce578063c62c610b11610087578063c62c610b14610615578063c87b56dd1461061e578063c9bbd04a14610631578063e2e784d514610644578063e985e9c514610657578063f2fde38b1461069357600080fd5b8063a234d60814610599578063a39b10fa146105ac578063a78cc1a3146105bf578063aba07847146105c8578063b4e13c8d146105db578063b88d4fde1461060257600080fd5b80638da5cb5b116101205780638da5cb5b14610527578063904dfb8e1461053857806395d89b41146105585780639be56c6714610560578063a0712d6814610573578063a22cb4651461058657600080fd5b8063715018a6146104be578063719242c2146104c65780637492ee28146104d95780637a76d64a146104ec5780637ac2ff7b1461051457600080fd5b806330adf81f116101f55780634fd3c34a116101b95780634fd3c34a1461044257806357339be61461044b57806358bb45c91461045e5780635fcbd285146104715780636352211e1461049857806370a08231146104ab57600080fd5b806330adf81f146103e45780633644e5151461040b57806338e97f441461041357806342842e0e1461041c5780634f6ccce71461042f57600080fd5b80630a087903116102475780630a0879031461032f578063141a468c1461035657806318160ddd1461038457806323b872dd1461038c5780632a55205a1461039f5780632f745c59146103d157600080fd5b806301ffc9a71461028457806303c0bdcd146102ac57806306fdde03146102da578063081812fc146102ef578063095ea7b31461031a575b600080fd5b610297610292366004613a54565b6106a6565b60405190151581526020015b60405180910390f35b6102bf6102ba366004613b4c565b6106d1565b604080519384526020840192909252908201526060016102a3565b6102e2610704565b6040516102a39190613c7e565b6103026102fd366004613b4c565b610796565b6040516001600160a01b0390911681526020016102a3565b61032d610328366004613950565b610830565b005b6103027f000000000000000000000000000000000000000000000000000000000000000081565b610376610364366004613b4c565b600e6020526000908152604090205481565b6040519081526020016102a3565b601054610376565b61032d61039a3660046137ba565b610946565b6103b26103ad366004613b7e565b610977565b604080516001600160a01b0390931683526020830191909152016102a3565b6103766103df366004613950565b6109b1565b6103767f49ecf333e5b8c95c40fdafc95c1ad136e8914a8fb55e9dc8bb01eaa83a2df9ad81565b610376610a47565b610376600b5481565b61032d61042a3660046137ba565b610b38565b61037661043d366004613b4c565b610b53565b610376600c5481565b61032d610459366004613b4c565b610ba7565b61037661046c366004613b4c565b610c54565b6103027f000000000000000000000000000000000000000000000000000000000000000081565b6103026104a6366004613b4c565b610ca8565b6103766104b9366004613764565b610d1f565b61032d610da6565b61032d6104d43660046139bc565b610e1a565b61032d6104e7366004613ba0565b610f37565b6104ff6104fa366004613b4c565b610fed565b604080519283526020830191909152016102a3565b61032d61052236600461397c565b611029565b6000546001600160a01b0316610302565b610376610546366004613764565b600f6020526000908152604090205481565b6102e26112f6565b61032d61056e366004613b7e565b611305565b610376610581366004613b4c565b61152a565b61032d610594366004613922565b611650565b61032d6105a7366004613b7e565b61165f565b61032d6105ba366004613950565b611870565b6103766103e881565b61032d6105d63660046138bf565b611d74565b6103767fdaab21af31ece73a508939fedd476a5ee5129a5ed4bb091f3236ffb45394df6281565b61032d6106103660046137fb565b611fdd565b610376600a5481565b6102e261062c366004613b4c565b612015565b600954610302906001600160a01b031681565b61032d610652366004613950565b612122565b610297610665366004613781565b6001600160a01b03918216600090815260066020908152604080832093909416825291909152205460ff1690565b61032d6106a1366004613764565b612172565b600063152a902d60e11b6001600160e01b0319831614806106cb57506106cb8261225c565b92915050565b601081815481106106e157600080fd5b600091825260209091206003909102018054600182015460029092015490925083565b60606001805461071390613e7f565b80601f016020809104026020016040519081016040528092919081815260200182805461073f90613e7f565b801561078c5780601f106107615761010080835404028352916020019161078c565b820191906000526020600020905b81548152906001019060200180831161076f57829003601f168201915b5050505050905090565b6000818152600360205260408120546001600160a01b03166108145760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084015b60405180910390fd5b506000908152600560205260409020546001600160a01b031690565b600061083b82610ca8565b9050806001600160a01b0316836001600160a01b031614156108a95760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b606482015260840161080b565b336001600160a01b03821614806108c557506108c58133610665565b6109375760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c0000000000000000606482015260840161080b565b6109418383612281565b505050565b61095033826122ef565b61096c5760405162461bcd60e51b815260040161080b90613d6f565b6109418383836123e6565b60125460115460009182916001600160a01b03909116906103e89061099c9086613e1d565b6109a69190613e09565b915091509250929050565b60006109bc83610d1f565b8210610a1e5760405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201526a74206f6620626f756e647360a81b606482015260840161080b565b506001600160a01b03919091166000908152600760209081526040808320938352929052205490565b60007f0000000000000000000000000000000000000000000000000000000000000000461415610a9657507f000000000000000000000000000000000000000000000000000000000000000090565b604080517f000000000000000000000000000000000000000000000000000000000000000060208201527f0000000000000000000000000000000000000000000000000000000000000000918101919091527f000000000000000000000000000000000000000000000000000000000000000060608201524660808201523060a082015260c00160405160208183030381529060405280519060200120905090565b61094183838360405180602001604052806000815250611fdd565b6000610b5e60105490565b8210610ba35760405162461bcd60e51b815260206004820152601460248201527309ac2d2c8e6744092dcecc2d8d2c840d2dcc8caf60631b604482015260640161080b565b5090565b33610bb182610ca8565b6001600160a01b031614610bd75760405162461bcd60e51b815260040161080b90613c91565b610c2960108281548110610bed57610bed613f15565b90600052602060002090600302016001015460108381548110610c1257610c12613f15565b906000526020600020906003020160020154612591565b60108281548110610c3c57610c3c613f15565b90600052602060002090600302016002018190555050565b60006106cb60108381548110610c6c57610c6c613f15565b90600052602060002090600302016001015460108481548110610c9157610c91613f15565b906000526020600020906003020160020154612737565b6000818152600360205260408120546001600160a01b0316806106cb5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b606482015260840161080b565b60006001600160a01b038216610d8a5760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b606482015260840161080b565b506001600160a01b031660009081526004602052604090205490565b6000546001600160a01b03163314610dd05760405162461bcd60e51b815260040161080b90613d3a565b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b6000546001600160a01b03163314610e445760405162461bcd60e51b815260040161080b90613d3a565b818114610e935760405162461bcd60e51b815260206004820152601960248201527f4d616964733a20496e76616c696420706172616d657465727300000000000000604482015260640161080b565b60105460005b82811015610f305760106040518060600160405280878785818110610ec057610ec0613f15565b602090810292909201358352506000828201819052604092830181905284546001818101875595825290829020845160039092020190815590830151938101939093550151600290910155610f1e33610f198484613df1565b6128d1565b610f29600182613df1565b9050610e99565b5050505050565b60405163d505accf60e01b8152336004820152306024820152604481018690526064810185905260ff8416608482015260a4810183905260c481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063d505accf9060e401600060405180830381600087803b158015610fc357600080fd5b505af1158015610fd7573d6000803e3d6000fd5b50505050610fe58686611305565b505050505050565b60008060006010848154811061100557611005613f15565b90600052602060002090600302019050806000015481600101549250925050915091565b834211156110735760405162461bcd60e51b81526020600482015260176024820152764d616964733a204578706972656420646561646c696e6560481b604482015260640161080b565b600061107d610a47565b6000878152600e60208181526040808420805482517f49ecf333e5b8c95c40fdafc95c1ad136e8914a8fb55e9dc8bb01eaa83a2df9ad818601526001600160a01b038f1681850152606081018e90526080810182905260a08082018e90528451808303909101815260c08201855280519086012061190160f01b60e083015260e2820189905261010280830191909152845180830390910181526101229091019093528251928401929092208c865293909252939450909260019290611144908490613df1565b909155506000905061115588610ca8565b9050806001600160a01b0316896001600160a01b031614156111b25760405162461bcd60e51b815260206004820152601660248201527526b0b4b2399d1024b73b30b634b21039b832b73232b960511b604482015260640161080b565b803b1561129e57604080516020810187905280820186905260f888901b6001600160f81b0319166060820152815160418183030181526061820192839052630b135d3f60e11b9092526001600160a01b03831691631626ba7e9161121a918691606501613c65565b60206040518083038186803b15801561123257600080fd5b505afa158015611246573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061126a9190613a71565b6001600160e01b031916631626ba7e60e01b146112995760405162461bcd60e51b815260040161080b90613d0d565b6112e1565b60006112ac83888888612a1f565b9050816001600160a01b0316816001600160a01b0316146112df5760405162461bcd60e51b815260040161080b90613d0d565b505b6112eb8989612281565b505050505050505050565b60606002805461071390613e7f565b3361130f83610ca8565b6001600160a01b0316146113355760405162461bcd60e51b815260040161080b90613c91565b600081116113855760405162461bcd60e51b815260206004820152601c60248201527f4d616964733a20496e76616c6964206c70546f6b656e416d6f756e7400000000604482015260640161080b565b60006010838154811061139a5761139a613f15565b906000526020600020906003020160010154905081816113ba9190613df1565b601084815481106113cd576113cd613f15565b60009182526020909120600390910201600101556040516323b872dd60e01b8152336004820152306024820152604481018390527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906323b872dd90606401602060405180830381600087803b15801561144f57600080fd5b505af1158015611463573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114879190613a37565b50600a5480156114ea576114c1818484601088815481106114aa576114aa613f15565b906000526020600020906003020160020154612bc8565b601085815481106114d4576114d4613f15565b9060005260206000209060030201600201819055505b837f9c86c947c690753cc6de6016e1c45414d895662cc13af08319148419baf5df2f8460405161151c91815260200190565b60405180910390a250505050565b600080546001600160a01b031633146115555760405162461bcd60e51b815260040161080b90613d3a565b506010546103e881106115a15760405162461bcd60e51b81526020600482015260146024820152734d616964733a204d6178696d756d204d6169647360601b604482015260640161080b565b6040805160608101825283815260006020820181815292820181815260108054600181018255925291517f1b6847dc741a1b0cd08d278845f9d819d87b734759afb55fe2de5cb82a9ae67260039092029182015591517f1b6847dc741a1b0cd08d278845f9d819d87b734759afb55fe2de5cb82a9ae673830155517f1b6847dc741a1b0cd08d278845f9d819d87b734759afb55fe2de5cb82a9ae6749091015561164b33826128d1565b919050565b61165b338383612cd0565b5050565b3361166983610ca8565b6001600160a01b03161461168f5760405162461bcd60e51b815260040161080b90613c91565b600081116116df5760405162461bcd60e51b815260206004820152601c60248201527f4d616964733a20496e76616c6964206c70546f6b656e416d6f756e7400000000604482015260640161080b565b6000601083815481106116f4576116f4613f15565b906000526020600020906003020160010154905081816117149190613e3c565b6010848154811061172757611727613f15565b6000918252602090912060016003909202010155600a54801561179d576117748184846010888154811061175d5761175d613f15565b906000526020600020906003020160020154612d9f565b6010858154811061178757611787613f15565b9060005260206000209060030201600201819055505b60405163a9059cbb60e01b8152336004820152602481018490527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063a9059cbb90604401602060405180830381600087803b15801561180557600080fd5b505af1158015611819573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061183d9190613a37565b50837fb08330c00f69f3f2343fd81719784be16358c64832e868cd5ccec5b98ec628978460405161151c91815260200190565b6000546001600160a01b0316331461189a5760405162461bcd60e51b815260040161080b90613d3a565b604051631526fe2760e01b8152600481018290526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081169190841690631526fe279060240160806040518083038186803b1580156118ff57600080fd5b505afa158015611913573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119379190613a8e565b516001600160a01b03161461198e5760405162461bcd60e51b815260206004820152601d60248201527f4d6173746572436865664d6f64756c653a20496e76616c696420706964000000604482015260640161080b565b600d5460ff16611b0d57600d805460ff1916600117905560405163095ea7b360e01b81526001600160a01b03838116600483015260001960248301527f0000000000000000000000000000000000000000000000000000000000000000169063095ea7b390604401602060405180830381600087803b158015611a1057600080fd5b505af1158015611a24573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a489190613a37565b50600980546001600160a01b0319166001600160a01b0384811691909117909155600a8290556040516370a0823160e01b81523060048201526109419183917f0000000000000000000000000000000000000000000000000000000000000000909116906370a08231906024015b60206040518083038186803b158015611ace57600080fd5b505afa158015611ae2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b069190613b65565b6000612e87565b600954600a546040516393f1a40b60e01b8152600481018290523060248201526001600160a01b0390921691611ba190829084906393f1a40b90604401604080518083038186803b158015611b6157600080fd5b505afa158015611b75573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b999190613afd565b516000612e96565b50816001600160a01b0316846001600160a01b031614611d035760405163095ea7b360e01b81526001600160a01b038381166004830152600060248301527f0000000000000000000000000000000000000000000000000000000000000000169063095ea7b390604401602060405180830381600087803b158015611c2557600080fd5b505af1158015611c39573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c5d9190613a37565b5060405163095ea7b360e01b81526001600160a01b03858116600483015260001960248301527f0000000000000000000000000000000000000000000000000000000000000000169063095ea7b390604401602060405180830381600087803b158015611cc957600080fd5b505af1158015611cdd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d019190613a37565b505b600980546001600160a01b0319166001600160a01b0386811691909117909155600a8490556040516370a0823160e01b8152306004820152610f309185917f0000000000000000000000000000000000000000000000000000000000000000909116906370a0823190602401611ab6565b83421115611dbe5760405162461bcd60e51b81526020600482015260176024820152764d616964733a204578706972656420646561646c696e6560481b604482015260640161080b565b6000611dc8610a47565b6001600160a01b038881166000818152600f60208181526040808420805482517fdaab21af31ece73a508939fedd476a5ee5129a5ed4bb091f3236ffb45394df6281860152808401889052978f1660608901526080880181905260a08089018f90528351808a03909101815260c08901845280519085012061190160f01b60e08a015260e289018a9052610102808a01919091528351808a03909101815261012290980190925286519683019690962094845291905293945090926001929190611e93908490613df1565b9091555050873b15611f8457604080516020810186905280820185905260f887901b6001600160f81b0319166060820152815160418183030181526061820192839052630b135d3f60e11b9092526001600160a01b038a1691631626ba7e91611f00918591606501613c65565b60206040518083038186803b158015611f1857600080fd5b505afa158015611f2c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f509190613a71565b6001600160e01b031916631626ba7e60e01b14611f7f5760405162461bcd60e51b815260040161080b90613d0d565b611fc7565b6000611f9282878787612a1f565b9050886001600160a01b0316816001600160a01b031614611fc55760405162461bcd60e51b815260040161080b90613d0d565b505b611fd388886001612cd0565b5050505050505050565b611fe733836122ef565b6120035760405162461bcd60e51b815260040161080b90613d6f565b61200f84848484612ea5565b50505050565b6000818152600360205260409020546060906001600160a01b03166120945760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201526e3732bc34b9ba32b73a103a37b5b2b760891b606482015260840161080b565b60006120d060408051808201909152601f81527f68747470733a2f2f6170692e6d616964636f696e2e6f72672f6d616964732f00602082015290565b905060008151116120f0576040518060200160405280600081525061211b565b806120fa84612ed8565b60405160200161210b929190613c03565b6040516020818303038152906040525b9392505050565b6000546001600160a01b0316331461214c5760405162461bcd60e51b815260040161080b90613d3a565b601280546001600160a01b0319166001600160a01b039390931692909217909155601155565b6000546001600160a01b0316331461219c5760405162461bcd60e51b815260040161080b90613d3a565b6001600160a01b0381166122015760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161080b565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b60006001600160e01b0319821663780e9d6360e01b14806106cb57506106cb82612fd6565b600081815260056020526040902080546001600160a01b0319166001600160a01b03841690811790915581906122b682610ca8565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000818152600360205260408120546001600160a01b03166123685760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b606482015260840161080b565b600061237383610ca8565b9050806001600160a01b0316846001600160a01b031614806123ae5750836001600160a01b03166123a384610796565b6001600160a01b0316145b806123de57506001600160a01b0380821660009081526006602090815260408083209388168352929052205460ff165b949350505050565b826001600160a01b03166123f982610ca8565b6001600160a01b0316146124615760405162461bcd60e51b815260206004820152602960248201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960448201526839903737ba1037bbb760b91b606482015260840161080b565b6001600160a01b0382166124c35760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b606482015260840161080b565b6124ce838383613026565b6124d9600082612281565b6001600160a01b0383166000908152600460205260408120805460019290612502908490613e3c565b90915550506001600160a01b0382166000908152600460205260408120805460019290612530908490613df1565b909155505060008181526003602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b600a54600090806125e45760405162461bcd60e51b815260206004820152601d60248201527f4d6173746572436865664d6f64756c653a20556e636c61696d61626c65000000604482015260640161080b565b6009546040516393f1a40b60e01b8152600481018390523060248201526000916001600160a01b0316906393f1a40b90604401604080518083038186803b15801561262e57600080fd5b505afa158015612642573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126669190613afd565b5190506000612676838284612e87565b9050600085670de0b6b3a764000061268e848a613e1d565b6126989190613e09565b6126a29190613e3c565b9050600081116127055760405162461bcd60e51b815260206004820152602860248201527f4d6173746572436865664d6f64756c653a204e6f7468696e672063616e2062656044820152670818db185a5b595960c21b606482015260840161080b565b61270f3382613031565b670de0b6b3a76400006127228389613e1d565b61272c9190613e09565b979650505050505050565b600a546000908061274c5760009150506106cb565b6009546040516393f1a40b60e01b8152600481018390523060248201526000916001600160a01b0316906393f1a40b90604401604080518083038186803b15801561279657600080fd5b505afa1580156127aa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127ce9190613afd565b51600c54600b5491925090431180156127e657508115155b1561289f57600954600a5460405163065509bb60e21b815260048101919091523060248201526000916001600160a01b03169063195426ec9060440160206040518083038186803b15801561283a57600080fd5b505afa15801561284e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128729190613b65565b90508261288782670de0b6b3a7640000613e1d565b6128919190613e09565b61289b9083613df1565b9150505b84670de0b6b3a76400006128b38389613e1d565b6128bd9190613e09565b6128c79190613e3c565b9695505050505050565b6001600160a01b0382166129275760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f2061646472657373604482015260640161080b565b6000818152600360205260409020546001600160a01b03161561298c5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000604482015260640161080b565b61299860008383613026565b6001600160a01b03821660009081526004602052604081208054600192906129c1908490613df1565b909155505060008181526003602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b60007f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0821115612a9c5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b606482015260840161080b565b8360ff16601b1480612ab157508360ff16601c145b612b085760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b606482015260840161080b565b6040805160008082526020820180845288905260ff871692820192909252606081018590526080810184905260019060a0016020604051602081039080840390855afa158015612b5c573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116612bbf5760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e61747572650000000000000000604482015260640161080b565b95945050505050565b6009546040516393f1a40b60e01b81526004810186905230602482015260009182916001600160a01b03909116906393f1a40b90604401604080518083038186803b158015612c1657600080fd5b505afa158015612c2a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c4e9190613afd565b5190506000612c5e878784612e87565b9050600084670de0b6b3a7640000612c768489613e1d565b612c809190613e09565b612c8a9190613e3c565b90508015612c9c57612c9c3382613031565b670de0b6b3a764000082612cb08989613df1565b612cba9190613e1d565b612cc49190613e09565b98975050505050505050565b816001600160a01b0316836001600160a01b03161415612d325760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c657200000000000000604482015260640161080b565b6001600160a01b03838116600081815260066020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6009546040516393f1a40b60e01b81526004810186905230602482015260009182916001600160a01b03909116906393f1a40b90604401604080518083038186803b158015612ded57600080fd5b505afa158015612e01573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e259190613afd565b5190506000612e35878784612e96565b9050600084670de0b6b3a7640000612e4d8489613e1d565b612e579190613e09565b612e619190613e3c565b90508015612e7357612e733382613031565b670de0b6b3a764000082612cb08989613e3c565b60006123de60018585856131cd565b60006123de60008585856131cd565b612eb08484846123e6565b612ebc84848484613528565b61200f5760405162461bcd60e51b815260040161080b90613cbb565b606081612efc5750506040805180820190915260018152600360fc1b602082015290565b8160005b8115612f265780612f1081613eba565b9150612f1f9050600a83613e09565b9150612f00565b60008167ffffffffffffffff811115612f4157612f41613f2b565b6040519080825280601f01601f191660200182016040528015612f6b576020820181803683370190505b5090505b84156123de57612f80600183613e3c565b9150612f8d600a86613ed5565b612f98906030613df1565b60f81b818381518110612fad57612fad613f15565b60200101906001600160f81b031916908160001a905350612fcf600a86613e09565b9450612f6f565b60006001600160e01b031982166380ac58cd60e01b148061300757506001600160e01b03198216635b5e139f60e01b145b806106cb57506301ffc9a760e01b6001600160e01b03198316146106cb565b610941838383613632565b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b15801561309357600080fd5b505afa1580156130a7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130cb9190613b65565b9050808211156131785760405163a9059cbb60e01b81526001600160a01b038481166004830152602482018390527f0000000000000000000000000000000000000000000000000000000000000000169063a9059cbb906044015b602060405180830381600087803b15801561314057600080fd5b505af1158015613154573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061200f9190613a37565b60405163a9059cbb60e01b81526001600160a01b038481166004830152602482018490527f0000000000000000000000000000000000000000000000000000000000000000169063a9059cbb90604401613126565b600080600b5443116132b957851561324957600954604051631c57762b60e31b815260048101879052602481018690526001600160a01b039091169063e2bbb15890604401600060405180830381600087803b15801561322c57600080fd5b505af1158015613240573d6000803e3d6000fd5b505050506132af565b600954604051630441a3e760e41b815260048101879052602481018690526001600160a01b039091169063441a3e7090604401600060405180830381600087803b15801561329657600080fd5b505af11580156132aa573d6000803e3d6000fd5b505050505b5050600c546123de565b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b15801561331b57600080fd5b505afa15801561332f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133539190613b65565b905086156133c557600954604051631c57762b60e31b815260048101889052602481018790526001600160a01b039091169063e2bbb15890604401600060405180830381600087803b1580156133a857600080fd5b505af11580156133bc573d6000803e3d6000fd5b5050505061342b565b600954604051630441a3e760e41b815260048101889052602481018790526001600160a01b039091169063441a3e7090604401600060405180830381600087803b15801561341257600080fd5b505af1158015613426573d6000803e3d6000fd5b505050505b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b15801561348d57600080fd5b505afa1580156134a1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134c59190613b65565b90506134d18282613e3c565b9250505043600b5582158015906134e85750600081115b156132af5760008361350283670de0b6b3a7640000613e1d565b61350c9190613e09565b600c546135199190613df1565b600c81905592506123de915050565b60006001600160a01b0384163b1561362a57604051630a85bd0160e11b81526001600160a01b0385169063150b7a029061356c903390899088908890600401613c32565b602060405180830381600087803b15801561358657600080fd5b505af19250505080156135b6575060408051601f3d908101601f191682019092526135b391810190613a71565b60015b613610573d8080156135e4576040519150601f19603f3d011682016040523d82523d6000602084013e6135e9565b606091505b5080516136085760405162461bcd60e51b815260040161080b90613cbb565b805181602001fd5b6001600160e01b031916630a85bd0160e11b1490506123de565b5060016123de565b6001600160a01b03831661364a576109418282613672565b6001600160a01b0382166136625761094183826136b6565b61366c83826136b6565b61094182825b600061367d83610d1f565b6001600160a01b039093166000908152600760209081526040808320868452825280832085905593825260089052919091209190915550565b600060016136c384610d1f565b6136cd9190613e3c565b600083815260086020526040902054909150808214613720576001600160a01b03841660009081526007602090815260408083208584528252808320548484528184208190558352600890915290208190555b5060009182526008602090815260408084208490556001600160a01b039094168352600781528383209183525290812055565b803560ff8116811461164b57600080fd5b60006020828403121561377657600080fd5b813561211b81613f41565b6000806040838503121561379457600080fd5b823561379f81613f41565b915060208301356137af81613f41565b809150509250929050565b6000806000606084860312156137cf57600080fd5b83356137da81613f41565b925060208401356137ea81613f41565b929592945050506040919091013590565b6000806000806080858703121561381157600080fd5b843561381c81613f41565b935060208581013561382d81613f41565b935060408601359250606086013567ffffffffffffffff8082111561385157600080fd5b818801915088601f83011261386557600080fd5b81358181111561387757613877613f2b565b613889601f8201601f19168501613dc0565b9150808252898482850101111561389f57600080fd5b808484018584013760008482840101525080935050505092959194509250565b60008060008060008060c087890312156138d857600080fd5b86356138e381613f41565b955060208701356138f381613f41565b94506040870135935061390860608801613753565b92506080870135915060a087013590509295509295509295565b6000806040838503121561393557600080fd5b823561394081613f41565b915060208301356137af81613f59565b6000806040838503121561396357600080fd5b823561396e81613f41565b946020939093013593505050565b60008060008060008060c0878903121561399557600080fd5b86356139a081613f41565b9550602087013594506040870135935061390860608801613753565b6000806000604084860312156139d157600080fd5b833567ffffffffffffffff808211156139e957600080fd5b818601915086601f8301126139fd57600080fd5b813581811115613a0c57600080fd5b8760208260051b8501011115613a2157600080fd5b6020928301989097509590910135949350505050565b600060208284031215613a4957600080fd5b815161211b81613f59565b600060208284031215613a6657600080fd5b813561211b81613f67565b600060208284031215613a8357600080fd5b815161211b81613f67565b600060808284031215613aa057600080fd5b6040516080810181811067ffffffffffffffff82111715613ac357613ac3613f2b565b6040528251613ad181613f41565b808252506020830151602082015260408301516040820152606083015160608201528091505092915050565b600060408284031215613b0f57600080fd5b6040516040810181811067ffffffffffffffff82111715613b3257613b32613f2b565b604052825181526020928301519281019290925250919050565b600060208284031215613b5e57600080fd5b5035919050565b600060208284031215613b7757600080fd5b5051919050565b60008060408385031215613b9157600080fd5b50508035926020909101359150565b60008060008060008060c08789031215613bb957600080fd5b86359550602087013594506040870135935061390860608801613753565b60008151808452613bef816020860160208601613e53565b601f01601f19169290920160200192915050565b60008351613c15818460208801613e53565b835190830190613c29818360208801613e53565b01949350505050565b6001600160a01b03858116825284166020820152604081018390526080606082018190526000906128c790830184613bd7565b8281526040602082015260006123de6040830184613bd7565b60208152600061211b6020830184613bd7565b60208082526010908201526f26b0b4b2399d102337b93134b23232b760811b604082015260600190565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b60208082526013908201527213585a591cce88155b985d5d1a1bdc9a5e9959606a1b604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b604051601f8201601f1916810167ffffffffffffffff81118282101715613de957613de9613f2b565b604052919050565b60008219821115613e0457613e04613ee9565b500190565b600082613e1857613e18613eff565b500490565b6000816000190483118215151615613e3757613e37613ee9565b500290565b600082821015613e4e57613e4e613ee9565b500390565b60005b83811015613e6e578181015183820152602001613e56565b8381111561200f5750506000910152565b600181811c90821680613e9357607f821691505b60208210811415613eb457634e487b7160e01b600052602260045260246000fd5b50919050565b6000600019821415613ece57613ece613ee9565b5060010190565b600082613ee457613ee4613eff565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114613f5657600080fd5b50565b8015158114613f5657600080fd5b6001600160e01b031981168114613f5657600080fdfea264697066735822122096677c344df5e19317b71160364700249d5cad4fe795255f1753f83fd3cf1d2864736f6c63430008050033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061027f5760003560e01c8063715018a61161015c578063a234d608116100ce578063c62c610b11610087578063c62c610b14610615578063c87b56dd1461061e578063c9bbd04a14610631578063e2e784d514610644578063e985e9c514610657578063f2fde38b1461069357600080fd5b8063a234d60814610599578063a39b10fa146105ac578063a78cc1a3146105bf578063aba07847146105c8578063b4e13c8d146105db578063b88d4fde1461060257600080fd5b80638da5cb5b116101205780638da5cb5b14610527578063904dfb8e1461053857806395d89b41146105585780639be56c6714610560578063a0712d6814610573578063a22cb4651461058657600080fd5b8063715018a6146104be578063719242c2146104c65780637492ee28146104d95780637a76d64a146104ec5780637ac2ff7b1461051457600080fd5b806330adf81f116101f55780634fd3c34a116101b95780634fd3c34a1461044257806357339be61461044b57806358bb45c91461045e5780635fcbd285146104715780636352211e1461049857806370a08231146104ab57600080fd5b806330adf81f146103e45780633644e5151461040b57806338e97f441461041357806342842e0e1461041c5780634f6ccce71461042f57600080fd5b80630a087903116102475780630a0879031461032f578063141a468c1461035657806318160ddd1461038457806323b872dd1461038c5780632a55205a1461039f5780632f745c59146103d157600080fd5b806301ffc9a71461028457806303c0bdcd146102ac57806306fdde03146102da578063081812fc146102ef578063095ea7b31461031a575b600080fd5b610297610292366004613a54565b6106a6565b60405190151581526020015b60405180910390f35b6102bf6102ba366004613b4c565b6106d1565b604080519384526020840192909252908201526060016102a3565b6102e2610704565b6040516102a39190613c7e565b6103026102fd366004613b4c565b610796565b6040516001600160a01b0390911681526020016102a3565b61032d610328366004613950565b610830565b005b6103027f000000000000000000000000000000000000000000000000000000000000000081565b610376610364366004613b4c565b600e6020526000908152604090205481565b6040519081526020016102a3565b601054610376565b61032d61039a3660046137ba565b610946565b6103b26103ad366004613b7e565b610977565b604080516001600160a01b0390931683526020830191909152016102a3565b6103766103df366004613950565b6109b1565b6103767f49ecf333e5b8c95c40fdafc95c1ad136e8914a8fb55e9dc8bb01eaa83a2df9ad81565b610376610a47565b610376600b5481565b61032d61042a3660046137ba565b610b38565b61037661043d366004613b4c565b610b53565b610376600c5481565b61032d610459366004613b4c565b610ba7565b61037661046c366004613b4c565b610c54565b6103027f000000000000000000000000000000000000000000000000000000000000000081565b6103026104a6366004613b4c565b610ca8565b6103766104b9366004613764565b610d1f565b61032d610da6565b61032d6104d43660046139bc565b610e1a565b61032d6104e7366004613ba0565b610f37565b6104ff6104fa366004613b4c565b610fed565b604080519283526020830191909152016102a3565b61032d61052236600461397c565b611029565b6000546001600160a01b0316610302565b610376610546366004613764565b600f6020526000908152604090205481565b6102e26112f6565b61032d61056e366004613b7e565b611305565b610376610581366004613b4c565b61152a565b61032d610594366004613922565b611650565b61032d6105a7366004613b7e565b61165f565b61032d6105ba366004613950565b611870565b6103766103e881565b61032d6105d63660046138bf565b611d74565b6103767fdaab21af31ece73a508939fedd476a5ee5129a5ed4bb091f3236ffb45394df6281565b61032d6106103660046137fb565b611fdd565b610376600a5481565b6102e261062c366004613b4c565b612015565b600954610302906001600160a01b031681565b61032d610652366004613950565b612122565b610297610665366004613781565b6001600160a01b03918216600090815260066020908152604080832093909416825291909152205460ff1690565b61032d6106a1366004613764565b612172565b600063152a902d60e11b6001600160e01b0319831614806106cb57506106cb8261225c565b92915050565b601081815481106106e157600080fd5b600091825260209091206003909102018054600182015460029092015490925083565b60606001805461071390613e7f565b80601f016020809104026020016040519081016040528092919081815260200182805461073f90613e7f565b801561078c5780601f106107615761010080835404028352916020019161078c565b820191906000526020600020905b81548152906001019060200180831161076f57829003601f168201915b5050505050905090565b6000818152600360205260408120546001600160a01b03166108145760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084015b60405180910390fd5b506000908152600560205260409020546001600160a01b031690565b600061083b82610ca8565b9050806001600160a01b0316836001600160a01b031614156108a95760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b606482015260840161080b565b336001600160a01b03821614806108c557506108c58133610665565b6109375760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c0000000000000000606482015260840161080b565b6109418383612281565b505050565b61095033826122ef565b61096c5760405162461bcd60e51b815260040161080b90613d6f565b6109418383836123e6565b60125460115460009182916001600160a01b03909116906103e89061099c9086613e1d565b6109a69190613e09565b915091509250929050565b60006109bc83610d1f565b8210610a1e5760405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201526a74206f6620626f756e647360a81b606482015260840161080b565b506001600160a01b03919091166000908152600760209081526040808320938352929052205490565b60007f0000000000000000000000000000000000000000000000000000000000000000461415610a9657507f000000000000000000000000000000000000000000000000000000000000000090565b604080517f000000000000000000000000000000000000000000000000000000000000000060208201527f0000000000000000000000000000000000000000000000000000000000000000918101919091527f000000000000000000000000000000000000000000000000000000000000000060608201524660808201523060a082015260c00160405160208183030381529060405280519060200120905090565b61094183838360405180602001604052806000815250611fdd565b6000610b5e60105490565b8210610ba35760405162461bcd60e51b815260206004820152601460248201527309ac2d2c8e6744092dcecc2d8d2c840d2dcc8caf60631b604482015260640161080b565b5090565b33610bb182610ca8565b6001600160a01b031614610bd75760405162461bcd60e51b815260040161080b90613c91565b610c2960108281548110610bed57610bed613f15565b90600052602060002090600302016001015460108381548110610c1257610c12613f15565b906000526020600020906003020160020154612591565b60108281548110610c3c57610c3c613f15565b90600052602060002090600302016002018190555050565b60006106cb60108381548110610c6c57610c6c613f15565b90600052602060002090600302016001015460108481548110610c9157610c91613f15565b906000526020600020906003020160020154612737565b6000818152600360205260408120546001600160a01b0316806106cb5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b606482015260840161080b565b60006001600160a01b038216610d8a5760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b606482015260840161080b565b506001600160a01b031660009081526004602052604090205490565b6000546001600160a01b03163314610dd05760405162461bcd60e51b815260040161080b90613d3a565b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b6000546001600160a01b03163314610e445760405162461bcd60e51b815260040161080b90613d3a565b818114610e935760405162461bcd60e51b815260206004820152601960248201527f4d616964733a20496e76616c696420706172616d657465727300000000000000604482015260640161080b565b60105460005b82811015610f305760106040518060600160405280878785818110610ec057610ec0613f15565b602090810292909201358352506000828201819052604092830181905284546001818101875595825290829020845160039092020190815590830151938101939093550151600290910155610f1e33610f198484613df1565b6128d1565b610f29600182613df1565b9050610e99565b5050505050565b60405163d505accf60e01b8152336004820152306024820152604481018690526064810185905260ff8416608482015260a4810183905260c481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063d505accf9060e401600060405180830381600087803b158015610fc357600080fd5b505af1158015610fd7573d6000803e3d6000fd5b50505050610fe58686611305565b505050505050565b60008060006010848154811061100557611005613f15565b90600052602060002090600302019050806000015481600101549250925050915091565b834211156110735760405162461bcd60e51b81526020600482015260176024820152764d616964733a204578706972656420646561646c696e6560481b604482015260640161080b565b600061107d610a47565b6000878152600e60208181526040808420805482517f49ecf333e5b8c95c40fdafc95c1ad136e8914a8fb55e9dc8bb01eaa83a2df9ad818601526001600160a01b038f1681850152606081018e90526080810182905260a08082018e90528451808303909101815260c08201855280519086012061190160f01b60e083015260e2820189905261010280830191909152845180830390910181526101229091019093528251928401929092208c865293909252939450909260019290611144908490613df1565b909155506000905061115588610ca8565b9050806001600160a01b0316896001600160a01b031614156111b25760405162461bcd60e51b815260206004820152601660248201527526b0b4b2399d1024b73b30b634b21039b832b73232b960511b604482015260640161080b565b803b1561129e57604080516020810187905280820186905260f888901b6001600160f81b0319166060820152815160418183030181526061820192839052630b135d3f60e11b9092526001600160a01b03831691631626ba7e9161121a918691606501613c65565b60206040518083038186803b15801561123257600080fd5b505afa158015611246573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061126a9190613a71565b6001600160e01b031916631626ba7e60e01b146112995760405162461bcd60e51b815260040161080b90613d0d565b6112e1565b60006112ac83888888612a1f565b9050816001600160a01b0316816001600160a01b0316146112df5760405162461bcd60e51b815260040161080b90613d0d565b505b6112eb8989612281565b505050505050505050565b60606002805461071390613e7f565b3361130f83610ca8565b6001600160a01b0316146113355760405162461bcd60e51b815260040161080b90613c91565b600081116113855760405162461bcd60e51b815260206004820152601c60248201527f4d616964733a20496e76616c6964206c70546f6b656e416d6f756e7400000000604482015260640161080b565b60006010838154811061139a5761139a613f15565b906000526020600020906003020160010154905081816113ba9190613df1565b601084815481106113cd576113cd613f15565b60009182526020909120600390910201600101556040516323b872dd60e01b8152336004820152306024820152604481018390527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906323b872dd90606401602060405180830381600087803b15801561144f57600080fd5b505af1158015611463573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114879190613a37565b50600a5480156114ea576114c1818484601088815481106114aa576114aa613f15565b906000526020600020906003020160020154612bc8565b601085815481106114d4576114d4613f15565b9060005260206000209060030201600201819055505b837f9c86c947c690753cc6de6016e1c45414d895662cc13af08319148419baf5df2f8460405161151c91815260200190565b60405180910390a250505050565b600080546001600160a01b031633146115555760405162461bcd60e51b815260040161080b90613d3a565b506010546103e881106115a15760405162461bcd60e51b81526020600482015260146024820152734d616964733a204d6178696d756d204d6169647360601b604482015260640161080b565b6040805160608101825283815260006020820181815292820181815260108054600181018255925291517f1b6847dc741a1b0cd08d278845f9d819d87b734759afb55fe2de5cb82a9ae67260039092029182015591517f1b6847dc741a1b0cd08d278845f9d819d87b734759afb55fe2de5cb82a9ae673830155517f1b6847dc741a1b0cd08d278845f9d819d87b734759afb55fe2de5cb82a9ae6749091015561164b33826128d1565b919050565b61165b338383612cd0565b5050565b3361166983610ca8565b6001600160a01b03161461168f5760405162461bcd60e51b815260040161080b90613c91565b600081116116df5760405162461bcd60e51b815260206004820152601c60248201527f4d616964733a20496e76616c6964206c70546f6b656e416d6f756e7400000000604482015260640161080b565b6000601083815481106116f4576116f4613f15565b906000526020600020906003020160010154905081816117149190613e3c565b6010848154811061172757611727613f15565b6000918252602090912060016003909202010155600a54801561179d576117748184846010888154811061175d5761175d613f15565b906000526020600020906003020160020154612d9f565b6010858154811061178757611787613f15565b9060005260206000209060030201600201819055505b60405163a9059cbb60e01b8152336004820152602481018490527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063a9059cbb90604401602060405180830381600087803b15801561180557600080fd5b505af1158015611819573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061183d9190613a37565b50837fb08330c00f69f3f2343fd81719784be16358c64832e868cd5ccec5b98ec628978460405161151c91815260200190565b6000546001600160a01b0316331461189a5760405162461bcd60e51b815260040161080b90613d3a565b604051631526fe2760e01b8152600481018290526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081169190841690631526fe279060240160806040518083038186803b1580156118ff57600080fd5b505afa158015611913573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119379190613a8e565b516001600160a01b03161461198e5760405162461bcd60e51b815260206004820152601d60248201527f4d6173746572436865664d6f64756c653a20496e76616c696420706964000000604482015260640161080b565b600d5460ff16611b0d57600d805460ff1916600117905560405163095ea7b360e01b81526001600160a01b03838116600483015260001960248301527f0000000000000000000000000000000000000000000000000000000000000000169063095ea7b390604401602060405180830381600087803b158015611a1057600080fd5b505af1158015611a24573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a489190613a37565b50600980546001600160a01b0319166001600160a01b0384811691909117909155600a8290556040516370a0823160e01b81523060048201526109419183917f0000000000000000000000000000000000000000000000000000000000000000909116906370a08231906024015b60206040518083038186803b158015611ace57600080fd5b505afa158015611ae2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b069190613b65565b6000612e87565b600954600a546040516393f1a40b60e01b8152600481018290523060248201526001600160a01b0390921691611ba190829084906393f1a40b90604401604080518083038186803b158015611b6157600080fd5b505afa158015611b75573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b999190613afd565b516000612e96565b50816001600160a01b0316846001600160a01b031614611d035760405163095ea7b360e01b81526001600160a01b038381166004830152600060248301527f0000000000000000000000000000000000000000000000000000000000000000169063095ea7b390604401602060405180830381600087803b158015611c2557600080fd5b505af1158015611c39573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c5d9190613a37565b5060405163095ea7b360e01b81526001600160a01b03858116600483015260001960248301527f0000000000000000000000000000000000000000000000000000000000000000169063095ea7b390604401602060405180830381600087803b158015611cc957600080fd5b505af1158015611cdd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d019190613a37565b505b600980546001600160a01b0319166001600160a01b0386811691909117909155600a8490556040516370a0823160e01b8152306004820152610f309185917f0000000000000000000000000000000000000000000000000000000000000000909116906370a0823190602401611ab6565b83421115611dbe5760405162461bcd60e51b81526020600482015260176024820152764d616964733a204578706972656420646561646c696e6560481b604482015260640161080b565b6000611dc8610a47565b6001600160a01b038881166000818152600f60208181526040808420805482517fdaab21af31ece73a508939fedd476a5ee5129a5ed4bb091f3236ffb45394df6281860152808401889052978f1660608901526080880181905260a08089018f90528351808a03909101815260c08901845280519085012061190160f01b60e08a015260e289018a9052610102808a01919091528351808a03909101815261012290980190925286519683019690962094845291905293945090926001929190611e93908490613df1565b9091555050873b15611f8457604080516020810186905280820185905260f887901b6001600160f81b0319166060820152815160418183030181526061820192839052630b135d3f60e11b9092526001600160a01b038a1691631626ba7e91611f00918591606501613c65565b60206040518083038186803b158015611f1857600080fd5b505afa158015611f2c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f509190613a71565b6001600160e01b031916631626ba7e60e01b14611f7f5760405162461bcd60e51b815260040161080b90613d0d565b611fc7565b6000611f9282878787612a1f565b9050886001600160a01b0316816001600160a01b031614611fc55760405162461bcd60e51b815260040161080b90613d0d565b505b611fd388886001612cd0565b5050505050505050565b611fe733836122ef565b6120035760405162461bcd60e51b815260040161080b90613d6f565b61200f84848484612ea5565b50505050565b6000818152600360205260409020546060906001600160a01b03166120945760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201526e3732bc34b9ba32b73a103a37b5b2b760891b606482015260840161080b565b60006120d060408051808201909152601f81527f68747470733a2f2f6170692e6d616964636f696e2e6f72672f6d616964732f00602082015290565b905060008151116120f0576040518060200160405280600081525061211b565b806120fa84612ed8565b60405160200161210b929190613c03565b6040516020818303038152906040525b9392505050565b6000546001600160a01b0316331461214c5760405162461bcd60e51b815260040161080b90613d3a565b601280546001600160a01b0319166001600160a01b039390931692909217909155601155565b6000546001600160a01b0316331461219c5760405162461bcd60e51b815260040161080b90613d3a565b6001600160a01b0381166122015760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161080b565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b60006001600160e01b0319821663780e9d6360e01b14806106cb57506106cb82612fd6565b600081815260056020526040902080546001600160a01b0319166001600160a01b03841690811790915581906122b682610ca8565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000818152600360205260408120546001600160a01b03166123685760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b606482015260840161080b565b600061237383610ca8565b9050806001600160a01b0316846001600160a01b031614806123ae5750836001600160a01b03166123a384610796565b6001600160a01b0316145b806123de57506001600160a01b0380821660009081526006602090815260408083209388168352929052205460ff165b949350505050565b826001600160a01b03166123f982610ca8565b6001600160a01b0316146124615760405162461bcd60e51b815260206004820152602960248201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960448201526839903737ba1037bbb760b91b606482015260840161080b565b6001600160a01b0382166124c35760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b606482015260840161080b565b6124ce838383613026565b6124d9600082612281565b6001600160a01b0383166000908152600460205260408120805460019290612502908490613e3c565b90915550506001600160a01b0382166000908152600460205260408120805460019290612530908490613df1565b909155505060008181526003602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b600a54600090806125e45760405162461bcd60e51b815260206004820152601d60248201527f4d6173746572436865664d6f64756c653a20556e636c61696d61626c65000000604482015260640161080b565b6009546040516393f1a40b60e01b8152600481018390523060248201526000916001600160a01b0316906393f1a40b90604401604080518083038186803b15801561262e57600080fd5b505afa158015612642573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126669190613afd565b5190506000612676838284612e87565b9050600085670de0b6b3a764000061268e848a613e1d565b6126989190613e09565b6126a29190613e3c565b9050600081116127055760405162461bcd60e51b815260206004820152602860248201527f4d6173746572436865664d6f64756c653a204e6f7468696e672063616e2062656044820152670818db185a5b595960c21b606482015260840161080b565b61270f3382613031565b670de0b6b3a76400006127228389613e1d565b61272c9190613e09565b979650505050505050565b600a546000908061274c5760009150506106cb565b6009546040516393f1a40b60e01b8152600481018390523060248201526000916001600160a01b0316906393f1a40b90604401604080518083038186803b15801561279657600080fd5b505afa1580156127aa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127ce9190613afd565b51600c54600b5491925090431180156127e657508115155b1561289f57600954600a5460405163065509bb60e21b815260048101919091523060248201526000916001600160a01b03169063195426ec9060440160206040518083038186803b15801561283a57600080fd5b505afa15801561284e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128729190613b65565b90508261288782670de0b6b3a7640000613e1d565b6128919190613e09565b61289b9083613df1565b9150505b84670de0b6b3a76400006128b38389613e1d565b6128bd9190613e09565b6128c79190613e3c565b9695505050505050565b6001600160a01b0382166129275760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f2061646472657373604482015260640161080b565b6000818152600360205260409020546001600160a01b03161561298c5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000604482015260640161080b565b61299860008383613026565b6001600160a01b03821660009081526004602052604081208054600192906129c1908490613df1565b909155505060008181526003602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b60007f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0821115612a9c5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b606482015260840161080b565b8360ff16601b1480612ab157508360ff16601c145b612b085760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b606482015260840161080b565b6040805160008082526020820180845288905260ff871692820192909252606081018590526080810184905260019060a0016020604051602081039080840390855afa158015612b5c573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116612bbf5760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e61747572650000000000000000604482015260640161080b565b95945050505050565b6009546040516393f1a40b60e01b81526004810186905230602482015260009182916001600160a01b03909116906393f1a40b90604401604080518083038186803b158015612c1657600080fd5b505afa158015612c2a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c4e9190613afd565b5190506000612c5e878784612e87565b9050600084670de0b6b3a7640000612c768489613e1d565b612c809190613e09565b612c8a9190613e3c565b90508015612c9c57612c9c3382613031565b670de0b6b3a764000082612cb08989613df1565b612cba9190613e1d565b612cc49190613e09565b98975050505050505050565b816001600160a01b0316836001600160a01b03161415612d325760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c657200000000000000604482015260640161080b565b6001600160a01b03838116600081815260066020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6009546040516393f1a40b60e01b81526004810186905230602482015260009182916001600160a01b03909116906393f1a40b90604401604080518083038186803b158015612ded57600080fd5b505afa158015612e01573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e259190613afd565b5190506000612e35878784612e96565b9050600084670de0b6b3a7640000612e4d8489613e1d565b612e579190613e09565b612e619190613e3c565b90508015612e7357612e733382613031565b670de0b6b3a764000082612cb08989613e3c565b60006123de60018585856131cd565b60006123de60008585856131cd565b612eb08484846123e6565b612ebc84848484613528565b61200f5760405162461bcd60e51b815260040161080b90613cbb565b606081612efc5750506040805180820190915260018152600360fc1b602082015290565b8160005b8115612f265780612f1081613eba565b9150612f1f9050600a83613e09565b9150612f00565b60008167ffffffffffffffff811115612f4157612f41613f2b565b6040519080825280601f01601f191660200182016040528015612f6b576020820181803683370190505b5090505b84156123de57612f80600183613e3c565b9150612f8d600a86613ed5565b612f98906030613df1565b60f81b818381518110612fad57612fad613f15565b60200101906001600160f81b031916908160001a905350612fcf600a86613e09565b9450612f6f565b60006001600160e01b031982166380ac58cd60e01b148061300757506001600160e01b03198216635b5e139f60e01b145b806106cb57506301ffc9a760e01b6001600160e01b03198316146106cb565b610941838383613632565b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b15801561309357600080fd5b505afa1580156130a7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130cb9190613b65565b9050808211156131785760405163a9059cbb60e01b81526001600160a01b038481166004830152602482018390527f0000000000000000000000000000000000000000000000000000000000000000169063a9059cbb906044015b602060405180830381600087803b15801561314057600080fd5b505af1158015613154573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061200f9190613a37565b60405163a9059cbb60e01b81526001600160a01b038481166004830152602482018490527f0000000000000000000000000000000000000000000000000000000000000000169063a9059cbb90604401613126565b600080600b5443116132b957851561324957600954604051631c57762b60e31b815260048101879052602481018690526001600160a01b039091169063e2bbb15890604401600060405180830381600087803b15801561322c57600080fd5b505af1158015613240573d6000803e3d6000fd5b505050506132af565b600954604051630441a3e760e41b815260048101879052602481018690526001600160a01b039091169063441a3e7090604401600060405180830381600087803b15801561329657600080fd5b505af11580156132aa573d6000803e3d6000fd5b505050505b5050600c546123de565b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b15801561331b57600080fd5b505afa15801561332f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133539190613b65565b905086156133c557600954604051631c57762b60e31b815260048101889052602481018790526001600160a01b039091169063e2bbb15890604401600060405180830381600087803b1580156133a857600080fd5b505af11580156133bc573d6000803e3d6000fd5b5050505061342b565b600954604051630441a3e760e41b815260048101889052602481018790526001600160a01b039091169063441a3e7090604401600060405180830381600087803b15801561341257600080fd5b505af1158015613426573d6000803e3d6000fd5b505050505b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b15801561348d57600080fd5b505afa1580156134a1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134c59190613b65565b90506134d18282613e3c565b9250505043600b5582158015906134e85750600081115b156132af5760008361350283670de0b6b3a7640000613e1d565b61350c9190613e09565b600c546135199190613df1565b600c81905592506123de915050565b60006001600160a01b0384163b1561362a57604051630a85bd0160e11b81526001600160a01b0385169063150b7a029061356c903390899088908890600401613c32565b602060405180830381600087803b15801561358657600080fd5b505af19250505080156135b6575060408051601f3d908101601f191682019092526135b391810190613a71565b60015b613610573d8080156135e4576040519150601f19603f3d011682016040523d82523d6000602084013e6135e9565b606091505b5080516136085760405162461bcd60e51b815260040161080b90613cbb565b805181602001fd5b6001600160e01b031916630a85bd0160e11b1490506123de565b5060016123de565b6001600160a01b03831661364a576109418282613672565b6001600160a01b0382166136625761094183826136b6565b61366c83826136b6565b61094182825b600061367d83610d1f565b6001600160a01b039093166000908152600760209081526040808320868452825280832085905593825260089052919091209190915550565b600060016136c384610d1f565b6136cd9190613e3c565b600083815260086020526040902054909150808214613720576001600160a01b03841660009081526007602090815260408083208584528252808320548484528184208190558352600890915290208190555b5060009182526008602090815260408084208490556001600160a01b039094168352600781528383209183525290812055565b803560ff8116811461164b57600080fd5b60006020828403121561377657600080fd5b813561211b81613f41565b6000806040838503121561379457600080fd5b823561379f81613f41565b915060208301356137af81613f41565b809150509250929050565b6000806000606084860312156137cf57600080fd5b83356137da81613f41565b925060208401356137ea81613f41565b929592945050506040919091013590565b6000806000806080858703121561381157600080fd5b843561381c81613f41565b935060208581013561382d81613f41565b935060408601359250606086013567ffffffffffffffff8082111561385157600080fd5b818801915088601f83011261386557600080fd5b81358181111561387757613877613f2b565b613889601f8201601f19168501613dc0565b9150808252898482850101111561389f57600080fd5b808484018584013760008482840101525080935050505092959194509250565b60008060008060008060c087890312156138d857600080fd5b86356138e381613f41565b955060208701356138f381613f41565b94506040870135935061390860608801613753565b92506080870135915060a087013590509295509295509295565b6000806040838503121561393557600080fd5b823561394081613f41565b915060208301356137af81613f59565b6000806040838503121561396357600080fd5b823561396e81613f41565b946020939093013593505050565b60008060008060008060c0878903121561399557600080fd5b86356139a081613f41565b9550602087013594506040870135935061390860608801613753565b6000806000604084860312156139d157600080fd5b833567ffffffffffffffff808211156139e957600080fd5b818601915086601f8301126139fd57600080fd5b813581811115613a0c57600080fd5b8760208260051b8501011115613a2157600080fd5b6020928301989097509590910135949350505050565b600060208284031215613a4957600080fd5b815161211b81613f59565b600060208284031215613a6657600080fd5b813561211b81613f67565b600060208284031215613a8357600080fd5b815161211b81613f67565b600060808284031215613aa057600080fd5b6040516080810181811067ffffffffffffffff82111715613ac357613ac3613f2b565b6040528251613ad181613f41565b808252506020830151602082015260408301516040820152606083015160608201528091505092915050565b600060408284031215613b0f57600080fd5b6040516040810181811067ffffffffffffffff82111715613b3257613b32613f2b565b604052825181526020928301519281019290925250919050565b600060208284031215613b5e57600080fd5b5035919050565b600060208284031215613b7757600080fd5b5051919050565b60008060408385031215613b9157600080fd5b50508035926020909101359150565b60008060008060008060c08789031215613bb957600080fd5b86359550602087013594506040870135935061390860608801613753565b60008151808452613bef816020860160208601613e53565b601f01601f19169290920160200192915050565b60008351613c15818460208801613e53565b835190830190613c29818360208801613e53565b01949350505050565b6001600160a01b03858116825284166020820152604081018390526080606082018190526000906128c790830184613bd7565b8281526040602082015260006123de6040830184613bd7565b60208152600061211b6020830184613bd7565b60208082526010908201526f26b0b4b2399d102337b93134b23232b760811b604082015260600190565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b60208082526013908201527213585a591cce88155b985d5d1a1bdc9a5e9959606a1b604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b604051601f8201601f1916810167ffffffffffffffff81118282101715613de957613de9613f2b565b604052919050565b60008219821115613e0457613e04613ee9565b500190565b600082613e1857613e18613eff565b500490565b6000816000190483118215151615613e3757613e37613ee9565b500290565b600082821015613e4e57613e4e613ee9565b500390565b60005b83811015613e6e578181015183820152602001613e56565b8381111561200f5750506000910152565b600181811c90821680613e9357607f821691505b60208210811415613eb457634e487b7160e01b600052602260045260246000fd5b50919050565b6000600019821415613ece57613ece613ee9565b5060010190565b600082613ee457613ee4613eff565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114613f5657600080fd5b50565b8015158114613f5657600080fd5b6001600160e01b031981168114613f5657600080fdfea264697066735822122096677c344df5e19317b71160364700249d5cad4fe795255f1753f83fd3cf1d2864736f6c63430008050033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenOfOwnerByIndex(address,uint256)": {
        "details": "See {IERC721Enumerable-tokenOfOwnerByIndex}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/Maids.sol:Maids",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 12317,
        "contract": "contracts/Maids.sol:Maids",
        "label": "_name",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 12319,
        "contract": "contracts/Maids.sol:Maids",
        "label": "_symbol",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 12323,
        "contract": "contracts/Maids.sol:Maids",
        "label": "_owners",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 12327,
        "contract": "contracts/Maids.sol:Maids",
        "label": "_balances",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 12331,
        "contract": "contracts/Maids.sol:Maids",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 12337,
        "contract": "contracts/Maids.sol:Maids",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 13138,
        "contract": "contracts/Maids.sol:Maids",
        "label": "_ownedTokens",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 13142,
        "contract": "contracts/Maids.sol:Maids",
        "label": "_ownedTokensIndex",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 13508,
        "contract": "contracts/Maids.sol:Maids",
        "label": "sushiMasterChef",
        "offset": 0,
        "slot": "9",
        "type": "t_contract(IMasterChef)9813"
      },
      {
        "astId": 13511,
        "contract": "contracts/Maids.sol:Maids",
        "label": "masterChefPid",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 13514,
        "contract": "contracts/Maids.sol:Maids",
        "label": "sushiLastRewardBlock",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 13517,
        "contract": "contracts/Maids.sol:Maids",
        "label": "accSushiPerShare",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 13519,
        "contract": "contracts/Maids.sol:Maids",
        "label": "initialDeposited",
        "offset": 0,
        "slot": "13",
        "type": "t_bool"
      },
      {
        "astId": 4690,
        "contract": "contracts/Maids.sol:Maids",
        "label": "nonces",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 4695,
        "contract": "contracts/Maids.sol:Maids",
        "label": "noncesForAll",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 4700,
        "contract": "contracts/Maids.sol:Maids",
        "label": "maids",
        "offset": 0,
        "slot": "16",
        "type": "t_array(t_struct(MaidInfo)4663_storage)dyn_storage"
      },
      {
        "astId": 4703,
        "contract": "contracts/Maids.sol:Maids",
        "label": "royaltyFee",
        "offset": 0,
        "slot": "17",
        "type": "t_uint256"
      },
      {
        "astId": 4705,
        "contract": "contracts/Maids.sol:Maids",
        "label": "royaltyReceiver",
        "offset": 0,
        "slot": "18",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(MaidInfo)4663_storage)dyn_storage": {
        "base": "t_struct(MaidInfo)4663_storage",
        "encoding": "dynamic_array",
        "label": "struct Maids.MaidInfo[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IMasterChef)9813": {
        "encoding": "inplace",
        "label": "contract IMasterChef",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(MaidInfo)4663_storage": {
        "encoding": "inplace",
        "label": "struct Maids.MaidInfo",
        "members": [
          {
            "astId": 4658,
            "contract": "contracts/Maids.sol:Maids",
            "label": "originPower",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 4660,
            "contract": "contracts/Maids.sol:Maids",
            "label": "supportedLPTokenAmount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 4662,
            "contract": "contracts/Maids.sol:Maids",
            "label": "sushiRewardDebt",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}