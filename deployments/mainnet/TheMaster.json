{
  "address": "0xCD9E5C7969A4C0B4FA8726B243143381f4984337",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_initialRewardPerBlock",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_decreasingInterval",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_startBlock",
          "type": "uint256"
        },
        {
          "internalType": "contract IMaidCoin",
          "name": "_maidCoin",
          "type": "address"
        },
        {
          "internalType": "contract IUniswapV2Pair",
          "name": "_lpToken",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "_sushi",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "addr",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bool",
          "name": "delegate",
          "type": "bool"
        },
        {
          "indexed": true,
          "internalType": "bool",
          "name": "mintable",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "supportable",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "supportingRatio",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "allocPoint",
          "type": "uint256"
        }
      ],
      "name": "Add",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "ChangeRewardCalculator",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "userId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "supporter",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Desupport",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "EmergencyDesupport",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "EmergencyWithdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "allocPoint",
          "type": "uint256"
        }
      ],
      "name": "Set",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "bool",
          "name": "status",
          "type": "bool"
        }
      ],
      "name": "SetIsSupporterPool",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "supporter",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Support",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "userId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "accSushiPerShare",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "delegate",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "mintable",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "supportable",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "supportingRatio",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "allocPoint",
          "type": "uint256"
        }
      ],
      "name": "add",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "changeRewardCalculator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        }
      ],
      "name": "claimAllReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        }
      ],
      "name": "claimSushiReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decreasingInterval",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "userId",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "userId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "depositWithPermit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "userId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "depositWithPermitMax",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "desupport",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        }
      ],
      "name": "emergencyDesupport",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        }
      ],
      "name": "emergencyWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialRewardPerBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lpToken",
      "outputs": [
        {
          "internalType": "contract IUniswapV2Pair",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maidCoin",
      "outputs": [
        {
          "internalType": "contract IMaidCoin",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "masterChefPid",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "mintableByAddr",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "userId",
          "type": "uint256"
        }
      ],
      "name": "pendingReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        }
      ],
      "name": "pendingSushiReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "poolInfo",
      "outputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "delegate",
          "type": "bool"
        },
        {
          "internalType": "contract ISupportable",
          "name": "supportable",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "supportingRatio",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "allocPoint",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastRewardBlock",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "accRewardPerShare",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "supply",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardCalculator",
      "outputs": [
        {
          "internalType": "contract IRewardCalculator",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardPerBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "pids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "allocPoints",
          "type": "uint256[]"
        }
      ],
      "name": "set",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IMasterChef",
          "name": "_masterChef",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        }
      ],
      "name": "setSushiMasterChef",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "startBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "supportTo",
          "type": "uint256"
        }
      ],
      "name": "support",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "supportTo",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "supportWithPermit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "supportTo",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "supportWithPermitMax",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sushi",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sushiLastRewardBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sushiMasterChef",
      "outputs": [
        {
          "internalType": "contract IMasterChef",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalAllocPoint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "userInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rewardDebt",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "userId",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xa6e9c002213f0c7d5eb84bea7c48e76ca0000787f3bf25c70687f833007fc171",
  "receipt": {
    "to": null,
    "from": "0x77466365e1be100f8E1Ac907AfE4151Ea21c528E",
    "contractAddress": "0xCD9E5C7969A4C0B4FA8726B243143381f4984337",
    "transactionIndex": 282,
    "gasUsed": "3793135",
    "logsBloom": "0x
    "blockHash": "0x5a2cc09bff2dc91b7724264e14c94c05b9173e94aa7147c7cae95d87bdf88983",
    "transactionHash": "0xa6e9c002213f0c7d5eb84bea7c48e76ca0000787f3bf25c70687f833007fc171",
    "logs": [
      {
        "transactionIndex": 282,
        "blockNumber": 13289038,
        "transactionHash": "0xa6e9c002213f0c7d5eb84bea7c48e76ca0000787f3bf25c70687f833007fc171",
        "address": "0xCD9E5C7969A4C0B4FA8726B243143381f4984337",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000077466365e1be100f8e1ac907afe4151ea21c528e"
        ],
        "data": "0x",
        "logIndex": 287,
        "blockHash": "0x5a2cc09bff2dc91b7724264e14c94c05b9173e94aa7147c7cae95d87bdf88983"
      }
    ],
    "blockNumber": 13289038,
    "cumulativeGasUsed": "20091230",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "1000000000000000000",
    525600,
    13316000,
    "0x4Af698B479D0098229DC715655c667Ceb6cd8433",
    "0xc7175038323562cB68E4BbdD379E9fE65134937f",
    "0x6B3595068778DD592e39A122f4f5a5cF09C90fE2"
  ],
  "solcInputHash": "a8024d08cac240e1437225c8fb245dbd",
  "metadata": "{\"compiler\":{\"version\":\"0.8.5+commit.a4f2e591\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_initialRewardPerBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_decreasingInterval\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startBlock\",\"type\":\"uint256\"},{\"internalType\":\"contract IMaidCoin\",\"name\":\"_maidCoin\",\"type\":\"address\"},{\"internalType\":\"contract IUniswapV2Pair\",\"name\":\"_lpToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_sushi\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"delegate\",\"type\":\"bool\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"mintable\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"supportable\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"supportingRatio\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"}],\"name\":\"Add\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"ChangeRewardCalculator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"userId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"supporter\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Desupport\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyDesupport\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"}],\"name\":\"Set\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"SetIsSupporterPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"supporter\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Support\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"userId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"accSushiPerShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"delegate\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"mintable\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"supportable\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"supportingRatio\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"}],\"name\":\"add\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"changeRewardCalculator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"}],\"name\":\"claimAllReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"}],\"name\":\"claimSushiReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decreasingInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userId\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"depositWithPermit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"depositWithPermitMax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"desupport\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"}],\"name\":\"emergencyDesupport\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialRewardPerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpToken\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Pair\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maidCoin\",\"outputs\":[{\"internalType\":\"contract IMaidCoin\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"masterChefPid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"mintableByAddr\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userId\",\"type\":\"uint256\"}],\"name\":\"pendingReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"}],\"name\":\"pendingSushiReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"delegate\",\"type\":\"bool\"},{\"internalType\":\"contract ISupportable\",\"name\":\"supportable\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"supportingRatio\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accRewardPerShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"supply\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardCalculator\",\"outputs\":[{\"internalType\":\"contract IRewardCalculator\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"pids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"allocPoints\",\"type\":\"uint256[]\"}],\"name\":\"set\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IMasterChef\",\"name\":\"_masterChef\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"setSushiMasterChef\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"supportTo\",\"type\":\"uint256\"}],\"name\":\"support\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"supportTo\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"supportWithPermit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"supportTo\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"supportWithPermitMax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sushi\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sushiLastRewardBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sushiMasterChef\",\"outputs\":[{\"internalType\":\"contract IMasterChef\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAllocPoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userId\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/TheMaster.sol\":\"TheMaster\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x1cae4f85f114ff17b90414f5da67365b1d00337abb5bce9bf944eb78a2c0673c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xf8e8d118a7a8b2e134181f7da655f6266aa3a0f9134b2605747139fcb0c5d835\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x99f5c21018d796db7833a2100bb0e7411999e248a3c950fb526eee5d2bf47cb7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x069b2631bb5b5193a58ccf7a06266c7361bd2c20095667af4402817605627f45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xf930d2df426bfcfc1f7415be724f04081c96f4fb9ec8d0e3a521c07692dface0\",\"license\":\"MIT\"},\"contracts/TheMaster.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.5;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"./uniswapv2/interfaces/IUniswapV2ERC20.sol\\\";\\nimport \\\"./interfaces/ITheMaster.sol\\\";\\nimport \\\"./libraries/MasterChefModule.sol\\\";\\n\\ncontract TheMaster is Ownable, MasterChefModule, ITheMaster {\\n    using SafeERC20 for IERC20;\\n\\n    struct UserInfo {\\n        uint256 amount;\\n        uint256 rewardDebt;\\n    }\\n\\n    struct PoolInfo {\\n        address addr;\\n        bool delegate;\\n        ISupportable supportable;\\n        uint8 supportingRatio; //out of 100\\n        uint256 allocPoint;\\n        uint256 lastRewardBlock;\\n        uint256 accRewardPerShare;\\n        uint256 supply;\\n    }\\n\\n    uint256 private constant PRECISION = 1e20;\\n\\n    uint256 public immutable override initialRewardPerBlock;\\n    uint256 public immutable override decreasingInterval;\\n    uint256 public immutable override startBlock;\\n\\n    IMaidCoin public immutable override maidCoin;\\n    IRewardCalculator public override rewardCalculator;\\n\\n    PoolInfo[] public override poolInfo;\\n    mapping(uint256 => mapping(uint256 => UserInfo)) public override userInfo;\\n    mapping(uint256 => mapping(address => uint256)) private sushiRewardDebt;\\n    mapping(address => bool) public override mintableByAddr;\\n    uint256 public override totalAllocPoint;\\n\\n    constructor(\\n        uint256 _initialRewardPerBlock,\\n        uint256 _decreasingInterval,\\n        uint256 _startBlock,\\n        IMaidCoin _maidCoin,\\n        IUniswapV2Pair _lpToken,\\n        IERC20 _sushi\\n    ) MasterChefModule(_lpToken, _sushi) {\\n        initialRewardPerBlock = _initialRewardPerBlock;\\n        decreasingInterval = _decreasingInterval;\\n        startBlock = _startBlock;\\n        maidCoin = _maidCoin;\\n    }\\n\\n    function poolCount() external view override returns (uint256) {\\n        return poolInfo.length;\\n    }\\n\\n    function pendingReward(uint256 pid, uint256 userId) external view override returns (uint256) {\\n        PoolInfo storage pool = poolInfo[pid];\\n        UserInfo storage user = userInfo[pid][userId];\\n        (uint256 accRewardPerShare, uint256 supply) = (pool.accRewardPerShare, pool.supply);\\n        uint256 _lastRewardBlock = pool.lastRewardBlock;\\n        if (block.number > _lastRewardBlock && supply != 0) {\\n            uint256 reward = ((block.number - _lastRewardBlock) * rewardPerBlock() * pool.allocPoint) / totalAllocPoint;\\n            accRewardPerShare = accRewardPerShare + (reward * PRECISION) / supply;\\n        }\\n        uint256 pending = ((user.amount * accRewardPerShare) / PRECISION) - user.rewardDebt;\\n        uint256 _supportingRatio = pool.supportingRatio;\\n        if (_supportingRatio == 0) {\\n            return pending;\\n        } else {\\n            return pending - ((pending * _supportingRatio) / 100);\\n        }\\n    }\\n\\n    function rewardPerBlock() public view override returns (uint256) {\\n        if (address(rewardCalculator) != address(0)) {\\n            return rewardCalculator.rewardPerBlock();\\n        }\\n        uint256 era = (block.number - startBlock) / decreasingInterval;\\n        return initialRewardPerBlock / (era + 1);\\n    }\\n\\n    function changeRewardCalculator(address addr) external override onlyOwner {\\n        rewardCalculator = IRewardCalculator(addr);\\n        emit ChangeRewardCalculator(addr);\\n    }\\n\\n    function add(\\n        address addr,\\n        bool delegate,\\n        bool mintable,\\n        address supportable,\\n        uint8 supportingRatio,\\n        uint256 allocPoint\\n    ) external override onlyOwner {\\n        if (supportable != address(0)) {\\n            require(supportingRatio > 0 && supportingRatio <= 80, \\\"TheMaster: Outranged supportingRatio\\\");\\n        } else {\\n            require(supportingRatio == 0, \\\"TheMaster: Not supportable pool\\\");\\n        }\\n        massUpdatePools();\\n        uint256 lastRewardBlock = block.number > startBlock ? block.number : startBlock;\\n        totalAllocPoint += allocPoint;\\n        uint256 pid = poolInfo.length;\\n        poolInfo.push(\\n            PoolInfo(addr, delegate, ISupportable(supportable), supportingRatio, allocPoint, lastRewardBlock, 0, 0)\\n        );\\n        if (mintable) {\\n            mintableByAddr[addr] = true;\\n        }\\n        emit Add(pid, addr, delegate, mintableByAddr[addr], supportable, supportingRatio, allocPoint);\\n    }\\n\\n    function set(uint256[] calldata pids, uint256[] calldata allocPoints) external override onlyOwner {\\n        massUpdatePools();\\n        for (uint256 i = 0; i < pids.length; i += 1) {\\n            totalAllocPoint = totalAllocPoint - poolInfo[pids[i]].allocPoint + allocPoints[i];\\n            poolInfo[pids[i]].allocPoint = allocPoints[i];\\n            emit Set(pids[i], allocPoints[i]);\\n        }\\n    }\\n\\n    function updatePool(PoolInfo storage pool) internal {\\n        uint256 _lastRewardBlock = pool.lastRewardBlock;\\n        if (block.number <= _lastRewardBlock) {\\n            return;\\n        }\\n        uint256 supply = pool.supply;\\n        if (supply == 0 || pool.allocPoint == 0) {\\n            pool.lastRewardBlock = block.number;\\n            return;\\n        }\\n        uint256 reward = ((block.number - _lastRewardBlock) * rewardPerBlock() * pool.allocPoint) / totalAllocPoint;\\n        maidCoin.mint(address(this), reward);\\n        pool.accRewardPerShare = pool.accRewardPerShare + (reward * PRECISION) / supply;\\n        pool.lastRewardBlock = block.number;\\n    }\\n\\n    function massUpdatePools() internal {\\n        uint256 length = poolInfo.length;\\n        for (uint256 pid = 0; pid < length; ++pid) {\\n            updatePool(poolInfo[pid]);\\n        }\\n    }\\n\\n    function deposit(\\n        uint256 pid,\\n        uint256 amount,\\n        uint256 userId\\n    ) public override {\\n        PoolInfo storage pool = poolInfo[pid];\\n        require(address(pool.supportable) == address(0), \\\"TheMaster: Use support func\\\");\\n        UserInfo storage user = userInfo[pid][userId];\\n        if (pool.delegate) {\\n            require(pool.addr == msg.sender, \\\"TheMaster: Not called by delegate\\\");\\n            _deposit(pid, pool, user, amount, false);\\n        } else {\\n            require(address(uint160(userId)) == msg.sender, \\\"TheMaster: Deposit to your address\\\");\\n            _deposit(pid, pool, user, amount, true);\\n        }\\n        emit Deposit(userId, pid, amount);\\n    }\\n\\n    function _deposit(\\n        uint256 pid,\\n        PoolInfo storage pool,\\n        UserInfo storage user,\\n        uint256 amount,\\n        bool tokenTransfer\\n    ) internal {\\n        updatePool(pool);\\n        uint256 _accRewardPerShare = pool.accRewardPerShare;\\n        uint256 _amount = user.amount;\\n        if (_amount > 0) {\\n            uint256 pending = ((_amount * _accRewardPerShare) / PRECISION) - user.rewardDebt;\\n            if (pending > 0) safeRewardTransfer(msg.sender, pending);\\n        }\\n        if (amount > 0) {\\n            if (tokenTransfer) {\\n                IERC20(pool.addr).safeTransferFrom(msg.sender, address(this), amount);\\n                uint256 _mcPid = masterChefPid;\\n                if (_mcPid > 0 && pool.addr == address(lpToken)) {\\n                    sushiRewardDebt[pid][msg.sender] = _depositModule(\\n                        _mcPid,\\n                        amount,\\n                        _amount,\\n                        sushiRewardDebt[pid][msg.sender]\\n                    );\\n                }\\n            }\\n            pool.supply += amount;\\n            _amount += amount;\\n            user.amount = _amount;\\n        }\\n        user.rewardDebt = (_amount * _accRewardPerShare) / PRECISION;\\n    }\\n\\n    function depositWithPermit(\\n        uint256 pid,\\n        uint256 amount,\\n        uint256 userId,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external override {\\n        IUniswapV2ERC20(poolInfo[pid].addr).permit(msg.sender, address(this), amount, deadline, v, r, s);\\n        deposit(pid, amount, userId);\\n    }\\n\\n    function depositWithPermitMax(\\n        uint256 pid,\\n        uint256 amount,\\n        uint256 userId,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external override {\\n        IUniswapV2ERC20(poolInfo[pid].addr).permit(msg.sender, address(this), type(uint256).max, deadline, v, r, s);\\n        deposit(pid, amount, userId);\\n    }\\n\\n    function withdraw(\\n        uint256 pid,\\n        uint256 amount,\\n        uint256 userId\\n    ) public override {\\n        PoolInfo storage pool = poolInfo[pid];\\n        require(address(pool.supportable) == address(0), \\\"TheMaster: Use desupport func\\\");\\n        UserInfo storage user = userInfo[pid][userId];\\n        if (pool.delegate) {\\n            require(pool.addr == msg.sender, \\\"TheMaster: Not called by delegate\\\");\\n            _withdraw(pid, pool, user, amount, false);\\n        } else {\\n            require(address(uint160(userId)) == msg.sender, \\\"TheMaster: Not called by user\\\");\\n            _withdraw(pid, pool, user, amount, true);\\n        }\\n        emit Withdraw(userId, pid, amount);\\n    }\\n\\n    function _withdraw(\\n        uint256 pid,\\n        PoolInfo storage pool,\\n        UserInfo storage user,\\n        uint256 amount,\\n        bool tokenTransfer\\n    ) internal {\\n        uint256 _amount = user.amount;\\n        require(_amount >= amount, \\\"TheMaster: Insufficient amount\\\");\\n        updatePool(pool);\\n        uint256 _accRewardPerShare = pool.accRewardPerShare;\\n        uint256 pending = ((_amount * _accRewardPerShare) / PRECISION) - user.rewardDebt;\\n        if (pending > 0) safeRewardTransfer(msg.sender, pending);\\n        if (amount > 0) {\\n            pool.supply -= amount;\\n            _amount -= amount;\\n            user.amount = _amount;\\n            if (tokenTransfer) {\\n                uint256 _mcPid = masterChefPid;\\n                if (_mcPid > 0 && pool.addr == address(lpToken)) {\\n                    sushiRewardDebt[pid][msg.sender] = _withdrawModule(\\n                        _mcPid,\\n                        amount,\\n                        _amount + amount,\\n                        sushiRewardDebt[pid][msg.sender]\\n                    );\\n                }\\n\\n                IERC20(pool.addr).safeTransfer(msg.sender, amount);\\n            }\\n        }\\n        user.rewardDebt = (_amount * _accRewardPerShare) / PRECISION;\\n    }\\n\\n    function emergencyWithdraw(uint256 pid) external override {\\n        PoolInfo storage pool = poolInfo[pid];\\n        require(address(pool.supportable) == address(0), \\\"TheMaster: Use desupport func\\\");\\n        require(!pool.delegate, \\\"TheMaster: Pool should be non-delegate\\\");\\n        UserInfo storage user = userInfo[pid][uint256(uint160(msg.sender))];\\n        uint256 amounts = user.amount;\\n        user.amount = 0;\\n        user.rewardDebt = 0;\\n        pool.supply -= amounts;\\n\\n        uint256 _mcPid = masterChefPid;\\n        if (_mcPid > 0 && pool.addr == address(lpToken)) {\\n            sushiRewardDebt[pid][msg.sender] = _withdrawModule(\\n                _mcPid,\\n                amounts,\\n                amounts,\\n                sushiRewardDebt[pid][msg.sender]\\n            );\\n        }\\n\\n        IERC20(pool.addr).safeTransfer(msg.sender, amounts);\\n        emit EmergencyWithdraw(msg.sender, pid, amounts);\\n    }\\n\\n    function support(\\n        uint256 pid,\\n        uint256 amount,\\n        uint256 supportTo\\n    ) public override {\\n        PoolInfo storage pool = poolInfo[pid];\\n        ISupportable supportable = pool.supportable;\\n        require(address(supportable) != address(0), \\\"TheMaster: Use deposit func\\\");\\n        UserInfo storage user = userInfo[pid][uint256(uint160(msg.sender))];\\n        updatePool(pool);\\n        uint256 _accRewardPerShare = pool.accRewardPerShare;\\n        uint256 _amount = user.amount;\\n        if (_amount > 0) {\\n            uint256 pending = ((_amount * _accRewardPerShare) / PRECISION) - user.rewardDebt;\\n            if (pending > 0) {\\n                (address to, uint256 amounts) = supportable.shareRewards(pending, msg.sender, pool.supportingRatio);\\n                if (amounts > 0) safeRewardTransfer(to, amounts);\\n                safeRewardTransfer(msg.sender, pending - amounts);\\n            }\\n        }\\n        if (amount > 0) {\\n            if (_amount == 0) {\\n                supportable.setSupportingTo(msg.sender, supportTo, amount);\\n            } else {\\n                supportable.changeSupportedPower(msg.sender, int256(amount));\\n            }\\n            IERC20(pool.addr).safeTransferFrom(msg.sender, address(this), amount);\\n\\n            uint256 _mcPid = masterChefPid;\\n            if (_mcPid > 0 && pool.addr == address(lpToken)) {\\n                sushiRewardDebt[pid][msg.sender] = _depositModule(\\n                    _mcPid,\\n                    amount,\\n                    _amount,\\n                    sushiRewardDebt[pid][msg.sender]\\n                );\\n            }\\n\\n            pool.supply += amount;\\n            _amount += amount;\\n            user.amount = _amount;\\n        }\\n        user.rewardDebt = (_amount * _accRewardPerShare) / PRECISION;\\n        emit Support(msg.sender, pid, amount);\\n    }\\n\\n    function supportWithPermit(\\n        uint256 pid,\\n        uint256 amount,\\n        uint256 supportTo,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external override {\\n        IUniswapV2ERC20(poolInfo[pid].addr).permit(msg.sender, address(this), amount, deadline, v, r, s);\\n        support(pid, amount, supportTo);\\n    }\\n\\n    function supportWithPermitMax(\\n        uint256 pid,\\n        uint256 amount,\\n        uint256 supportTo,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external override {\\n        IUniswapV2ERC20(poolInfo[pid].addr).permit(msg.sender, address(this), type(uint256).max, deadline, v, r, s);\\n        support(pid, amount, supportTo);\\n    }\\n\\n    function desupport(uint256 pid, uint256 amount) external override {\\n        PoolInfo storage pool = poolInfo[pid];\\n        ISupportable supportable = pool.supportable;\\n        require(address(supportable) != address(0), \\\"TheMaster: Use withdraw func\\\");\\n        UserInfo storage user = userInfo[pid][uint256(uint160(msg.sender))];\\n        uint256 _amount = user.amount;\\n        require(_amount >= amount, \\\"TheMaster: Insufficient amount\\\");\\n        updatePool(pool);\\n        uint256 _accRewardPerShare = pool.accRewardPerShare;\\n        uint256 pending = ((_amount * _accRewardPerShare) / PRECISION) - user.rewardDebt;\\n        if (pending > 0) {\\n            (address to, uint256 amounts) = supportable.shareRewards(pending, msg.sender, pool.supportingRatio);\\n            if (amounts > 0) safeRewardTransfer(to, amounts);\\n            safeRewardTransfer(msg.sender, pending - amounts);\\n        }\\n        if (amount > 0) {\\n            supportable.changeSupportedPower(msg.sender, -int256(amount));\\n\\n            uint256 _mcPid = masterChefPid;\\n            if (_mcPid > 0 && pool.addr == address(lpToken)) {\\n                sushiRewardDebt[pid][msg.sender] = _withdrawModule(\\n                    _mcPid,\\n                    amount,\\n                    _amount,\\n                    sushiRewardDebt[pid][msg.sender]\\n                );\\n            }\\n\\n            pool.supply -= amount;\\n            _amount -= amount;\\n            user.amount = _amount;\\n            IERC20(pool.addr).safeTransfer(msg.sender, amount);\\n        }\\n        user.rewardDebt = (_amount * _accRewardPerShare) / PRECISION;\\n        emit Desupport(msg.sender, pid, amount);\\n    }\\n\\n    function emergencyDesupport(uint256 pid) external override {\\n        PoolInfo storage pool = poolInfo[pid];\\n        ISupportable supportable = pool.supportable;\\n        require(address(supportable) != address(0), \\\"TheMaster: Use emergencyWithdraw func\\\");\\n        UserInfo storage user = userInfo[pid][uint256(uint160(msg.sender))];\\n        uint256 amounts = user.amount;\\n        user.amount = 0;\\n        user.rewardDebt = 0;\\n        pool.supply -= amounts;\\n        supportable.changeSupportedPower(msg.sender, -int256(amounts));\\n\\n        uint256 _mcPid = masterChefPid;\\n        if (_mcPid > 0 && pool.addr == address(lpToken)) {\\n            sushiRewardDebt[pid][msg.sender] = _withdrawModule(\\n                _mcPid,\\n                amounts,\\n                amounts,\\n                sushiRewardDebt[pid][msg.sender]\\n            );\\n        }\\n\\n        IERC20(pool.addr).safeTransfer(msg.sender, amounts);\\n        emit EmergencyDesupport(msg.sender, pid, amounts);\\n    }\\n\\n    function mint(address to, uint256 amount) external override {\\n        require(mintableByAddr[msg.sender], \\\"TheMaster: Called from un-mintable\\\");\\n        maidCoin.mint(to, amount);\\n    }\\n\\n    function safeRewardTransfer(address to, uint256 amount) internal {\\n        uint256 balance = maidCoin.balanceOf(address(this));\\n        if (amount > balance) {\\n            maidCoin.transfer(to, balance);\\n        } else {\\n            maidCoin.transfer(to, amount);\\n        }\\n    }\\n\\n    function pendingSushiReward(uint256 pid) external view override returns (uint256) {\\n        return\\n            _pendingSushiReward(userInfo[pid][uint256(uint160(msg.sender))].amount, sushiRewardDebt[pid][msg.sender]);\\n    }\\n\\n    function claimSushiReward(uint256 pid) public override {\\n        PoolInfo storage pool = poolInfo[pid];\\n        require(pool.addr == address(lpToken) && !pool.delegate, \\\"TheMaster: Invalid pid\\\");\\n\\n        sushiRewardDebt[pid][msg.sender] = _claimSushiReward(\\n            userInfo[pid][uint256(uint160(msg.sender))].amount,\\n            sushiRewardDebt[pid][msg.sender]\\n        );\\n    }\\n\\n    function claimAllReward(uint256 pid) public {\\n        PoolInfo storage pool = poolInfo[pid];\\n        require(pool.addr == address(lpToken) && !pool.delegate, \\\"TheMaster: Invalid pid\\\");\\n\\n        UserInfo storage user = userInfo[pid][uint256(uint160(msg.sender))];\\n        uint256 amount = user.amount;\\n        require(amount > 0, \\\"TheMaster: Nothing can be claimed\\\");\\n        sushiRewardDebt[pid][msg.sender] = _claimSushiReward(amount, sushiRewardDebt[pid][msg.sender]);\\n\\n        updatePool(pool);\\n        ISupportable supportable = pool.supportable;\\n\\n        if (address(supportable) == address(0)) {\\n            uint256 _accRewardPerShare = pool.accRewardPerShare;\\n            uint256 pending = ((amount * _accRewardPerShare) / PRECISION) - user.rewardDebt;\\n            if (pending > 0) safeRewardTransfer(msg.sender, pending);\\n            user.rewardDebt = (amount * _accRewardPerShare) / PRECISION;\\n        } else {\\n            uint256 _accRewardPerShare = pool.accRewardPerShare;\\n            uint256 pending = ((amount * _accRewardPerShare) / PRECISION) - user.rewardDebt;\\n            if (pending > 0) {\\n                (address to, uint256 amounts) = supportable.shareRewards(pending, msg.sender, pool.supportingRatio);\\n                if (amounts > 0) safeRewardTransfer(to, amounts);\\n                safeRewardTransfer(msg.sender, pending - amounts);\\n            }\\n            user.rewardDebt = (amount * _accRewardPerShare) / PRECISION;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd5bf929d5ec08cddef6a817ef286bfa862dd80f86c4f45758e828786b408c107\",\"license\":\"MIT\"},\"contracts/interfaces/IMaidCoin.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.5.0;\\n\\ninterface IMaidCoin {\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    function name() external pure returns (string memory);\\n\\n    function symbol() external pure returns (string memory);\\n\\n    function decimals() external pure returns (uint8);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function INITIAL_SUPPLY() external pure returns (uint256);\\n\\n    function balanceOf(address owner) external view returns (uint256);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n\\n    function nonces(address owner) external view returns (uint256);\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    function mint(address to, uint256 amount) external;\\n\\n    function burn(uint256 amount) external;\\n}\\n\",\"keccak256\":\"0x284891c8e5e10dfa97d04740857e6ba3958a5eb287172e78b027151bffad3a14\",\"license\":\"MIT\"},\"contracts/interfaces/IMasterChef.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.12;\\npragma experimental ABIEncoderV2;\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IMasterChef {\\n    struct UserInfo {\\n        uint256 amount; // How many LP tokens the user has provided.\\n        uint256 rewardDebt; // Reward debt. See explanation below.\\n    }\\n\\n    struct PoolInfo {\\n        IERC20 lpToken; // Address of LP token contract.\\n        uint256 allocPoint; // How many allocation points assigned to this pool. SUSHI to distribute per block.\\n        uint256 lastRewardBlock; // Last block number that SUSHI distribution occurs.\\n        uint256 accSushiPerShare; // Accumulated SUSHI per share, times 1e12. See below.\\n    }\\n\\n    function poolInfo(uint256 pid) external view returns (IMasterChef.PoolInfo memory);\\n\\n    function userInfo(uint256 pid, address user) external view returns (IMasterChef.UserInfo memory);\\n\\n    function pendingSushi(uint256 _pid, address _user) external view returns (uint256);\\n\\n    function deposit(uint256 _pid, uint256 _amount) external;\\n\\n    function withdraw(uint256 _pid, uint256 _amount) external;\\n}\\n\",\"keccak256\":\"0xf0983f7cb6bb9cdd6ed934f3aba076a84666d55a3ce53e10c2bab2c70224f282\",\"license\":\"MIT\"},\"contracts/interfaces/IMasterChefModule.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.5.0;\\n\\nimport \\\"./IMasterChef.sol\\\";\\nimport \\\"../uniswapv2/interfaces/IUniswapV2Pair.sol\\\";\\n\\ninterface IMasterChefModule {\\n    function lpToken() external view returns (IUniswapV2Pair);\\n\\n    function sushi() external view returns (IERC20);\\n\\n    function sushiMasterChef() external view returns (IMasterChef);\\n\\n    function masterChefPid() external view returns (uint256);\\n\\n    function sushiLastRewardBlock() external view returns (uint256);\\n\\n    function accSushiPerShare() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x2c0111c97d7034bec9ac8917fc05da68a8e3ccee1fc1a0babfc4e1dccf993e2e\",\"license\":\"MIT\"},\"contracts/interfaces/IRewardCalculator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.5.0;\\n\\ninterface IRewardCalculator {\\n    function rewardPerBlock() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x0728d3e4dcd0ec2bb792bdbdefd94a138bab687c46994cbc2cb4f5da96332b99\",\"license\":\"MIT\"},\"contracts/interfaces/ISupportable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.5.0;\\n\\ninterface ISupportable {\\n    event SupportTo(address indexed supporter, uint256 indexed to);\\n    event ChangeSupportingRoute(uint256 indexed from, uint256 indexed to);\\n    event ChangeSupportedPower(uint256 indexed id, int256 power);\\n    event TransferSupportingRewards(address indexed supporter, uint256 indexed id, uint256 amounts);\\n\\n    function supportingRoute(uint256 id) external view returns (uint256);\\n\\n    function supportingTo(address supporter) external view returns (uint256);\\n\\n    function supportedPower(uint256 id) external view returns (uint256);\\n\\n    function totalRewardsFromSupporters(uint256 id) external view returns (uint256);\\n\\n    function setSupportingTo(\\n        address supporter,\\n        uint256 to,\\n        uint256 amounts\\n    ) external;\\n\\n    function checkSupportingRoute(address supporter) external returns (address, uint256);\\n\\n    function changeSupportedPower(address supporter, int256 power) external;\\n\\n    function shareRewards(\\n        uint256 pending,\\n        address supporter,\\n        uint8 supportingRatio\\n    ) external returns (address nurseOwner, uint256 amountToNurseOwner);\\n}\\n\",\"keccak256\":\"0x6eee1f841be8275ed0182e16f6338ef0f111bb5ce1e19aaba6e8955f1bfc3de7\",\"license\":\"MIT\"},\"contracts/interfaces/ITheMaster.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.5.0;\\n\\nimport \\\"./IMaidCoin.sol\\\";\\nimport \\\"./IRewardCalculator.sol\\\";\\nimport \\\"./ISupportable.sol\\\";\\nimport \\\"./IMasterChefModule.sol\\\";\\n\\ninterface ITheMaster is IMasterChefModule {\\n    event ChangeRewardCalculator(address addr);\\n\\n    event Add(\\n        uint256 indexed pid,\\n        address addr,\\n        bool indexed delegate,\\n        bool indexed mintable,\\n        address supportable,\\n        uint8 supportingRatio,\\n        uint256 allocPoint\\n    );\\n\\n    event Set(uint256 indexed pid, uint256 allocPoint);\\n    event Deposit(uint256 indexed userId, uint256 indexed pid, uint256 amount);\\n    event Withdraw(uint256 indexed userId, uint256 indexed pid, uint256 amount);\\n    event EmergencyWithdraw(address indexed user, uint256 indexed pid, uint256 amount);\\n\\n    event Support(address indexed supporter, uint256 indexed pid, uint256 amount);\\n    event Desupport(address indexed supporter, uint256 indexed pid, uint256 amount);\\n    event EmergencyDesupport(address indexed user, uint256 indexed pid, uint256 amount);\\n\\n    event SetIsSupporterPool(uint256 indexed pid, bool indexed status);\\n\\n    function initialRewardPerBlock() external view returns (uint256);\\n\\n    function decreasingInterval() external view returns (uint256);\\n\\n    function startBlock() external view returns (uint256);\\n\\n    function maidCoin() external view returns (IMaidCoin);\\n\\n    function rewardCalculator() external view returns (IRewardCalculator);\\n\\n    function poolInfo(uint256 pid)\\n        external\\n        view\\n        returns (\\n            address addr,\\n            bool delegate,\\n            ISupportable supportable,\\n            uint8 supportingRatio,\\n            uint256 allocPoint,\\n            uint256 lastRewardBlock,\\n            uint256 accRewardPerShare,\\n            uint256 supply\\n        );\\n\\n    function poolCount() external view returns (uint256);\\n\\n    function userInfo(uint256 pid, uint256 user) external view returns (uint256 amount, uint256 rewardDebt);\\n\\n    function mintableByAddr(address addr) external view returns (bool);\\n\\n    function totalAllocPoint() external view returns (uint256);\\n\\n    function pendingReward(uint256 pid, uint256 userId) external view returns (uint256);\\n\\n    function rewardPerBlock() external view returns (uint256);\\n\\n    function changeRewardCalculator(address addr) external;\\n\\n    function add(\\n        address addr,\\n        bool delegate,\\n        bool mintable,\\n        address supportable,\\n        uint8 supportingRatio,\\n        uint256 allocPoint\\n    ) external;\\n\\n    function set(uint256[] calldata pid, uint256[] calldata allocPoint) external;\\n\\n    function deposit(\\n        uint256 pid,\\n        uint256 amount,\\n        uint256 userId\\n    ) external;\\n\\n    function depositWithPermit(\\n        uint256 pid,\\n        uint256 amount,\\n        uint256 userId,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    function depositWithPermitMax(\\n        uint256 pid,\\n        uint256 amount,\\n        uint256 userId,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    function withdraw(\\n        uint256 pid,\\n        uint256 amount,\\n        uint256 userId\\n    ) external;\\n\\n    function emergencyWithdraw(uint256 pid) external;\\n\\n    function support(\\n        uint256 pid,\\n        uint256 amount,\\n        uint256 supportTo\\n    ) external;\\n\\n    function supportWithPermit(\\n        uint256 pid,\\n        uint256 amount,\\n        uint256 supportTo,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    function supportWithPermitMax(\\n        uint256 pid,\\n        uint256 amount,\\n        uint256 supportTo,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    function desupport(uint256 pid, uint256 amount) external;\\n\\n    function emergencyDesupport(uint256 pid) external;\\n\\n    function mint(address to, uint256 amount) external;\\n\\n    function claimSushiReward(uint256 id) external;\\n\\n    function pendingSushiReward(uint256 id) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x4fe6b7d47f4c60c9e3bb7addafea4f0425bf7ec19c219647db98ab81adb0f95b\",\"license\":\"MIT\"},\"contracts/libraries/MasterChefModule.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.5;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"../interfaces/IMasterChefModule.sol\\\";\\n\\nabstract contract MasterChefModule is Ownable, IMasterChefModule {\\n    IUniswapV2Pair public immutable override lpToken;\\n\\n    IERC20 public immutable override sushi;\\n    IMasterChef public override sushiMasterChef;\\n    uint256 public override masterChefPid;\\n    uint256 public override sushiLastRewardBlock;\\n    uint256 public override accSushiPerShare;\\n    bool private initialDeposited;\\n\\n    constructor(IUniswapV2Pair _lpToken, IERC20 _sushi) {\\n        lpToken = _lpToken;\\n        sushi = _sushi;\\n    }\\n\\n    function _depositModule(\\n        uint256 _pid,\\n        uint256 depositAmount,\\n        uint256 supportedLPTokenAmount,\\n        uint256 sushiRewardDebt\\n    ) internal returns (uint256 newRewardDebt) {\\n        uint256 _totalSupportedLPTokenAmount = sushiMasterChef.userInfo(_pid, address(this)).amount;\\n        uint256 _accSushiPerShare = _depositToSushiMasterChef(_pid, depositAmount, _totalSupportedLPTokenAmount);\\n        uint256 pending = (supportedLPTokenAmount * _accSushiPerShare) / 1e18 - sushiRewardDebt;\\n        if (pending > 0) safeSushiTransfer(msg.sender, pending);\\n        return ((supportedLPTokenAmount + depositAmount) * _accSushiPerShare) / 1e18;\\n    }\\n\\n    function _withdrawModule(\\n        uint256 _pid,\\n        uint256 withdrawalAmount,\\n        uint256 supportedLPTokenAmount,\\n        uint256 sushiRewardDebt\\n    ) internal returns (uint256 newRewardDebt) {\\n        uint256 _totalSupportedLPTokenAmount = sushiMasterChef.userInfo(_pid, address(this)).amount;\\n        uint256 _accSushiPerShare = _withdrawFromSushiMasterChef(_pid, withdrawalAmount, _totalSupportedLPTokenAmount);\\n        uint256 pending = (supportedLPTokenAmount * _accSushiPerShare) / 1e18 - sushiRewardDebt;\\n        if (pending > 0) safeSushiTransfer(msg.sender, pending);\\n        return ((supportedLPTokenAmount - withdrawalAmount) * _accSushiPerShare) / 1e18;\\n    }\\n\\n    function _claimSushiReward(uint256 supportedLPTokenAmount, uint256 sushiRewardDebt)\\n        internal\\n        returns (uint256 newRewardDebt)\\n    {\\n        uint256 _pid = masterChefPid;\\n        require(_pid > 0, \\\"MasterChefModule: Unclaimable\\\");\\n\\n        uint256 _totalSupportedLPTokenAmount = sushiMasterChef.userInfo(_pid, address(this)).amount;\\n        uint256 _accSushiPerShare = _depositToSushiMasterChef(_pid, 0, _totalSupportedLPTokenAmount);\\n        uint256 pending = (supportedLPTokenAmount * _accSushiPerShare) / 1e18 - sushiRewardDebt;\\n        require(pending > 0, \\\"MasterChefModule: Nothing can be claimed\\\");\\n        safeSushiTransfer(msg.sender, pending);\\n        return (supportedLPTokenAmount * _accSushiPerShare) / 1e18;\\n    }\\n\\n    function _pendingSushiReward(uint256 supportedLPTokenAmount, uint256 sushiRewardDebt)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        uint256 _pid = masterChefPid;\\n        if (_pid == 0) return 0;\\n        uint256 _totalSupportedLPTokenAmount = sushiMasterChef.userInfo(_pid, address(this)).amount;\\n\\n        uint256 _accSushiPerShare = accSushiPerShare;\\n        if (block.number > sushiLastRewardBlock && _totalSupportedLPTokenAmount != 0) {\\n            uint256 reward = sushiMasterChef.pendingSushi(masterChefPid, address(this));\\n            _accSushiPerShare += ((reward * 1e18) / _totalSupportedLPTokenAmount);\\n        }\\n\\n        return (supportedLPTokenAmount * _accSushiPerShare) / 1e18 - sushiRewardDebt;\\n    }\\n\\n    function setSushiMasterChef(IMasterChef _masterChef, uint256 _pid) external onlyOwner {\\n        require(address(_masterChef.poolInfo(_pid).lpToken) == address(lpToken), \\\"MasterChefModule: Invalid pid\\\");\\n        if (!initialDeposited) {\\n            initialDeposited = true;\\n            lpToken.approve(address(_masterChef), type(uint256).max);\\n\\n            sushiMasterChef = _masterChef;\\n            masterChefPid = _pid;\\n            _depositToSushiMasterChef(_pid, lpToken.balanceOf(address(this)), 0);\\n        } else {\\n            IMasterChef oldChef = sushiMasterChef;\\n            uint256 oldpid = masterChefPid;\\n            _withdrawFromSushiMasterChef(oldpid, oldChef.userInfo(oldpid, address(this)).amount, 0);\\n            if (_masterChef != oldChef) {\\n                lpToken.approve(address(oldChef), 0);\\n                lpToken.approve(address(_masterChef), type(uint256).max);\\n            }\\n\\n            sushiMasterChef = _masterChef;\\n            masterChefPid = _pid;\\n            _depositToSushiMasterChef(_pid, lpToken.balanceOf(address(this)), 0);\\n        }\\n    }\\n\\n    function _depositToSushiMasterChef(\\n        uint256 _pid,\\n        uint256 _amount,\\n        uint256 _totalSupportedLPTokenAmount\\n    ) internal returns (uint256 _accSushiPerShare) {\\n        return _toSushiMasterChef(true, _pid, _amount, _totalSupportedLPTokenAmount);\\n    }\\n\\n    function _withdrawFromSushiMasterChef(\\n        uint256 _pid,\\n        uint256 _amount,\\n        uint256 _totalSupportedLPTokenAmount\\n    ) internal returns (uint256 _accSushiPerShare) {\\n        return _toSushiMasterChef(false, _pid, _amount, _totalSupportedLPTokenAmount);\\n    }\\n\\n    function _toSushiMasterChef(\\n        bool deposit,\\n        uint256 _pid,\\n        uint256 _amount,\\n        uint256 _totalSupportedLPTokenAmount\\n    ) internal returns (uint256) {\\n        uint256 reward;\\n        if (block.number <= sushiLastRewardBlock) {\\n            if (deposit) sushiMasterChef.deposit(_pid, _amount);\\n            else sushiMasterChef.withdraw(_pid, _amount);\\n            return accSushiPerShare;\\n        } else {\\n            uint256 balance0 = sushi.balanceOf(address(this));\\n            if (deposit) sushiMasterChef.deposit(_pid, _amount);\\n            else sushiMasterChef.withdraw(_pid, _amount);\\n            uint256 balance1 = sushi.balanceOf(address(this));\\n            reward = balance1 - balance0;\\n        }\\n        sushiLastRewardBlock = block.number;\\n        if (_totalSupportedLPTokenAmount > 0 && reward > 0) {\\n            uint256 _accSushiPerShare = accSushiPerShare + ((reward * 1e18) / _totalSupportedLPTokenAmount);\\n            accSushiPerShare = _accSushiPerShare;\\n            return _accSushiPerShare;\\n        } else {\\n            return accSushiPerShare;\\n        }\\n    }\\n\\n    function safeSushiTransfer(address _to, uint256 _amount) internal {\\n        uint256 sushiBal = sushi.balanceOf(address(this));\\n        if (_amount > sushiBal) {\\n            sushi.transfer(_to, sushiBal);\\n        } else {\\n            sushi.transfer(_to, _amount);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xdca10bbd599a988b66e6ab66886bb3f5a0be07469789c8d3387136bdaa7101a5\",\"license\":\"MIT\"},\"contracts/uniswapv2/interfaces/IUniswapV2ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.5.0;\\n\\ninterface IUniswapV2ERC20 {\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    function name() external pure returns (string memory);\\n\\n    function symbol() external pure returns (string memory);\\n\\n    function decimals() external pure returns (uint8);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address owner) external view returns (uint256);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n\\n    function nonces(address owner) external view returns (uint256);\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n}\\n\",\"keccak256\":\"0x5beaf97ec918cd6f6f751a9eb900ba31f4f60b57d5ce7418f638dde55d72cdfd\",\"license\":\"MIT\"},\"contracts/uniswapv2/interfaces/IUniswapV2Pair.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    function name() external pure returns (string memory);\\n\\n    function symbol() external pure returns (string memory);\\n\\n    function decimals() external pure returns (uint8);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address owner) external view returns (uint256);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n\\n    function nonces(address owner) external view returns (uint256);\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\\n    event Burn(address indexed sender, uint256 amount0, uint256 amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint256 amount0In,\\n        uint256 amount1In,\\n        uint256 amount0Out,\\n        uint256 amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\\n\\n    function factory() external view returns (address);\\n\\n    function token0() external view returns (address);\\n\\n    function token1() external view returns (address);\\n\\n    function getReserves()\\n        external\\n        view\\n        returns (\\n            uint112 reserve0,\\n            uint112 reserve1,\\n            uint32 blockTimestampLast\\n        );\\n\\n    function price0CumulativeLast() external view returns (uint256);\\n\\n    function price1CumulativeLast() external view returns (uint256);\\n\\n    function kLast() external view returns (uint256);\\n\\n    function mint(address to) external returns (uint256 liquidity);\\n\\n    function burn(address to) external returns (uint256 amount0, uint256 amount1);\\n\\n    function swap(\\n        uint256 amount0Out,\\n        uint256 amount1Out,\\n        address to,\\n        bytes calldata data\\n    ) external;\\n\\n    function skim(address to) external;\\n\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\",\"keccak256\":\"0x1acf4ebf8ce4e52df2c1dbc3aa76a0895657471001631c2e90121cee574180af\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101406040523480156200001257600080fd5b50604051620045a8380380620045a88339810160408190526200003591620000b7565b600080546001600160a01b03191633908117825560405184928492918291907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3506001600160601b0319606092831b811660805290821b811660a05260c09790975260e095909552505061010091909152901b166101205262000140565b60008060008060008060c08789031215620000d157600080fd5b8651955060208701519450604087015193506060870151620000f38162000127565b6080880151909350620001068162000127565b60a0880151909250620001198162000127565b809150509295509295509295565b6001600160a01b03811681146200013d57600080fd5b50565b60805160601c60a05160601c60c05160e051610100516101205160601c614344620002646000396000818161049f01528181610e490152818161319c015281816132600152818161330301526133a901526000818161036d015281816108d3015281816108fa015261196c0152600081816103b0015261194801526000818161044a01526119ae01526000818161026e015281816136ec0152818161378f015281816137dd015281816139ea0152613b5c01526000818161041001528181610ff4015281816110e1015281816113470152818161151001528181611c4b01528181611db101528181611eb501528181611f81015281816120cf015281816121710152818161223e0152818161287f01528181612b7601526134f001526143446000f3fe608060405234801561001057600080fd5b506004361061023c5760003560e01c8063715018a61161013b578063abc7c069116100b8578063e23ee3b21161007c578063e23ee3b2146105b4578063e692c453146105e7578063f2fde38b146105fa578063f440c1eb1461060d578063f525cb681461062057600080fd5b8063abc7c0691461052b578063b345dc8c1461053e578063bc8feb0e14610585578063c62c610b14610598578063c9bbd04a146105a157600080fd5b80638da5cb5b116100ff5780638da5cb5b146104c957806396769e89146104da578063a234d608146104f2578063a39b10fa14610505578063a41fe49f1461051857600080fd5b8063715018a61461046c5780637a07bf3a146104745780637a618e7214610487578063849e5aff1461049a5780638ae39cac146104c157600080fd5b806348cd4cb1116101c957806358bb45c91161018d57806358bb45c9146103e55780635acf624c146103f85780635fcbd2851461040b57806366d31e1b146104325780636b56781a1461044557600080fd5b806348cd4cb1146103685780634fd3c34a1461038f5780635312ea8e1461039857806354ae7bb0146103ab57806357339be6146103d257600080fd5b806317caf6f11161021057806317caf6f11461030f5780633185c0bd1461032657806338e97f44146103395780633fed8e8d1461034257806340c10f191461035557600080fd5b8062aeef8a14610241578063058048ef146102565780630a087903146102695780631526fe27146102ad575b600080fd5b61025461024f366004614041565b610628565b005b610254610264366004613dbb565b6107c9565b6102907f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b6102c06102bb366004613fed565b610b67565b604080516001600160a01b03998a1681529715156020890152959097169486019490945260ff929092166060850152608084015260a083015260c082015260e0810191909152610100016102a4565b610318600a5481565b6040519081526020016102a4565b61031861033436600461401f565b610bcd565b61031860035481565b61025461035036600461406d565b610d23565b610254610363366004613e30565b610dc8565b6103187f000000000000000000000000000000000000000000000000000000000000000081565b61031860045481565b6102546103a6366004613fed565b610eb6565b6103187f000000000000000000000000000000000000000000000000000000000000000081565b6102546103e0366004613fed565b6110b5565b6103186103f3366004613fed565b6111c2565b610254610406366004613fed565b6111fa565b6102907f000000000000000000000000000000000000000000000000000000000000000081565b61025461044036600461406d565b611413565b6103187f000000000000000000000000000000000000000000000000000000000000000081565b610254611470565b610254610482366004613fed565b6114e4565b61025461049536600461406d565b611804565b6102907f000000000000000000000000000000000000000000000000000000000000000081565b6103186118a0565b6000546001600160a01b0316610290565b6005546102909061010090046001600160a01b031681565b61025461050036600461401f565b6119d8565b610254610513366004613e30565b611d69565b610254610526366004614041565b612273565b610254610539366004613e8a565b6123f5565b61057061054c36600461401f565b60076020908152600092835260408084209091529082529020805460019091015482565b604080519283526020830191909152016102a4565b61025461059336600461406d565b612577565b61031860025481565b600154610290906001600160a01b031681565b6105d76105c2366004613d9e565b60096020526000908152604090205460ff1681565b60405190151581526020016102a4565b6102546105f5366004614041565b6125d4565b610254610608366004613d9e565b612978565b61025461061b366004613d9e565b612a62565b600654610318565b60006006848154811061063d5761063d6142d2565b6000918252602090912060069091020160018101549091506001600160a01b0316156106b05760405162461bcd60e51b815260206004820152601b60248201527f5468654d61737465723a2055736520737570706f72742066756e63000000000060448201526064015b60405180910390fd5b600084815260076020908152604080832085845290915290208154600160a01b900460ff16156107165781546001600160a01b031633146107035760405162461bcd60e51b81526004016106a7906141a7565b610711858383876000612ae8565b610787565b6001600160a01b03831633146107795760405162461bcd60e51b815260206004820152602260248201527f5468654d61737465723a204465706f73697420746f20796f7572206164647265604482015261737360f01b60648201526084016106a7565b610787858383876001612ae8565b84837f33da4f9b82b3e18a281ca2cabbe2f076925692abb593b7ea3f850009e8ec9770866040516107ba91815260200190565b60405180910390a35050505050565b6000546001600160a01b031633146107f35760405162461bcd60e51b81526004016106a790614172565b6001600160a01b038316156108765760008260ff16118015610819575060508260ff1611155b6108715760405162461bcd60e51b8152602060048201526024808201527f5468654d61737465723a204f757472616e67656420737570706f7274696e67526044820152636174696f60e01b60648201526084016106a7565b6108c7565b60ff8216156108c75760405162461bcd60e51b815260206004820152601f60248201527f5468654d61737465723a204e6f7420737570706f727461626c6520706f6f6c0060448201526064016106a7565b6108cf612c2d565b60007f0000000000000000000000000000000000000000000000000000000000000000431161091e577f0000000000000000000000000000000000000000000000000000000000000000610920565b435b905081600a600082825461093491906141e8565b90915550506006805460408051610100810182526001600160a01b038b811682528a15156020830190815289821693830193845260ff89811660608501908152608085018a815260a086018a8152600060c0880181815260e0890182815260018c018d55918c905297517ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f9b8b029b8c01805497519189166001600160a81b031998891617600160a01b921515830217905598517ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d408c0180549551919098169490961693909317949093169096029290921790925592517ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d41860155517ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d42850155517ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d43840155517ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d44909201919091558515610aec576001600160a01b0388166000908152600960205260409020805460ff191660011790555b6001600160a01b038881166000818152600960209081526040918290205482519384529389169083015260ff8781168383015260608301879052905192161515918915159184917f85c5f9763b69537638ed9b50435c7c1296747fc78c92080777dd20909d46d0ac9181900360800190a45050505050505050565b60068181548110610b7757600080fd5b60009182526020909120600690910201805460018201546002830154600384015460048501546005909501546001600160a01b03808616975060ff600160a01b9687900481169791861696909504909416939088565b60008060068481548110610be357610be36142d2565b60009182526020808320878452600782526040808520888652909252922060046006909202909201908101546005820154600383015492945090914381108015610c2c57508115155b15610c99576000600a548660020154610c436118a0565b610c4d8543614241565b610c579190614222565b610c619190614222565b610c6b9190614200565b905082610c8168056bc75e2d6310000083614222565b610c8b9190614200565b610c9590856141e8565b9350505b6000846001015468056bc75e2d63100000858760000154610cba9190614222565b610cc49190614200565b610cce9190614241565b6001870154909150600160a01b900460ff1680610cf357509550610d1d945050505050565b6064610cff8284614222565b610d099190614200565b610d139083614241565b9750505050505050505b92915050565b60068781548110610d3657610d366142d2565b600091825260209091206006909102015460405163d505accf60e01b81526001600160a01b039091169063d505accf90610d829033903090600019908a908a908a908a906004016140e5565b600060405180830381600087803b158015610d9c57600080fd5b505af1158015610db0573d6000803e3d6000fd5b50505050610dbf878787610628565b50505050505050565b3360009081526009602052604090205460ff16610e325760405162461bcd60e51b815260206004820152602260248201527f5468654d61737465723a2043616c6c65642066726f6d20756e2d6d696e7461626044820152616c6560f01b60648201526084016106a7565b6040516340c10f1960e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906340c10f1990610e809085908590600401614126565b600060405180830381600087803b158015610e9a57600080fd5b505af1158015610eae573d6000803e3d6000fd5b505050505050565b600060068281548110610ecb57610ecb6142d2565b6000918252602090912060069091020160018101549091506001600160a01b031615610f395760405162461bcd60e51b815260206004820152601d60248201527f5468654d61737465723a20557365206465737570706f72742066756e6300000060448201526064016106a7565b8054600160a01b900460ff1615610fa15760405162461bcd60e51b815260206004820152602660248201527f5468654d61737465723a20506f6f6c2073686f756c64206265206e6f6e2d64656044820152656c656761746560d01b60648201526084016106a7565b6000828152600760209081526040808320338452909152812080548282556001820183905560058401805492939192839290610fde908490614241565b90915550506002548015801590611022575083547f00000000000000000000000000000000000000000000000000000000000000006001600160a01b039081169116145b1561106b57600085815260086020908152604080832033845290915290205461105090829084908190612c74565b60008681526008602090815260408083203384529091529020555b8354611081906001600160a01b03163384612d7e565b604051828152859033907fbb757047c2b5f3974fe26b7c10f732e7bce710b0952a71082702781e62ae0595906020016107ba565b6000600682815481106110ca576110ca6142d2565b6000918252602090912060069091020180549091507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03908116911614801561112357508054600160a01b900460ff16155b6111685760405162461bcd60e51b8152602060048201526016602482015275151a1953585cdd195c8e88125b9d985b1a59081c1a5960521b60448201526064016106a7565b60008281526007602090815260408083203380855290835281842054868552600884528285209185529252909120546111a19190612dd4565b60009283526008602090815260408085203386529091529092209190915550565b60008181526007602090815260408083203380855290835281842054858552600884528285209185529252822054610d1d9190612f7a565b60006006828154811061120f5761120f6142d2565b6000918252602090912060069091020160018101549091506001600160a01b03168061128b5760405162461bcd60e51b815260206004820152602560248201527f5468654d61737465723a2055736520656d657267656e637957697468647261776044820152642066756e6360d81b60648201526084016106a7565b60008381526007602090815260408083203384529091528120805482825560018201839055600585018054929391928392906112c8908490614241565b90915550506001600160a01b03831663ddfeacca336112e68461429f565b6040518363ffffffff1660e01b8152600401611303929190614126565b600060405180830381600087803b15801561131d57600080fd5b505af1158015611331573d6000803e3d6000fd5b50506002549150508015801590611375575084547f00000000000000000000000000000000000000000000000000000000000000006001600160a01b039081169116145b156113be5760008681526008602090815260408083203384529091529020546113a390829084908190612c74565b60008781526008602090815260408083203384529091529020555b84546113d4906001600160a01b03163384612d7e565b604051828152869033907f67a463e34014cd44cda35b27bf0daebb9c9e138b4e4b6ef2a23170d79595f8a09060200160405180910390a3505050505050565b60068781548110611426576114266142d2565b600091825260209091206006909102015460405163d505accf60e01b81526001600160a01b039091169063d505accf90610d8290339030908b908a908a908a908a906004016140e5565b6000546001600160a01b0316331461149a5760405162461bcd60e51b81526004016106a790614172565b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b6000600682815481106114f9576114f96142d2565b6000918252602090912060069091020180549091507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03908116911614801561155257508054600160a01b900460ff16155b6115975760405162461bcd60e51b8152602060048201526016602482015275151a1953585cdd195c8e88125b9d985b1a59081c1a5960521b60448201526064016106a7565b600082815260076020908152604080832033845290915290208054806116095760405162461bcd60e51b815260206004820152602160248201527f5468654d61737465723a204e6f7468696e672063616e20626520636c61696d656044820152601960fa1b60648201526084016106a7565b600084815260086020908152604080832033845290915290205461162e908290612dd4565b600085815260086020908152604080832033845290915290205561165183613114565b60018301546001600160a01b0316806116d6576004840154600184015460009068056bc75e2d631000006116858487614222565b61168f9190614200565b6116999190614241565b905080156116ab576116ab3382613248565b68056bc75e2d631000006116bf8386614222565b6116c99190614200565b6001860155506117fd9050565b6004840154600184015460009068056bc75e2d631000006116f78487614222565b6117019190614200565b61170b9190614241565b905080156117d75760018601546040516303273bc760e01b815260048101839052336024820152600160a01b90910460ff16604482015260009081906001600160a01b038616906303273bc7906064016040805180830381600087803b15801561177457600080fd5b505af1158015611788573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117ac9190613e5c565b909250905080156117c1576117c18282613248565b6117d4336117cf8386614241565b613248565b50505b68056bc75e2d631000006117eb8386614222565b6117f59190614200565b600186015550505b5050505050565b60068781548110611817576118176142d2565b600091825260209091206006909102015460405163d505accf60e01b81526001600160a01b039091169063d505accf906118639033903090600019908a908a908a908a906004016140e5565b600060405180830381600087803b15801561187d57600080fd5b505af1158015611891573d6000803e3d6000fd5b50505050610dbf8787876125d4565b60055460009061010090046001600160a01b03161561194457600560019054906101000a90046001600160a01b03166001600160a01b0316638ae39cac6040518163ffffffff1660e01b815260040160206040518083038186803b15801561190757600080fd5b505afa15801561191b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061193f9190614006565b905090565b60007f00000000000000000000000000000000000000000000000000000000000000006119917f000000000000000000000000000000000000000000000000000000000000000043614241565b61199b9190614200565b90506119a88160016141e8565b6119d2907f0000000000000000000000000000000000000000000000000000000000000000614200565b91505090565b6000600683815481106119ed576119ed6142d2565b6000918252602090912060069091020160018101549091506001600160a01b031680611a5b5760405162461bcd60e51b815260206004820152601c60248201527f5468654d61737465723a205573652077697468647261772066756e630000000060448201526064016106a7565b60008481526007602090815260408083203384529091529020805484811015611ac65760405162461bcd60e51b815260206004820152601e60248201527f5468654d61737465723a20496e73756666696369656e7420616d6f756e74000060448201526064016106a7565b611acf84613114565b6004840154600183015460009068056bc75e2d63100000611af08486614222565b611afa9190614200565b611b049190614241565b90508015611bcb5760018601546040516303273bc760e01b815260048101839052336024820152600160a01b90910460ff16604482015260009081906001600160a01b038816906303273bc7906064016040805180830381600087803b158015611b6d57600080fd5b505af1158015611b81573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ba59190613e5c565b90925090508015611bba57611bba8282613248565b611bc8336117cf8386614241565b50505b8615611d04576001600160a01b03851663ddfeacca33611bea8a61429f565b6040518363ffffffff1660e01b8152600401611c07929190614126565b600060405180830381600087803b158015611c2157600080fd5b505af1158015611c35573d6000803e3d6000fd5b50506002549150508015801590611c79575086547f00000000000000000000000000000000000000000000000000000000000000006001600160a01b039081169116145b15611cc2576000898152600860209081526040808320338452909152902054611ca79082908a908790612c74565b60008a81526008602090815260408083203384529091529020555b87876005016000828254611cd69190614241565b90915550611ce690508885614241565b8086558754909450611d02906001600160a01b0316338a612d7e565b505b68056bc75e2d63100000611d188385614222565b611d229190614200565b6001850155604051878152889033907fbcb1b254c83676670cc415f8ce8239bb9e972244993586ef7bf282f85ddadfe0906020015b60405180910390a35050505050505050565b6000546001600160a01b03163314611d935760405162461bcd60e51b81526004016106a790614172565b604051631526fe2760e01b8152600481018290526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081169190841690631526fe279060240160806040518083038186803b158015611df857600080fd5b505afa158015611e0c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e309190613f13565b516001600160a01b031614611e875760405162461bcd60e51b815260206004820152601d60248201527f4d6173746572436865664d6f64756c653a20496e76616c69642070696400000060448201526064016106a7565b60055460ff1661200a576005805460ff1916600117905560405163095ea7b360e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063095ea7b390611eee90859060001990600401614126565b602060405180830381600087803b158015611f0857600080fd5b505af1158015611f1c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f409190613ef6565b50600180546001600160a01b0319166001600160a01b038481169190911790915560028290556040516370a0823160e01b81523060048201526120059183917f0000000000000000000000000000000000000000000000000000000000000000909116906370a08231906024015b60206040518083038186803b158015611fc657600080fd5b505afa158015611fda573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ffe9190614006565b60006133e0565b505050565b6001546002546040516393f1a40b60e01b8152600481018290523060248201526001600160a01b039092169161209e90829084906393f1a40b90604401604080518083038186803b15801561205e57600080fd5b505afa158015612072573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120969190613f90565b5160006133f9565b50816001600160a01b0316846001600160a01b0316146121fe5760405163095ea7b360e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063095ea7b390612107908590600090600401614126565b602060405180830381600087803b15801561212157600080fd5b505af1158015612135573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121599190613ef6565b5060405163095ea7b360e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063095ea7b3906121aa90879060001990600401614126565b602060405180830381600087803b1580156121c457600080fd5b505af11580156121d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121fc9190613ef6565b505b600180546001600160a01b0319166001600160a01b038681169190911790915560028490556040516370a0823160e01b81523060048201526117fd9185917f0000000000000000000000000000000000000000000000000000000000000000909116906370a0823190602401611fae565b5050565b600060068481548110612288576122886142d2565b6000918252602090912060069091020160018101549091506001600160a01b0316156122f65760405162461bcd60e51b815260206004820152601d60248201527f5468654d61737465723a20557365206465737570706f72742066756e6300000060448201526064016106a7565b600084815260076020908152604080832085845290915290208154600160a01b900460ff161561235c5781546001600160a01b031633146123495760405162461bcd60e51b81526004016106a7906141a7565b612357858383876000613408565b6123c2565b6001600160a01b03831633146123b45760405162461bcd60e51b815260206004820152601d60248201527f5468654d61737465723a204e6f742063616c6c6564206279207573657200000060448201526064016106a7565b6123c2858383876001613408565b84837fa01a72713bf837059e3a668d28f0de277fb7f24f2a4e95bf926703c95b5f12b2866040516107ba91815260200190565b6000546001600160a01b0316331461241f5760405162461bcd60e51b81526004016106a790614172565b612427612c2d565b60005b838110156117fd57828282818110612444576124446142d2565b90506020020135600686868481811061245f5761245f6142d2565b9050602002013581548110612476576124766142d2565b906000526020600020906006020160020154600a546124959190614241565b61249f91906141e8565b600a558282828181106124b4576124b46142d2565b9050602002013560068686848181106124cf576124cf6142d2565b90506020020135815481106124e6576124e66142d2565b90600052602060002090600602016002018190555084848281811061250d5761250d6142d2565b905060200201357f545b620a3000f6303b158b321f06b4e95e28a27d70aecac8c6bdac4f48a9f6b3848484818110612547576125476142d2565b9050602002013560405161255d91815260200190565b60405180910390a26125706001826141e8565b905061242a565b6006878154811061258a5761258a6142d2565b600091825260209091206006909102015460405163d505accf60e01b81526001600160a01b039091169063d505accf9061186390339030908b908a908a908a908a906004016140e5565b6000600684815481106125e9576125e96142d2565b6000918252602090912060069091020160018101549091506001600160a01b0316806126575760405162461bcd60e51b815260206004820152601b60248201527f5468654d61737465723a20557365206465706f7369742066756e63000000000060448201526064016106a7565b6000858152600760209081526040808320338452909152902061267983613114565b60048301548154801561277f57600183015460009068056bc75e2d631000006126a28585614222565b6126ac9190614200565b6126b69190614241565b9050801561277d5760018601546040516303273bc760e01b815260048101839052336024820152600160a01b90910460ff16604482015260009081906001600160a01b038816906303273bc7906064016040805180830381600087803b15801561271f57600080fd5b505af1158015612733573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127579190613e5c565b9092509050801561276c5761276c8282613248565b61277a336117cf8386614241565b50505b505b861561292157806127f6576040516359290a2560e11b815233600482015260248101879052604481018890526001600160a01b0385169063b252144a90606401600060405180830381600087803b1580156127d957600080fd5b505af11580156127ed573d6000803e3d6000fd5b50505050612857565b604051636eff566560e11b81526001600160a01b0385169063ddfeacca906128249033908b90600401614126565b600060405180830381600087803b15801561283e57600080fd5b505af1158015612852573d6000803e3d6000fd5b505050505b845461286e906001600160a01b031633308a6135b4565b60025480158015906128ad575085547f00000000000000000000000000000000000000000000000000000000000000006001600160a01b039081169116145b156128f65760008981526008602090815260408083203384529091529020546128db9082908a9085906135ec565b60008a81526008602090815260408083203384529091529020555b8786600501600082825461290a91906141e8565b9091555061291a905088836141e8565b8085559150505b68056bc75e2d631000006129358383614222565b61293f9190614200565b6001840155604051878152889033907f3391b7506551053a045b28b04ba34acfab377a47e91db9f4a46d8ac01acac14f90602001611d57565b6000546001600160a01b031633146129a25760405162461bcd60e51b81526004016106a790614172565b6001600160a01b038116612a075760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016106a7565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b03163314612a8c5760405162461bcd60e51b81526004016106a790614172565b60058054610100600160a81b0319166101006001600160a01b038416908102919091179091556040519081527f065fc3b77c68c383644c8d30a3e1f0df39d6f0ddc721adc950902574d599622b9060200160405180910390a150565b612af184613114565b600484015483548015612b4257600185015460009068056bc75e2d63100000612b1a8585614222565b612b249190614200565b612b2e9190614241565b90508015612b4057612b403382613248565b505b8315612c19578215612bef578554612b65906001600160a01b03163330876135b4565b6002548015801590612ba4575086547f00000000000000000000000000000000000000000000000000000000000000006001600160a01b039081169116145b15612bed576000888152600860209081526040808320338452909152902054612bd2908290879085906135ec565b60008981526008602090815260408083203384529091529020555b505b83866005016000828254612c0391906141e8565b90915550612c13905084826141e8565b80865590505b68056bc75e2d631000006117eb8383614222565b60065460005b8181101561226f57612c6460068281548110612c5157612c516142d2565b9060005260206000209060060201613114565b612c6d81614284565b9050612c33565b6001546040516393f1a40b60e01b81526004810186905230602482015260009182916001600160a01b03909116906393f1a40b90604401604080518083038186803b158015612cc257600080fd5b505afa158015612cd6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612cfa9190613f90565b5190506000612d0a8787846133f9565b9050600084670de0b6b3a7640000612d228489614222565b612d2c9190614200565b612d369190614241565b90508015612d4857612d4833826136d4565b670de0b6b3a764000082612d5c8989614241565b612d669190614222565b612d709190614200565b93505050505b949350505050565b6120058363a9059cbb60e01b8484604051602401612d9d929190614126565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152613814565b60025460009080612e275760405162461bcd60e51b815260206004820152601d60248201527f4d6173746572436865664d6f64756c653a20556e636c61696d61626c6500000060448201526064016106a7565b6001546040516393f1a40b60e01b8152600481018390523060248201526000916001600160a01b0316906393f1a40b90604401604080518083038186803b158015612e7157600080fd5b505afa158015612e85573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ea99190613f90565b5190506000612eb98382846133e0565b9050600085670de0b6b3a7640000612ed1848a614222565b612edb9190614200565b612ee59190614241565b905060008111612f485760405162461bcd60e51b815260206004820152602860248201527f4d6173746572436865664d6f64756c653a204e6f7468696e672063616e2062656044820152670818db185a5b595960c21b60648201526084016106a7565b612f5233826136d4565b670de0b6b3a7640000612f658389614222565b612f6f9190614200565b979650505050505050565b60025460009080612f8f576000915050610d1d565b6001546040516393f1a40b60e01b8152600481018390523060248201526000916001600160a01b0316906393f1a40b90604401604080518083038186803b158015612fd957600080fd5b505afa158015612fed573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130119190613f90565b51600454600354919250904311801561302957508115155b156130e25760015460025460405163065509bb60e21b815260048101919091523060248201526000916001600160a01b03169063195426ec9060440160206040518083038186803b15801561307d57600080fd5b505afa158015613091573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130b59190614006565b9050826130ca82670de0b6b3a7640000614222565b6130d49190614200565b6130de90836141e8565b9150505b84670de0b6b3a76400006130f68389614222565b6131009190614200565b61310a9190614241565b9695505050505050565b6003810154438110613124575050565b600582015480158061313857506002830154155b1561314857505043600390910155565b6000600a54846002015461315a6118a0565b6131648643614241565b61316e9190614222565b6131789190614222565b6131829190614200565b6040516340c10f1960e01b81529091506001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906340c10f19906131d39030908590600401614126565b600060405180830381600087803b1580156131ed57600080fd5b505af1158015613201573d6000803e3d6000fd5b505050508168056bc75e2d631000008261321b9190614222565b6132259190614200565b846004015461323491906141e8565b600485015550504360039092019190915550565b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b1580156132aa57600080fd5b505afa1580156132be573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132e29190614006565b9050808211156133925760405163a9059cbb60e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063a9059cbb9061333a9086908590600401614126565b602060405180830381600087803b15801561335457600080fd5b505af1158015613368573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061338c9190613ef6565b50505050565b60405163a9059cbb60e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063a9059cbb9061333a9086908690600401614126565b60006133ef60018585856138e6565b90505b9392505050565b60006133ef60008585856138e6565b82548281101561345a5760405162461bcd60e51b815260206004820152601e60248201527f5468654d61737465723a20496e73756666696369656e7420616d6f756e74000060448201526064016106a7565b61346385613114565b6004850154600185015460009068056bc75e2d631000006134848486614222565b61348e9190614200565b6134989190614241565b905080156134aa576134aa3382613248565b841561358457848760050160008282546134c49190614241565b909155506134d490508584614241565b8087559250831561358457600254801580159061351e575087547f00000000000000000000000000000000000000000000000000000000000000006001600160a01b039081169116145b1561356c57613551818761353281886141e8565b60008d8152600860209081526040808320338452909152902054612c74565b60008a81526008602090815260408083203384529091529020555b8754613582906001600160a01b03163388612d7e565b505b68056bc75e2d631000006135988385614222565b6135a29190614200565b86600101819055505050505050505050565b6040516001600160a01b038085166024830152831660448201526064810182905261338c9085906323b872dd60e01b90608401612d9d565b6001546040516393f1a40b60e01b81526004810186905230602482015260009182916001600160a01b03909116906393f1a40b90604401604080518083038186803b15801561363a57600080fd5b505afa15801561364e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136729190613f90565b51905060006136828787846133e0565b9050600084670de0b6b3a764000061369a8489614222565b6136a49190614200565b6136ae9190614241565b905080156136c0576136c033826136d4565b670de0b6b3a764000082612d5c89896141e8565b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b15801561373657600080fd5b505afa15801561374a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061376e9190614006565b9050808211156137c65760405163a9059cbb60e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063a9059cbb9061333a9086908590600401614126565b60405163a9059cbb60e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063a9059cbb9061333a9086908690600401614126565b6000613869826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316613c419092919063ffffffff16565b80519091501561200557808060200190518101906138879190613ef6565b6120055760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016106a7565b60008060035443116139d257851561396257600154604051631c57762b60e31b815260048101879052602481018690526001600160a01b039091169063e2bbb15890604401600060405180830381600087803b15801561394557600080fd5b505af1158015613959573d6000803e3d6000fd5b505050506139c8565b600154604051630441a3e760e41b815260048101879052602481018690526001600160a01b039091169063441a3e7090604401600060405180830381600087803b1580156139af57600080fd5b505af11580156139c3573d6000803e3d6000fd5b505050505b5050600454612d76565b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b158015613a3457600080fd5b505afa158015613a48573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613a6c9190614006565b90508615613ade57600154604051631c57762b60e31b815260048101889052602481018790526001600160a01b039091169063e2bbb15890604401600060405180830381600087803b158015613ac157600080fd5b505af1158015613ad5573d6000803e3d6000fd5b50505050613b44565b600154604051630441a3e760e41b815260048101889052602481018790526001600160a01b039091169063441a3e7090604401600060405180830381600087803b158015613b2b57600080fd5b505af1158015613b3f573d6000803e3d6000fd5b505050505b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b158015613ba657600080fd5b505afa158015613bba573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613bde9190614006565b9050613bea8282614241565b92505050436003558215801590613c015750600081115b156139c857600083613c1b83670de0b6b3a7640000614222565b613c259190614200565b600454613c3291906141e8565b60048190559250612d76915050565b60606133ef848460008585843b613c9a5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016106a7565b600080866001600160a01b03168587604051613cb691906140c9565b60006040518083038185875af1925050503d8060008114613cf3576040519150601f19603f3d011682016040523d82523d6000602084013e613cf8565b606091505b5091509150612f6f82828660608315613d125750816133f2565b825115613d225782518084602001fd5b8160405162461bcd60e51b81526004016106a7919061413f565b60008083601f840112613d4e57600080fd5b50813567ffffffffffffffff811115613d6657600080fd5b6020830191508360208260051b8501011115613d8157600080fd5b9250929050565b803560ff81168114613d9957600080fd5b919050565b600060208284031215613db057600080fd5b81356133f2816142e8565b60008060008060008060c08789031215613dd457600080fd5b8635613ddf816142e8565b95506020870135613def81614300565b94506040870135613dff81614300565b93506060870135613e0f816142e8565b9250613e1d60808801613d88565b915060a087013590509295509295509295565b60008060408385031215613e4357600080fd5b8235613e4e816142e8565b946020939093013593505050565b60008060408385031215613e6f57600080fd5b8251613e7a816142e8565b6020939093015192949293505050565b60008060008060408587031215613ea057600080fd5b843567ffffffffffffffff80821115613eb857600080fd5b613ec488838901613d3c565b90965094506020870135915080821115613edd57600080fd5b50613eea87828801613d3c565b95989497509550505050565b600060208284031215613f0857600080fd5b81516133f281614300565b600060808284031215613f2557600080fd5b6040516080810181811067ffffffffffffffff82111715613f5657634e487b7160e01b600052604160045260246000fd5b6040528251613f64816142e8565b808252506020830151602082015260408301516040820152606083015160608201528091505092915050565b600060408284031215613fa257600080fd5b6040516040810181811067ffffffffffffffff82111715613fd357634e487b7160e01b600052604160045260246000fd5b604052825181526020928301519281019290925250919050565b600060208284031215613fff57600080fd5b5035919050565b60006020828403121561401857600080fd5b5051919050565b6000806040838503121561403257600080fd5b50508035926020909101359150565b60008060006060848603121561405657600080fd5b505081359360208301359350604090920135919050565b600080600080600080600060e0888a03121561408857600080fd5b873596506020880135955060408801359450606088013593506140ad60808901613d88565b925060a0880135915060c0880135905092959891949750929550565b600082516140db818460208701614258565b9190910192915050565b6001600160a01b0397881681529590961660208601526040850193909352606084019190915260ff16608083015260a082015260c081019190915260e00190565b6001600160a01b03929092168252602082015260400190565b602081526000825180602084015261415e816040850160208701614258565b601f01601f19169190910160400192915050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526021908201527f5468654d61737465723a204e6f742063616c6c65642062792064656c656761746040820152606560f81b606082015260800190565b600082198211156141fb576141fb6142bc565b500190565b60008261421d57634e487b7160e01b600052601260045260246000fd5b500490565b600081600019048311821515161561423c5761423c6142bc565b500290565b600082821015614253576142536142bc565b500390565b60005b8381101561427357818101518382015260200161425b565b8381111561338c5750506000910152565b6000600019821415614298576142986142bc565b5060010190565b6000600160ff1b8214156142b5576142b56142bc565b5060000390565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b6001600160a01b03811681146142fd57600080fd5b50565b80151581146142fd57600080fdfea26469706673582212203686605138257a5f8bd57401f799f7f57a58d1be8e3ef921ee80b6d7f92a759e64736f6c63430008050033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/TheMaster.sol:TheMaster",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 13508,
        "contract": "contracts/TheMaster.sol:TheMaster",
        "label": "sushiMasterChef",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IMasterChef)9813"
      },
      {
        "astId": 13511,
        "contract": "contracts/TheMaster.sol:TheMaster",
        "label": "masterChefPid",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 13514,
        "contract": "contracts/TheMaster.sol:TheMaster",
        "label": "sushiLastRewardBlock",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 13517,
        "contract": "contracts/TheMaster.sol:TheMaster",
        "label": "accSushiPerShare",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 13519,
        "contract": "contracts/TheMaster.sol:TheMaster",
        "label": "initialDeposited",
        "offset": 0,
        "slot": "5",
        "type": "t_bool"
      },
      {
        "astId": 6949,
        "contract": "contracts/TheMaster.sol:TheMaster",
        "label": "rewardCalculator",
        "offset": 1,
        "slot": "5",
        "type": "t_contract(IRewardCalculator)10112"
      },
      {
        "astId": 6954,
        "contract": "contracts/TheMaster.sol:TheMaster",
        "label": "poolInfo",
        "offset": 0,
        "slot": "6",
        "type": "t_array(t_struct(PoolInfo)6929_storage)dyn_storage"
      },
      {
        "astId": 6962,
        "contract": "contracts/TheMaster.sol:TheMaster",
        "label": "userInfo",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(UserInfo)6911_storage))"
      },
      {
        "astId": 6968,
        "contract": "contracts/TheMaster.sol:TheMaster",
        "label": "sushiRewardDebt",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 6973,
        "contract": "contracts/TheMaster.sol:TheMaster",
        "label": "mintableByAddr",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 6976,
        "contract": "contracts/TheMaster.sol:TheMaster",
        "label": "totalAllocPoint",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(PoolInfo)6929_storage)dyn_storage": {
        "base": "t_struct(PoolInfo)6929_storage",
        "encoding": "dynamic_array",
        "label": "struct TheMaster.PoolInfo[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IMasterChef)9813": {
        "encoding": "inplace",
        "label": "contract IMasterChef",
        "numberOfBytes": "20"
      },
      "t_contract(IRewardCalculator)10112": {
        "encoding": "inplace",
        "label": "contract IRewardCalculator",
        "numberOfBytes": "20"
      },
      "t_contract(ISupportable)10207": {
        "encoding": "inplace",
        "label": "contract ISupportable",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(UserInfo)6911_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint256 => struct TheMaster.UserInfo))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(UserInfo)6911_storage)"
      },
      "t_mapping(t_uint256,t_struct(UserInfo)6911_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct TheMaster.UserInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(UserInfo)6911_storage"
      },
      "t_struct(PoolInfo)6929_storage": {
        "encoding": "inplace",
        "label": "struct TheMaster.PoolInfo",
        "members": [
          {
            "astId": 6913,
            "contract": "contracts/TheMaster.sol:TheMaster",
            "label": "addr",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 6915,
            "contract": "contracts/TheMaster.sol:TheMaster",
            "label": "delegate",
            "offset": 20,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 6918,
            "contract": "contracts/TheMaster.sol:TheMaster",
            "label": "supportable",
            "offset": 0,
            "slot": "1",
            "type": "t_contract(ISupportable)10207"
          },
          {
            "astId": 6920,
            "contract": "contracts/TheMaster.sol:TheMaster",
            "label": "supportingRatio",
            "offset": 20,
            "slot": "1",
            "type": "t_uint8"
          },
          {
            "astId": 6922,
            "contract": "contracts/TheMaster.sol:TheMaster",
            "label": "allocPoint",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 6924,
            "contract": "contracts/TheMaster.sol:TheMaster",
            "label": "lastRewardBlock",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 6926,
            "contract": "contracts/TheMaster.sol:TheMaster",
            "label": "accRewardPerShare",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 6928,
            "contract": "contracts/TheMaster.sol:TheMaster",
            "label": "supply",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(UserInfo)6911_storage": {
        "encoding": "inplace",
        "label": "struct TheMaster.UserInfo",
        "members": [
          {
            "astId": 6908,
            "contract": "contracts/TheMaster.sol:TheMaster",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 6910,
            "contract": "contracts/TheMaster.sol:TheMaster",
            "label": "rewardDebt",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}