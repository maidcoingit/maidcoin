{
  "address": "0x629d37B273c05597C8bEfB7B48525803B202D9Ea",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IMaidCoin",
          "name": "_maidCoin",
          "type": "address"
        },
        {
          "internalType": "contract IMaidCafe",
          "name": "_maidCafe",
          "type": "address"
        },
        {
          "internalType": "contract INursePart",
          "name": "_nursePart",
          "type": "address"
        },
        {
          "internalType": "contract ICloneNurses",
          "name": "_cloneNurses",
          "type": "address"
        },
        {
          "internalType": "contract IRNG",
          "name": "_rng",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_sushiGirls",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_lingerieGirls",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "ChangeLPTokenToMaidPower",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "numerator",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "denominator",
          "type": "uint256"
        }
      ],
      "name": "ChangeMaidEfficacy",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "entranceFee",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "nursePart",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maxRewardCount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "duration",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "endBlock",
          "type": "uint256"
        }
      ],
      "name": "Create",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "challenger",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "contract IMaids",
          "name": "maids",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maidId",
          "type": "uint256"
        }
      ],
      "name": "Enter",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "challenger",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "Exit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "contract IMaids[]",
          "name": "maids",
          "type": "address[]"
        }
      ],
      "name": "approveMaids",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "challengers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "enterBlock",
          "type": "uint256"
        },
        {
          "internalType": "contract IMaids",
          "name": "maids",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "maidId",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "changeLPTokenToMaidPower",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_numerator",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_denominator",
          "type": "uint256"
        }
      ],
      "name": "changeMaidEfficacy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "changeRNG",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "checkDone",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cloneNurses",
      "outputs": [
        {
          "internalType": "contract ICloneNurses",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "entranceFees",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_nurseParts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "maxRewardCounts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "durations",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "endBlocks",
          "type": "uint256[]"
        }
      ],
      "name": "create",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IMaids[]",
          "name": "maids",
          "type": "address[]"
        }
      ],
      "name": "disapproveMaids",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "contract IMaids",
          "name": "maids",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "maidId",
          "type": "uint256"
        }
      ],
      "name": "enter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "contract IMaids",
          "name": "maids",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "maidId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v1",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r1",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s1",
          "type": "bytes32"
        },
        {
          "internalType": "uint8",
          "name": "v2",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r2",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s2",
          "type": "bytes32"
        }
      ],
      "name": "enterWithPermit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "contract IMaids",
          "name": "maids",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "maidId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v1",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r1",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s1",
          "type": "bytes32"
        },
        {
          "internalType": "uint8",
          "name": "v2",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r2",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s2",
          "type": "bytes32"
        }
      ],
      "name": "enterWithPermitAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "exit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IMaids",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isMaidsApproved",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lingerieGirls",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lpTokenToMaidPower",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maidCafe",
      "outputs": [
        {
          "internalType": "contract IMaidCafe",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maidCoin",
      "outputs": [
        {
          "internalType": "contract IMaidCoin",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maidEfficacy",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "numerator",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "denominator",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nursePart",
      "outputs": [
        {
          "internalType": "contract INursePart",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IMaids",
          "name": "maids",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "powerOfMaids",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "raidCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "raids",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "entranceFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "nursePart",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxRewardCount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "duration",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endBlock",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rng",
      "outputs": [
        {
          "internalType": "contract IRNG",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IMaidCafe",
          "name": "_maidCafe",
          "type": "address"
        }
      ],
      "name": "setMaidCafe",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sushiGirls",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x46f97db39d641b68bb796b06e4c672a0cda6b39b9658bcba518c41b94a3e11b4",
  "receipt": {
    "to": null,
    "from": "0x77466365e1be100f8E1Ac907AfE4151Ea21c528E",
    "contractAddress": "0x629d37B273c05597C8bEfB7B48525803B202D9Ea",
    "transactionIndex": 217,
    "gasUsed": "2074421",
    "logsBloom": "0x
    "blockHash": "0xabe03825ffd75fd248e54f184a1b72266ad130b059ae3a9a500c128e0fa46003",
    "transactionHash": "0x46f97db39d641b68bb796b06e4c672a0cda6b39b9658bcba518c41b94a3e11b4",
    "logs": [
      {
        "transactionIndex": 217,
        "blockNumber": 13289181,
        "transactionHash": "0x46f97db39d641b68bb796b06e4c672a0cda6b39b9658bcba518c41b94a3e11b4",
        "address": "0x629d37B273c05597C8bEfB7B48525803B202D9Ea",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000077466365e1be100f8e1ac907afe4151ea21c528e"
        ],
        "data": "0x",
        "logIndex": 290,
        "blockHash": "0xabe03825ffd75fd248e54f184a1b72266ad130b059ae3a9a500c128e0fa46003"
      }
    ],
    "blockNumber": 13289181,
    "cumulativeGasUsed": "18923385",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x4Af698B479D0098229DC715655c667Ceb6cd8433",
    "0xD428F1050AdC29976d4339b1ec602832034dF701",
    "0x861f8d5b601054D5109B93D3775cd71c74593f78",
    "0x5eE657F5426484A777a1fC7Abd436DfDB13b1cc3",
    "0xb0c63655bB4d89a1392F2cEedf0C9c4f3efEb0F7",
    "0xEB3b418e4A4430392Cd57b1356c5B1d2205A56d9",
    "0x579a60fbc649d3398f13e0385dbe79b3ffad757c"
  ],
  "solcInputHash": "a8024d08cac240e1437225c8fb245dbd",
  "metadata": "{\"compiler\":{\"version\":\"0.8.5+commit.a4f2e591\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IMaidCoin\",\"name\":\"_maidCoin\",\"type\":\"address\"},{\"internalType\":\"contract IMaidCafe\",\"name\":\"_maidCafe\",\"type\":\"address\"},{\"internalType\":\"contract INursePart\",\"name\":\"_nursePart\",\"type\":\"address\"},{\"internalType\":\"contract ICloneNurses\",\"name\":\"_cloneNurses\",\"type\":\"address\"},{\"internalType\":\"contract IRNG\",\"name\":\"_rng\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_sushiGirls\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lingerieGirls\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"ChangeLPTokenToMaidPower\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"numerator\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"denominator\",\"type\":\"uint256\"}],\"name\":\"ChangeMaidEfficacy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"entranceFee\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"nursePart\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxRewardCount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endBlock\",\"type\":\"uint256\"}],\"name\":\"Create\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"challenger\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"contract IMaids\",\"name\":\"maids\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maidId\",\"type\":\"uint256\"}],\"name\":\"Enter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"challenger\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"Exit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"contract IMaids[]\",\"name\":\"maids\",\"type\":\"address[]\"}],\"name\":\"approveMaids\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"challengers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"enterBlock\",\"type\":\"uint256\"},{\"internalType\":\"contract IMaids\",\"name\":\"maids\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maidId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"changeLPTokenToMaidPower\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_numerator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_denominator\",\"type\":\"uint256\"}],\"name\":\"changeMaidEfficacy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"changeRNG\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"checkDone\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cloneNurses\",\"outputs\":[{\"internalType\":\"contract ICloneNurses\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"entranceFees\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_nurseParts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"maxRewardCounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"durations\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"endBlocks\",\"type\":\"uint256[]\"}],\"name\":\"create\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IMaids[]\",\"name\":\"maids\",\"type\":\"address[]\"}],\"name\":\"disapproveMaids\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"contract IMaids\",\"name\":\"maids\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maidId\",\"type\":\"uint256\"}],\"name\":\"enter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"contract IMaids\",\"name\":\"maids\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maidId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v1\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r1\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s1\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"v2\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r2\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s2\",\"type\":\"bytes32\"}],\"name\":\"enterWithPermit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"contract IMaids\",\"name\":\"maids\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maidId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v1\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r1\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s1\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"v2\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r2\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s2\",\"type\":\"bytes32\"}],\"name\":\"enterWithPermitAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"exit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IMaids\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isMaidsApproved\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lingerieGirls\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpTokenToMaidPower\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maidCafe\",\"outputs\":[{\"internalType\":\"contract IMaidCafe\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maidCoin\",\"outputs\":[{\"internalType\":\"contract IMaidCoin\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maidEfficacy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"numerator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"denominator\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nursePart\",\"outputs\":[{\"internalType\":\"contract INursePart\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IMaids\",\"name\":\"maids\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"powerOfMaids\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"raidCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"raids\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"entranceFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nursePart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxRewardCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endBlock\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rng\",\"outputs\":[{\"internalType\":\"contract IRNG\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IMaidCafe\",\"name\":\"_maidCafe\",\"type\":\"address\"}],\"name\":\"setMaidCafe\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sushiGirls\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/NurseRaid.sol\":\"NurseRaid\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x1cae4f85f114ff17b90414f5da67365b1d00337abb5bce9bf944eb78a2c0673c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(address from, address to, uint256[] calldata ids, uint256[] calldata amounts, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0x249bc2a6d919da5f5145950664134cfcf2f66874bda801fd3b8fb861783da079\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xf8e8d118a7a8b2e134181f7da655f6266aa3a0f9134b2605747139fcb0c5d835\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\\n      *\\n      * Requirements:\\n      *\\n      * - `from` cannot be the zero address.\\n      * - `to` cannot be the zero address.\\n      * - `tokenId` token must exist and be owned by `from`.\\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n      *\\n      * Emits a {Transfer} event.\\n      */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0xc1c941ad1e580b4623007305921efe2f26fc7320a4edc226234dd707c658a428\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xccb7e6475afcb1c5cb13b3fbf1329c10b93620a9b66393388066683915271a78\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xb8d11e77eb1ed34a33720edb551d7d6a6b0eee2bfaa40a7024020e1fdf879b16\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xf930d2df426bfcfc1f7415be724f04081c96f4fb9ec8d0e3a521c07692dface0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"contracts/NurseRaid.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.5;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./interfaces/INurseRaid.sol\\\";\\nimport \\\"./libraries/MaidPower.sol\\\";\\n\\ncontract NurseRaid is Ownable, MaidPower, INurseRaid {\\n    struct Raid {\\n        uint256 entranceFee;\\n        uint256 nursePart;\\n        uint256 maxRewardCount;\\n        uint256 duration;\\n        uint256 endBlock;\\n    }\\n\\n    struct Challenger {\\n        uint256 enterBlock;\\n        IMaids maids;\\n        uint256 maidId;\\n    }\\n\\n    struct MaidEfficacy {\\n        uint256 numerator;\\n        uint256 denominator;\\n    }\\n\\n    Raid[] public raids;\\n    mapping(uint256 => mapping(address => Challenger)) public challengers;\\n\\n    mapping(IMaids => bool) public override isMaidsApproved;\\n\\n    IMaidCoin public immutable override maidCoin;\\n    IMaidCafe public override maidCafe;\\n    INursePart public immutable override nursePart;\\n    ICloneNurses public immutable override cloneNurses;\\n    IRNG public override rng;\\n\\n    MaidEfficacy public override maidEfficacy = MaidEfficacy({numerator: 1, denominator: 1000});\\n\\n    constructor(\\n        IMaidCoin _maidCoin,\\n        IMaidCafe _maidCafe,\\n        INursePart _nursePart,\\n        ICloneNurses _cloneNurses,\\n        IRNG _rng,\\n        address _sushiGirls,\\n        address _lingerieGirls\\n    ) MaidPower(_sushiGirls, _lingerieGirls) {\\n        maidCoin = _maidCoin;\\n        maidCafe = _maidCafe;\\n        nursePart = _nursePart;\\n        cloneNurses = _cloneNurses;\\n        rng = _rng;\\n    }\\n\\n    function changeMaidEfficacy(uint256 _numerator, uint256 _denominator) external onlyOwner {\\n        maidEfficacy = MaidEfficacy({numerator: _numerator, denominator: _denominator});\\n        emit ChangeMaidEfficacy(_numerator, _denominator);\\n    }\\n\\n    function setMaidCafe(IMaidCafe _maidCafe) external onlyOwner {\\n        maidCafe = _maidCafe;\\n    }\\n\\n    function approveMaids(IMaids[] calldata maids) public onlyOwner {\\n        for (uint256 i = 0; i < maids.length; i += 1) {\\n            isMaidsApproved[maids[i]] = true;\\n        }\\n    }\\n\\n    function disapproveMaids(IMaids[] calldata maids) public onlyOwner {\\n        for (uint256 i = 0; i < maids.length; i += 1) {\\n            isMaidsApproved[maids[i]] = false;\\n        }\\n    }\\n\\n    modifier onlyApprovedMaids(IMaids maids) {\\n        require(address(maids) == address(0) || isMaidsApproved[maids], \\\"NurseRaid: The maids is not approved\\\");\\n        _;\\n    }\\n\\n    function changeRNG(address addr) external onlyOwner {\\n        rng = IRNG(addr);\\n    }\\n\\n    function raidCount() external view override returns (uint256) {\\n        return raids.length;\\n    }\\n\\n    function create(\\n        uint256[] calldata entranceFees,\\n        uint256[] calldata _nurseParts,\\n        uint256[] calldata maxRewardCounts,\\n        uint256[] calldata durations,\\n        uint256[] calldata endBlocks\\n    ) external override onlyOwner returns (uint256 id) {\\n        uint256 length = entranceFees.length;\\n        for (uint256 i = 0; i < length; i++) {\\n            require(maxRewardCounts[i] < 255, \\\"NurseRaid: Invalid number\\\");\\n            {   // scope to avoid stack too deep errors\\n                (uint256 nursePartCount, uint256 nurseDestroyReturn, , ) = cloneNurses.nurseTypes(_nurseParts[i]);\\n\\n                require(\\n                    entranceFees[i] >= (nurseDestroyReturn * maxRewardCounts[i]) / nursePartCount,\\n                    \\\"NurseRaid: Fee should be higher\\\"\\n                );\\n            }\\n            id = raids.length;\\n            raids.push(\\n                Raid({\\n                    entranceFee: entranceFees[i],\\n                    nursePart: _nurseParts[i],\\n                    maxRewardCount: maxRewardCounts[i],\\n                    duration: durations[i],\\n                    endBlock: endBlocks[i]\\n                })\\n            );\\n            emit Create(id, entranceFees[i], _nurseParts[i], maxRewardCounts[i], durations[i], endBlocks[i]);\\n        }\\n    }\\n\\n    function enter(\\n        uint256 id,\\n        IMaids maids,\\n        uint256 maidId\\n    ) public override onlyApprovedMaids(maids) {\\n        Raid storage raid = raids[id];\\n        require(block.number < raid.endBlock, \\\"NurseRaid: Raid has ended\\\");\\n        require(challengers[id][msg.sender].enterBlock == 0, \\\"NurseRaid: Raid is in progress\\\");\\n        challengers[id][msg.sender] = Challenger({enterBlock: block.number, maids: maids, maidId: maidId});\\n        if (address(maids) != address(0)) {\\n            maids.transferFrom(msg.sender, address(this), maidId);\\n        }\\n        uint256 _entranceFee = raid.entranceFee;\\n        maidCoin.transferFrom(msg.sender, address(this), _entranceFee);\\n        uint256 feeToCafe = (_entranceFee * 3) / 1000;\\n        _feeTransfer(feeToCafe);\\n        maidCoin.burn(_entranceFee - feeToCafe);\\n        emit Enter(msg.sender, id, maids, maidId);\\n    }\\n\\n    function enterWithPermit(\\n        uint256 id,\\n        IMaids maids,\\n        uint256 maidId,\\n        uint256 deadline,\\n        uint8 v1,\\n        bytes32 r1,\\n        bytes32 s1,\\n        uint8 v2,\\n        bytes32 r2,\\n        bytes32 s2\\n    ) external override {\\n        maidCoin.permit(msg.sender, address(this), raids[id].entranceFee, deadline, v1, r1, s1);\\n        if (address(maids) != address(0)) {\\n            maids.permit(msg.sender, maidId, deadline, v2, r2, s2);\\n        }\\n        enter(id, maids, maidId);\\n    }\\n\\n    function enterWithPermitAll(\\n        uint256 id,\\n        IMaids maids,\\n        uint256 maidId,\\n        uint256 deadline,\\n        uint8 v1,\\n        bytes32 r1,\\n        bytes32 s1,\\n        uint8 v2,\\n        bytes32 r2,\\n        bytes32 s2\\n    ) external override {\\n        maidCoin.permit(msg.sender, address(this), type(uint256).max, deadline, v1, r1, s1);\\n        if (address(maids) != address(0)) {\\n            maids.permitAll(msg.sender, address(this), deadline, v2, r2, s2);\\n        }\\n        enter(id, maids, maidId);\\n    }\\n\\n    function checkDone(uint256 id) public view override returns (bool) {\\n        Raid memory raid = raids[id];\\n        Challenger memory challenger = challengers[id][msg.sender];\\n\\n        return _checkDone(raid.duration, challenger);\\n    }\\n\\n    function _checkDone(uint256 duration, Challenger memory challenger) internal view returns (bool) {\\n        if (address(challenger.maids) == address(0)) {\\n            return block.number - challenger.enterBlock >= duration;\\n        } else {\\n            return\\n                block.number - challenger.enterBlock >=\\n                duration -\\n                    ((duration * powerOfMaids(challenger.maids, challenger.maidId) * maidEfficacy.numerator) /\\n                        maidEfficacy.denominator);\\n        }\\n    }\\n\\n    function exit(uint256[] calldata ids) external override {\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            Challenger memory challenger = challengers[ids[i]][msg.sender];\\n            require(challenger.enterBlock != 0, \\\"NurseRaid: Not participating in the raid\\\");\\n\\n            Raid storage raid = raids[ids[i]];\\n\\n            if (_checkDone(raid.duration, challenger)) {\\n                uint256 rewardCount = _randomReward(ids[i], raid.maxRewardCount, msg.sender);\\n                nursePart.mint(msg.sender, raid.nursePart, rewardCount);\\n            }\\n\\n            if (address(challenger.maids) != address(0)) {\\n                challenger.maids.transferFrom(address(this), msg.sender, challenger.maidId);\\n            }\\n\\n            delete challengers[ids[i]][msg.sender];\\n            emit Exit(msg.sender, ids[i]);\\n        }\\n    }\\n\\n    function _randomReward(\\n        uint256 _id,\\n        uint256 _maxRewardCount,\\n        address sender\\n    ) internal returns (uint256 rewardCount) {\\n        uint256 totalNumber = 2 * (2**_maxRewardCount - 1);\\n        uint256 randomNumber = (rng.generateRandomNumber(_id, sender) % totalNumber) + 1;\\n\\n        uint256 ceil;\\n        uint256 i = 0;\\n\\n        while (randomNumber > ceil) {\\n            i += 1;\\n            ceil = (2**(_maxRewardCount + 1)) - (2**(_maxRewardCount + 1 - i));\\n        }\\n\\n        rewardCount = i;\\n    }\\n\\n    function _feeTransfer(uint256 feeToCafe) internal {\\n        maidCoin.transfer(address(maidCafe), feeToCafe);\\n    }\\n}\\n\",\"keccak256\":\"0xc1712bad50e00a898a1827770a20ca2f1034e746b1ff8999eef88be2eef43062\",\"license\":\"MIT\"},\"contracts/interfaces/ICloneNurseEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface ICloneNurseEnumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n}\\n\",\"keccak256\":\"0x4734c53e3fec96d40ecbe8f9ef0817bb1844d4fe406e1e84fa49ae7624dd511c\",\"license\":\"MIT\"},\"contracts/interfaces/ICloneNurses.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.5.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\\\";\\nimport \\\"./ICloneNurseEnumerable.sol\\\";\\nimport \\\"./ISupportable.sol\\\";\\nimport \\\"./INursePart.sol\\\";\\nimport \\\"./IMaidCoin.sol\\\";\\nimport \\\"./ITheMaster.sol\\\";\\n\\ninterface ICloneNurses is IERC721, IERC721Metadata, ICloneNurseEnumerable, ISupportable {\\n    event Claim(uint256 indexed id, address indexed claimer, uint256 reward);\\n    event ElongateLifetime(uint256 indexed id, uint256 rechargedLifetime, uint256 lastEndBlock, uint256 newEndBlock);\\n\\n    function nursePart() external view returns (INursePart);\\n\\n    function maidCoin() external view returns (IMaidCoin);\\n\\n    function theMaster() external view returns (ITheMaster);\\n\\n    function nurseTypes(uint256 typeId)\\n        external\\n        view\\n        returns (\\n            uint256 partCount,\\n            uint256 destroyReturn,\\n            uint256 power,\\n            uint256 lifetime\\n        );\\n\\n    function nurseTypeCount() external view returns (uint256);\\n\\n    function nurses(uint256 id)\\n        external\\n        view\\n        returns (\\n            uint256 nurseType,\\n            uint256 endBlock,\\n            uint256 lastClaimedBlock\\n        );\\n\\n    function assemble(uint256 nurseType, uint256 parts) external;\\n\\n    function assembleWithPermit(\\n        uint256 nurseType,\\n        uint256 parts,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    function elongateLifetime(uint256[] calldata ids, uint256[] calldata parts) external;\\n\\n    function destroy(uint256[] calldata ids, uint256[] calldata toIds) external;\\n\\n    function claim(uint256[] calldata ids) external;\\n\\n    function pendingReward(uint256 id) external view returns (uint256);\\n\\n    function findSupportingTo(address supporter) external view returns (address, uint256);\\n\\n    function exists(uint256 id) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x00a5e173aafbcfd71c8546ed559392317e7a4c276f757cc3485717ff23cb8a88\",\"license\":\"MIT\"},\"contracts/interfaces/IMaidCafe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.5.0;\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./IMaidCoin.sol\\\";\\n\\ninterface IMaidCafe {\\n    event Enter(address indexed user, uint256 amount);\\n    event Leave(address indexed user, uint256 share);\\n\\n    function maidCoin() external view returns (IMaidCoin);\\n\\n    function enter(uint256 _amount) external;\\n\\n    function enterWithPermit(\\n        uint256 _amount,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    function leave(uint256 _share) external;\\n}\\n\",\"keccak256\":\"0xccf021002b5756dd42aeee7c952941de70ddf443a6a5e7431a8bf27cd4bf8fbc\",\"license\":\"MIT\"},\"contracts/interfaces/IMaidCoin.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.5.0;\\n\\ninterface IMaidCoin {\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    function name() external pure returns (string memory);\\n\\n    function symbol() external pure returns (string memory);\\n\\n    function decimals() external pure returns (uint8);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function INITIAL_SUPPLY() external pure returns (uint256);\\n\\n    function balanceOf(address owner) external view returns (uint256);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n\\n    function nonces(address owner) external view returns (uint256);\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    function mint(address to, uint256 amount) external;\\n\\n    function burn(uint256 amount) external;\\n}\\n\",\"keccak256\":\"0x284891c8e5e10dfa97d04740857e6ba3958a5eb287172e78b027151bffad3a14\",\"license\":\"MIT\"},\"contracts/interfaces/IMaids.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.5.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\\\";\\nimport \\\"../uniswapv2/interfaces/IUniswapV2Pair.sol\\\";\\nimport \\\"./IMasterChefModule.sol\\\";\\n\\ninterface IMaids is IERC721, IERC721Metadata, IERC721Enumerable, IMasterChefModule {\\n    event Support(uint256 indexed id, uint256 lpTokenAmount);\\n    event Desupport(uint256 indexed id, uint256 lpTokenAmount);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n    function PERMIT_TYPEHASH() external view returns (bytes32);\\n\\n    function PERMIT_ALL_TYPEHASH() external view returns (bytes32);\\n\\n    function MAX_MAID_COUNT() external view returns (uint256);\\n\\n    function nonces(uint256 id) external view returns (uint256);\\n\\n    function noncesForAll(address owner) external view returns (uint256);\\n\\n    function maids(uint256 id)\\n        external\\n        view\\n        returns (\\n            uint256 originPower,\\n            uint256 supportedLPTokenAmount,\\n            uint256 sushiRewardDebt\\n        );\\n\\n    function powerAndLP(uint256 id) external view returns (uint256, uint256);\\n\\n    function support(uint256 id, uint256 lpTokenAmount) external;\\n\\n    function supportWithPermit(\\n        uint256 id,\\n        uint256 lpTokenAmount,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    function desupport(uint256 id, uint256 lpTokenAmount) external;\\n\\n    function claimSushiReward(uint256 id) external;\\n\\n    function pendingSushiReward(uint256 id) external view returns (uint256);\\n\\n    function permit(\\n        address spender,\\n        uint256 id,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    function permitAll(\\n        address owner,\\n        address spender,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n}\\n\",\"keccak256\":\"0x2c767e863abe65b8be69eb062115e782a2a628c08da219ccca7b61429ad171e6\",\"license\":\"MIT\"},\"contracts/interfaces/IMasterChef.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.12;\\npragma experimental ABIEncoderV2;\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IMasterChef {\\n    struct UserInfo {\\n        uint256 amount; // How many LP tokens the user has provided.\\n        uint256 rewardDebt; // Reward debt. See explanation below.\\n    }\\n\\n    struct PoolInfo {\\n        IERC20 lpToken; // Address of LP token contract.\\n        uint256 allocPoint; // How many allocation points assigned to this pool. SUSHI to distribute per block.\\n        uint256 lastRewardBlock; // Last block number that SUSHI distribution occurs.\\n        uint256 accSushiPerShare; // Accumulated SUSHI per share, times 1e12. See below.\\n    }\\n\\n    function poolInfo(uint256 pid) external view returns (IMasterChef.PoolInfo memory);\\n\\n    function userInfo(uint256 pid, address user) external view returns (IMasterChef.UserInfo memory);\\n\\n    function pendingSushi(uint256 _pid, address _user) external view returns (uint256);\\n\\n    function deposit(uint256 _pid, uint256 _amount) external;\\n\\n    function withdraw(uint256 _pid, uint256 _amount) external;\\n}\\n\",\"keccak256\":\"0xf0983f7cb6bb9cdd6ed934f3aba076a84666d55a3ce53e10c2bab2c70224f282\",\"license\":\"MIT\"},\"contracts/interfaces/IMasterChefModule.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.5.0;\\n\\nimport \\\"./IMasterChef.sol\\\";\\nimport \\\"../uniswapv2/interfaces/IUniswapV2Pair.sol\\\";\\n\\ninterface IMasterChefModule {\\n    function lpToken() external view returns (IUniswapV2Pair);\\n\\n    function sushi() external view returns (IERC20);\\n\\n    function sushiMasterChef() external view returns (IMasterChef);\\n\\n    function masterChefPid() external view returns (uint256);\\n\\n    function sushiLastRewardBlock() external view returns (uint256);\\n\\n    function accSushiPerShare() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x2c0111c97d7034bec9ac8917fc05da68a8e3ccee1fc1a0babfc4e1dccf993e2e\",\"license\":\"MIT\"},\"contracts/interfaces/INursePart.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.5.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\n\\ninterface INursePart is IERC1155 {\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n    function PERMIT_TYPEHASH() external view returns (bytes32);\\n\\n    function nonces(address owner) external view returns (uint256);\\n\\n    function mint(\\n        address to,\\n        uint256 id,\\n        uint256 amount\\n    ) external;\\n\\n    function burn(uint256 id, uint256 amount) external;\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n}\\n\",\"keccak256\":\"0x0e24f00e5125a1bb18e8956421ebe8b1fae931fcae00d4d84687d71f345321a8\",\"license\":\"MIT\"},\"contracts/interfaces/INurseRaid.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.5.0;\\n\\nimport \\\"./IMaids.sol\\\";\\nimport \\\"./IMaidCoin.sol\\\";\\nimport \\\"./IMaidCafe.sol\\\";\\nimport \\\"./INursePart.sol\\\";\\nimport \\\"./ICloneNurses.sol\\\";\\nimport \\\"./IRNG.sol\\\";\\n\\ninterface INurseRaid {\\n    event Create(\\n        uint256 indexed id,\\n        uint256 entranceFee,\\n        uint256 indexed nursePart,\\n        uint256 maxRewardCount,\\n        uint256 duration,\\n        uint256 endBlock\\n    );\\n    event Enter(address indexed challenger, uint256 indexed id, IMaids indexed maids, uint256 maidId);\\n    event Exit(address indexed challenger, uint256 indexed id);\\n    event ChangeMaidEfficacy(uint256 numerator, uint256 denominator);\\n\\n    function isMaidsApproved(IMaids maids) external view returns (bool);\\n\\n    function maidCoin() external view returns (IMaidCoin);\\n\\n    function maidCafe() external view returns (IMaidCafe);\\n\\n    function nursePart() external view returns (INursePart);\\n\\n    function rng() external view returns (IRNG);\\n\\n    function cloneNurses() external view returns (ICloneNurses);\\n\\n    function maidEfficacy() external view returns (uint256, uint256);\\n\\n    function raidCount() external view returns (uint256);\\n\\n    function create(\\n        uint256[] calldata entranceFee,\\n        uint256[] calldata nursePart,\\n        uint256[] calldata maxRewardCount,\\n        uint256[] calldata duration,\\n        uint256[] calldata endBlock\\n    ) external returns (uint256 id);\\n\\n    function enter(\\n        uint256 id,\\n        IMaids maids,\\n        uint256 maidId\\n    ) external;\\n\\n    function enterWithPermit(\\n        uint256 id,\\n        IMaids maids,\\n        uint256 maidId,\\n        uint256 deadline,\\n        uint8 v1,\\n        bytes32 r1,\\n        bytes32 s1,\\n        uint8 v2,\\n        bytes32 r2,\\n        bytes32 s2\\n    ) external;\\n\\n    function enterWithPermitAll(\\n        uint256 id,\\n        IMaids maids,\\n        uint256 maidId,\\n        uint256 deadline,\\n        uint8 v1,\\n        bytes32 r1,\\n        bytes32 s1,\\n        uint8 v2,\\n        bytes32 r2,\\n        bytes32 s2\\n    ) external;\\n\\n    function checkDone(uint256 id) external view returns (bool);\\n\\n    function exit(uint256[] calldata ids) external;\\n}\\n\",\"keccak256\":\"0xcefc24009b04bdd23d3527f10bec434359e9b34e304b97bf36d103d11e62efae\",\"license\":\"MIT\"},\"contracts/interfaces/IRNG.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.5.0;\\n\\ninterface IRNG {\\n    function generateRandomNumber(uint256 seed, address sender) external returns (uint256);\\n}\\n\",\"keccak256\":\"0x4d28f475eb010006b3c43da394519bb96ac95e22f53862e044658a671d1a4616\",\"license\":\"MIT\"},\"contracts/interfaces/IRewardCalculator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.5.0;\\n\\ninterface IRewardCalculator {\\n    function rewardPerBlock() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x0728d3e4dcd0ec2bb792bdbdefd94a138bab687c46994cbc2cb4f5da96332b99\",\"license\":\"MIT\"},\"contracts/interfaces/ISupportable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.5.0;\\n\\ninterface ISupportable {\\n    event SupportTo(address indexed supporter, uint256 indexed to);\\n    event ChangeSupportingRoute(uint256 indexed from, uint256 indexed to);\\n    event ChangeSupportedPower(uint256 indexed id, int256 power);\\n    event TransferSupportingRewards(address indexed supporter, uint256 indexed id, uint256 amounts);\\n\\n    function supportingRoute(uint256 id) external view returns (uint256);\\n\\n    function supportingTo(address supporter) external view returns (uint256);\\n\\n    function supportedPower(uint256 id) external view returns (uint256);\\n\\n    function totalRewardsFromSupporters(uint256 id) external view returns (uint256);\\n\\n    function setSupportingTo(\\n        address supporter,\\n        uint256 to,\\n        uint256 amounts\\n    ) external;\\n\\n    function checkSupportingRoute(address supporter) external returns (address, uint256);\\n\\n    function changeSupportedPower(address supporter, int256 power) external;\\n\\n    function shareRewards(\\n        uint256 pending,\\n        address supporter,\\n        uint8 supportingRatio\\n    ) external returns (address nurseOwner, uint256 amountToNurseOwner);\\n}\\n\",\"keccak256\":\"0x6eee1f841be8275ed0182e16f6338ef0f111bb5ce1e19aaba6e8955f1bfc3de7\",\"license\":\"MIT\"},\"contracts/interfaces/ISushiGirlsLingerieGIrls.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.5.0;\\n\\ninterface ISushiGirls {\\n    function sushiGirls(uint256 id)\\n        external\\n        view\\n        returns (\\n            uint256 originPower,\\n            uint256 supportedLPTokenAmount,\\n            uint256 sushiRewardDebt\\n        );\\n}\\n\\ninterface ILingerieGirls {\\n    function lingerieGirls(uint256 id)\\n        external\\n        view\\n        returns (\\n            uint256 originPower,\\n            uint256 supportedLPTokenAmount,\\n            uint256 sushiRewardDebt\\n        );\\n}\\n\",\"keccak256\":\"0xbafabd651be4021f8cf5f27f6d11a98e6ee8a8884eae84ecc125a2718a77430e\",\"license\":\"MIT\"},\"contracts/interfaces/ITheMaster.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.5.0;\\n\\nimport \\\"./IMaidCoin.sol\\\";\\nimport \\\"./IRewardCalculator.sol\\\";\\nimport \\\"./ISupportable.sol\\\";\\nimport \\\"./IMasterChefModule.sol\\\";\\n\\ninterface ITheMaster is IMasterChefModule {\\n    event ChangeRewardCalculator(address addr);\\n\\n    event Add(\\n        uint256 indexed pid,\\n        address addr,\\n        bool indexed delegate,\\n        bool indexed mintable,\\n        address supportable,\\n        uint8 supportingRatio,\\n        uint256 allocPoint\\n    );\\n\\n    event Set(uint256 indexed pid, uint256 allocPoint);\\n    event Deposit(uint256 indexed userId, uint256 indexed pid, uint256 amount);\\n    event Withdraw(uint256 indexed userId, uint256 indexed pid, uint256 amount);\\n    event EmergencyWithdraw(address indexed user, uint256 indexed pid, uint256 amount);\\n\\n    event Support(address indexed supporter, uint256 indexed pid, uint256 amount);\\n    event Desupport(address indexed supporter, uint256 indexed pid, uint256 amount);\\n    event EmergencyDesupport(address indexed user, uint256 indexed pid, uint256 amount);\\n\\n    event SetIsSupporterPool(uint256 indexed pid, bool indexed status);\\n\\n    function initialRewardPerBlock() external view returns (uint256);\\n\\n    function decreasingInterval() external view returns (uint256);\\n\\n    function startBlock() external view returns (uint256);\\n\\n    function maidCoin() external view returns (IMaidCoin);\\n\\n    function rewardCalculator() external view returns (IRewardCalculator);\\n\\n    function poolInfo(uint256 pid)\\n        external\\n        view\\n        returns (\\n            address addr,\\n            bool delegate,\\n            ISupportable supportable,\\n            uint8 supportingRatio,\\n            uint256 allocPoint,\\n            uint256 lastRewardBlock,\\n            uint256 accRewardPerShare,\\n            uint256 supply\\n        );\\n\\n    function poolCount() external view returns (uint256);\\n\\n    function userInfo(uint256 pid, uint256 user) external view returns (uint256 amount, uint256 rewardDebt);\\n\\n    function mintableByAddr(address addr) external view returns (bool);\\n\\n    function totalAllocPoint() external view returns (uint256);\\n\\n    function pendingReward(uint256 pid, uint256 userId) external view returns (uint256);\\n\\n    function rewardPerBlock() external view returns (uint256);\\n\\n    function changeRewardCalculator(address addr) external;\\n\\n    function add(\\n        address addr,\\n        bool delegate,\\n        bool mintable,\\n        address supportable,\\n        uint8 supportingRatio,\\n        uint256 allocPoint\\n    ) external;\\n\\n    function set(uint256[] calldata pid, uint256[] calldata allocPoint) external;\\n\\n    function deposit(\\n        uint256 pid,\\n        uint256 amount,\\n        uint256 userId\\n    ) external;\\n\\n    function depositWithPermit(\\n        uint256 pid,\\n        uint256 amount,\\n        uint256 userId,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    function depositWithPermitMax(\\n        uint256 pid,\\n        uint256 amount,\\n        uint256 userId,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    function withdraw(\\n        uint256 pid,\\n        uint256 amount,\\n        uint256 userId\\n    ) external;\\n\\n    function emergencyWithdraw(uint256 pid) external;\\n\\n    function support(\\n        uint256 pid,\\n        uint256 amount,\\n        uint256 supportTo\\n    ) external;\\n\\n    function supportWithPermit(\\n        uint256 pid,\\n        uint256 amount,\\n        uint256 supportTo,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    function supportWithPermitMax(\\n        uint256 pid,\\n        uint256 amount,\\n        uint256 supportTo,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    function desupport(uint256 pid, uint256 amount) external;\\n\\n    function emergencyDesupport(uint256 pid) external;\\n\\n    function mint(address to, uint256 amount) external;\\n\\n    function claimSushiReward(uint256 id) external;\\n\\n    function pendingSushiReward(uint256 id) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x4fe6b7d47f4c60c9e3bb7addafea4f0425bf7ec19c219647db98ab81adb0f95b\",\"license\":\"MIT\"},\"contracts/libraries/MaidPower.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.5;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"../interfaces/IMaids.sol\\\";\\nimport \\\"../interfaces/ISushiGirlsLingerieGIrls.sol\\\";\\n\\nabstract contract MaidPower is Ownable {\\n    uint256 public lpTokenToMaidPower = 1000;   //1000 : 1LP(1e18 as wei) => 1Power\\n    address public immutable sushiGirls;\\n    address public immutable lingerieGirls;\\n\\n    event ChangeLPTokenToMaidPower(uint256 value);\\n\\n    constructor(address _sushiGirls, address _lingerieGirls) {\\n        sushiGirls = _sushiGirls;\\n        lingerieGirls = _lingerieGirls;\\n    }\\n\\n    function changeLPTokenToMaidPower(uint256 value) external onlyOwner {\\n        lpTokenToMaidPower = value;\\n        emit ChangeLPTokenToMaidPower(value);\\n    }\\n\\n    function powerOfMaids(IMaids maids, uint256 id) public view returns (uint256) {\\n        uint256 originPower;\\n        uint256 supportedLPAmount;\\n\\n        if (address(maids) == sushiGirls) {\\n            (originPower, supportedLPAmount,) = ISushiGirls(sushiGirls).sushiGirls(id);\\n        } else if (address(maids) == lingerieGirls) {\\n            (originPower, supportedLPAmount,) = ILingerieGirls(lingerieGirls).lingerieGirls(id);\\n        } else {\\n            (originPower, supportedLPAmount) = maids.powerAndLP(id);\\n        }\\n\\n        return originPower + (supportedLPAmount * lpTokenToMaidPower) / 1e21;\\n    }\\n}\\n\",\"keccak256\":\"0xc145cb0e02c7cdf49364eec8b209f695b10676d5921406f5f6036d8ad7de0cf4\",\"license\":\"MIT\"},\"contracts/uniswapv2/interfaces/IUniswapV2Pair.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    function name() external pure returns (string memory);\\n\\n    function symbol() external pure returns (string memory);\\n\\n    function decimals() external pure returns (uint8);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address owner) external view returns (uint256);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n\\n    function nonces(address owner) external view returns (uint256);\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\\n    event Burn(address indexed sender, uint256 amount0, uint256 amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint256 amount0In,\\n        uint256 amount1In,\\n        uint256 amount0Out,\\n        uint256 amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\\n\\n    function factory() external view returns (address);\\n\\n    function token0() external view returns (address);\\n\\n    function token1() external view returns (address);\\n\\n    function getReserves()\\n        external\\n        view\\n        returns (\\n            uint112 reserve0,\\n            uint112 reserve1,\\n            uint32 blockTimestampLast\\n        );\\n\\n    function price0CumulativeLast() external view returns (uint256);\\n\\n    function price1CumulativeLast() external view returns (uint256);\\n\\n    function kLast() external view returns (uint256);\\n\\n    function mint(address to) external returns (uint256 liquidity);\\n\\n    function burn(address to) external returns (uint256 amount0, uint256 amount1);\\n\\n    function swap(\\n        uint256 amount0Out,\\n        uint256 amount1Out,\\n        address to,\\n        bytes calldata data\\n    ) external;\\n\\n    function skim(address to) external;\\n\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\",\"keccak256\":\"0x1acf4ebf8ce4e52df2c1dbc3aa76a0895657471001631c2e90121cee574180af\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6103e860018181556101606040526101208190526101408290526007556008553480156200002c57600080fd5b506040516200246b3803806200246b8339810160408190526200004f9162000102565b600080546001600160a01b03191633908117825560405184928492918291907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a350606091821b6001600160601b031990811660805290821b811660a05297811b881660c052600580546001600160a01b03199081166001600160a01b03998a161790915595811b881660e0529390931b9095166101005260068054909316931692909217905550620001c69050565b600080600080600080600060e0888a0312156200011e57600080fd5b87516200012b81620001ad565b60208901519097506200013e81620001ad565b60408901519096506200015181620001ad565b60608901519095506200016481620001ad565b60808901519094506200017781620001ad565b60a08901519093506200018a81620001ad565b60c08901519092506200019d81620001ad565b8091505092959891949750929550565b6001600160a01b0381168114620001c357600080fd5b50565b60805160601c60a05160601c60c05160601c60e05160601c6101005160601c612204620002676000396000818161024a01526108e4015260008181610453015261069601526000818161034d01528181610c1001528181610fd80152818161162e015281816116e20152611b2a0152600081816103150152818161118f01526111dd0152600081816103ba015281816110b3015261110001526122046000f3fe608060405234801561001057600080fd5b50600436106101cf5760003560e01c80638b14d68511610104578063bab1a195116100a2578063d605787b11610071578063d605787b146104c9578063dda368c6146104dc578063e20ddcac146104ef578063f2fde38b1461050257600080fd5b8063bab1a19514610488578063bd36095a14610490578063c562a684146104a3578063d15d2e43146104b657600080fd5b806396d32cdd116100de57806396d32cdd146104005780639f20ae8314610413578063b24606b81461044e578063b5aa5d751461047557600080fd5b80638b14d685146103b55780638da5cb5b146103dc57806396c52a45146103ed57600080fd5b80634b9b586e11610171578063715018a61161014b578063715018a614610340578063849e5aff146103485780638656b2b31461036f5780638aacfa521461039257600080fd5b80634b9b586e146102aa578063673217a9146103105780636fb49f091461033757600080fd5b806338f65246116101ad57806338f6524614610222578063419ec3071461024557806343c5c285146102845780634b7388e61461029757600080fd5b806318c08f26146101d4578063230eb4fd146101e9578063265bce0a1461020f575b600080fd5b6101e76101e2366004611c32565b610515565b005b6101fc6101f7366004611c74565b610840565b6040519081526020015b60405180910390f35b6101e761021d366004611e4d565b610c0e565b600754600854610230919082565b60408051928352602083019190915201610206565b61026c7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610206565b6101e7610292366004611c32565b610d62565b6101e76102a5366004611c32565b610dfe565b6102ed6102b8366004611de5565b600360209081526000928352604080842090915290825290208054600182015460029092015490916001600160a01b03169083565b604080519384526001600160a01b03909216602084015290820152606001610206565b61026c7f000000000000000000000000000000000000000000000000000000000000000081565b6101fc60015481565b6101e7610e9a565b61026c7f000000000000000000000000000000000000000000000000000000000000000081565b61038261037d366004611db3565b610f0e565b6040519015158152602001610206565b6103826103a0366004611c0e565b60046020526000908152604090205460ff1681565b61026c7f000000000000000000000000000000000000000000000000000000000000000081565b6000546001600160a01b031661026c565b6101e76103fb366004611e4d565b610fc1565b6101fc61040e366004611d87565b6110ac565b610426610421366004611db3565b6112c8565b604080519586526020860194909452928401919091526060830152608082015260a001610206565b61026c7f000000000000000000000000000000000000000000000000000000000000000081565b6101e7610483366004611ed8565b611309565b6002546101fc565b60055461026c906001600160a01b031681565b6101e76104b1366004611c0e565b61138b565b6101e76104c4366004611e15565b6113d7565b60065461026c906001600160a01b031681565b6101e76104ea366004611db3565b6117b8565b6101e76104fd366004611c0e565b61181d565b6101e7610510366004611c0e565b611869565b60005b8181101561083b57600060036000858585818110610538576105386121a0565b60209081029290920135835250818101929092526040908101600090812033825283528190208151606081018352815480825260018301546001600160a01b0316948201949094526002909101549181019190915291506105f15760405162461bcd60e51b815260206004820152602860248201527f4e75727365526169643a204e6f742070617274696369706174696e6720696e206044820152671d1a19481c985a5960c21b60648201526084015b60405180910390fd5b60006002858585818110610607576106076121a0565b905060200201358154811061061e5761061e6121a0565b9060005260206000209060050201905061063c816003015483611953565b156106fc57600061066a868686818110610658576106586121a0565b905060200201358360020154336119cd565b6001830154604051630ab714fb60e11b81523360048201526024810191909152604481018290529091507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063156e29f690606401600060405180830381600087803b1580156106e257600080fd5b505af11580156106f6573d6000803e3d6000fd5b50505050505b60208201516001600160a01b03161561078257602082015160408084015190516323b872dd60e01b815230600482015233602482015260448101919091526001600160a01b03909116906323b872dd90606401600060405180830381600087803b15801561076957600080fd5b505af115801561077d573d6000803e3d6000fd5b505050505b60036000868686818110610798576107986121a0565b60209081029290920135835250818101929092526040908101600090812033825290925281208181556001810180546001600160a01b0319169055600201558484848181106107e9576107e96121a0565b90506020020135336001600160a01b03167f22d324652c93739755cf4581508b60875ebdd78c20c0cff5cf8e23452b29963160405160405180910390a35050808061083390612145565b915050610518565b505050565b600080546001600160a01b0316331461086b5760405162461bcd60e51b81526004016105e890611fc3565b8960005b81811015610bfe5760ff89898381811061088b5761088b6121a0565b90506020020135106108df5760405162461bcd60e51b815260206004820152601960248201527f4e75727365526169643a20496e76616c6964206e756d6265720000000000000060448201526064016105e8565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663cd5a146e8e8e86818110610923576109236121a0565b905060200201356040518263ffffffff1660e01b815260040161094891815260200190565b60806040518083038186803b15801561096057600080fd5b505afa158015610974573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109989190611f4c565b505091509150818b8b858181106109b1576109b16121a0565b90506020020135826109c3919061210f565b6109cd9190612010565b8f8f858181106109df576109df6121a0565b905060200201351015610a345760405162461bcd60e51b815260206004820152601f60248201527f4e75727365526169643a204665652073686f756c64206265206869676865720060448201526064016105e8565b5050600280549050925060026040518060a001604052808f8f85818110610a5d57610a5d6121a0565b9050602002013581526020018d8d85818110610a7b57610a7b6121a0565b9050602002013581526020018b8b85818110610a9957610a996121a0565b905060200201358152602001898985818110610ab757610ab76121a0565b905060200201358152602001878785818110610ad557610ad56121a0565b6020908102929092013590925283546001818101865560009586529482902084516005909202019081559083015193810193909355506040810151600283015560608101516003830155608001516004909101558a8a82818110610b3b57610b3b6121a0565b90506020020135837fe67bc7994d282c0fbf31557abeca3bf42c2dc7e627c6aff056739bfd6609b5d68f8f85818110610b7657610b766121a0565b905060200201358c8c86818110610b8f57610b8f6121a0565b905060200201358b8b87818110610ba857610ba86121a0565b905060200201358a8a88818110610bc157610bc16121a0565b604080519687526020878101969096528601939093525091020135606082015260800160405180910390a380610bf681612145565b91505061086f565b50509a9950505050505050505050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d505accf333060028e81548110610c5257610c526121a0565b9060005260206000209060050201600001548b8b8b8b6040518863ffffffff1660e01b8152600401610c8a9796959493929190611f82565b600060405180830381600087803b158015610ca457600080fd5b505af1158015610cb8573d6000803e3d6000fd5b505050506001600160a01b03891615610d4b57604051637ac2ff7b60e01b8152336004820152602481018990526044810188905260ff841660648201526084810183905260a481018290526001600160a01b038a1690637ac2ff7b9060c4015b600060405180830381600087803b158015610d3257600080fd5b505af1158015610d46573d6000803e3d6000fd5b505050505b610d568a8a8a6113d7565b50505050505050505050565b6000546001600160a01b03163314610d8c5760405162461bcd60e51b81526004016105e890611fc3565b60005b8181101561083b57600160046000858585818110610daf57610daf6121a0565b9050602002016020810190610dc49190611c0e565b6001600160a01b031681526020810191909152604001600020805460ff1916911515919091179055610df7600182611ff8565b9050610d8f565b6000546001600160a01b03163314610e285760405162461bcd60e51b81526004016105e890611fc3565b60005b8181101561083b57600060046000858585818110610e4b57610e4b6121a0565b9050602002016020810190610e609190611c0e565b6001600160a01b031681526020810191909152604001600020805460ff1916911515919091179055610e93600182611ff8565b9050610e2b565b6000546001600160a01b03163314610ec45760405162461bcd60e51b81526004016105e890611fc3565b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b60008060028381548110610f2457610f246121a0565b600091825260208083206040805160a0810182526005909402909101805484526001808201548585015260028083015486850152600380840154606080890191825260049095015460808901528b89529086528488203389528652968490208451938401855280548452918201546001600160a01b03169483019490945290920154908201529151909250610fb99082611953565b949350505050565b60405163d505accf60e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063d505accf9061101b9033903090600019908d908d908d908d90600401611f82565b600060405180830381600087803b15801561103557600080fd5b505af1158015611049573d6000803e3d6000fd5b505050506001600160a01b03891615610d4b5760405163aba0784760e01b81523360048201523060248201526044810188905260ff841660648201526084810183905260a481018290526001600160a01b038a169063aba078479060c401610d18565b60008060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316856001600160a01b0316141561118d57604051629159f560e01b8152600481018590527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690629159f5906024015b60606040518083038186803b15801561114a57600080fd5b505afa15801561115e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111829190611f1e565b509092509050611291565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316856001600160a01b0316141561121457604051633a791c0560e11b8152600481018590527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906374f2380a90602401611132565b604051633d3b6b2560e11b8152600481018590526001600160a01b03861690637a76d64a90602401604080518083038186803b15801561125357600080fd5b505afa158015611267573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061128b9190611efa565b90925090505b683635c9adc5dea00000600154826112a9919061210f565b6112b39190612010565b6112bd9083611ff8565b925050505b92915050565b600281815481106112d857600080fd5b6000918252602090912060059091020180546001820154600283015460038401546004909401549294509092909185565b6000546001600160a01b031633146113335760405162461bcd60e51b81526004016105e890611fc3565b60408051808201825283815260209081018390526007849055600883905581518481529081018390527fb8cded0f783883feb28d3a46c16a1394521d97ce9b29f85f4f9979eaf4b32e26910160405180910390a15050565b6000546001600160a01b031633146113b55760405162461bcd60e51b81526004016105e890611fc3565b600680546001600160a01b0319166001600160a01b0392909216919091179055565b816001600160a01b038116158061140657506001600160a01b03811660009081526004602052604090205460ff165b61145e5760405162461bcd60e51b8152602060048201526024808201527f4e75727365526169643a20546865206d61696473206973206e6f7420617070726044820152631bdd995960e21b60648201526084016105e8565b600060028581548110611473576114736121a0565b90600052602060002090600502019050806004015443106114d65760405162461bcd60e51b815260206004820152601960248201527f4e75727365526169643a20526169642068617320656e6465640000000000000060448201526064016105e8565b60008581526003602090815260408083203384529091529020541561153d5760405162461bcd60e51b815260206004820152601e60248201527f4e75727365526169643a205261696420697320696e2070726f6772657373000060448201526064016105e8565b604080516060810182524381526001600160a01b03868116602080840182815284860189815260008c8152600384528781203382529093529590912093518455516001840180546001600160a01b031916919093161790915591516002909101551561160a576040516323b872dd60e01b8152336004820152306024820152604481018490526001600160a01b038516906323b872dd90606401600060405180830381600087803b1580156115f157600080fd5b505af1158015611605573d6000803e3d6000fd5b505050505b80546040516323b872dd60e01b8152336004820152306024820152604481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906323b872dd90606401602060405180830381600087803b15801561167a57600080fd5b505af115801561168e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116b29190611d65565b5060006103e86116c383600361210f565b6116cd9190612010565b90506116d881611b01565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000166342966c68611711838561212e565b6040518263ffffffff1660e01b815260040161172f91815260200190565b600060405180830381600087803b15801561174957600080fd5b505af115801561175d573d6000803e3d6000fd5b50505050856001600160a01b031687336001600160a01b03167fdbaee2f8bdfe2e27e53a55ba816b9e0b74c12780d27d142b35023fa491602d61886040516117a791815260200190565b60405180910390a450505050505050565b6000546001600160a01b031633146117e25760405162461bcd60e51b81526004016105e890611fc3565b60018190556040518181527f4cc6f61797d7bcd39a96045b3f7c8cb2feed2fe23d042b62757ab6499b07cf559060200160405180910390a150565b6000546001600160a01b031633146118475760405162461bcd60e51b81526004016105e890611fc3565b600580546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b031633146118935760405162461bcd60e51b81526004016105e890611fc3565b6001600160a01b0381166118f85760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016105e8565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b60208101516000906001600160a01b031661197f5781518390611976904361212e565b101590506112c2565b6008546007546020840151604085015161199991906110ac565b6119a3908661210f565b6119ad919061210f565b6119b79190612010565b6119c1908461212e565b8251611976904361212e565b60008060016119dd856002612067565b6119e7919061212e565b6119f290600261210f565b6006546040516344a0a49160e01b8152600481018890526001600160a01b038681166024830152929350600092849216906344a0a49190604401602060405180830381600087803b158015611a4657600080fd5b505af1158015611a5a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a7e9190611dcc565b611a889190612160565b611a93906001611ff8565b90506000805b81831115611af657611aac600182611ff8565b905080611aba886001611ff8565b611ac4919061212e565b611acf906002612067565b611ada886001611ff8565b611ae5906002612067565b611aef919061212e565b9150611a99565b979650505050505050565b60055460405163a9059cbb60e01b81526001600160a01b039182166004820152602481018390527f00000000000000000000000000000000000000000000000000000000000000009091169063a9059cbb90604401602060405180830381600087803b158015611b7057600080fd5b505af1158015611b84573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ba89190611d65565b5050565b60008083601f840112611bbe57600080fd5b50813567ffffffffffffffff811115611bd657600080fd5b6020830191508360208260051b8501011115611bf157600080fd5b9250929050565b803560ff81168114611c0957600080fd5b919050565b600060208284031215611c2057600080fd5b8135611c2b816121b6565b9392505050565b60008060208385031215611c4557600080fd5b823567ffffffffffffffff811115611c5c57600080fd5b611c6885828601611bac565b90969095509350505050565b60008060008060008060008060008060a08b8d031215611c9357600080fd5b8a3567ffffffffffffffff80821115611cab57600080fd5b611cb78e838f01611bac565b909c509a5060208d0135915080821115611cd057600080fd5b611cdc8e838f01611bac565b909a50985060408d0135915080821115611cf557600080fd5b611d018e838f01611bac565b909850965060608d0135915080821115611d1a57600080fd5b611d268e838f01611bac565b909650945060808d0135915080821115611d3f57600080fd5b50611d4c8d828e01611bac565b915080935050809150509295989b9194979a5092959850565b600060208284031215611d7757600080fd5b81518015158114611c2b57600080fd5b60008060408385031215611d9a57600080fd5b8235611da5816121b6565b946020939093013593505050565b600060208284031215611dc557600080fd5b5035919050565b600060208284031215611dde57600080fd5b5051919050565b60008060408385031215611df857600080fd5b823591506020830135611e0a816121b6565b809150509250929050565b600080600060608486031215611e2a57600080fd5b833592506020840135611e3c816121b6565b929592945050506040919091013590565b6000806000806000806000806000806101408b8d031215611e6d57600080fd5b8a35995060208b0135611e7f816121b6565b985060408b0135975060608b01359650611e9b60808c01611bf8565b955060a08b0135945060c08b01359350611eb760e08c01611bf8565b92506101008b013591506101208b013590509295989b9194979a5092959850565b60008060408385031215611eeb57600080fd5b50508035926020909101359150565b60008060408385031215611f0d57600080fd5b505080516020909101519092909150565b600080600060608486031215611f3357600080fd5b8351925060208401519150604084015190509250925092565b60008060008060808587031215611f6257600080fd5b505082516020840151604085015160609095015191969095509092509050565b6001600160a01b0397881681529590961660208601526040850193909352606084019190915260ff16608083015260a082015260c081019190915260e00190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6000821982111561200b5761200b612174565b500190565b60008261201f5761201f61218a565b500490565b600181815b8085111561205f57816000190482111561204557612045612174565b8085161561205257918102915b93841c9390800290612029565b509250929050565b6000611c2b838360008261207d575060016112c2565b8161208a575060006112c2565b81600181146120a057600281146120aa576120c6565b60019150506112c2565b60ff8411156120bb576120bb612174565b50506001821b6112c2565b5060208310610133831016604e8410600b84101617156120e9575081810a6112c2565b6120f38383612024565b806000190482111561210757612107612174565b029392505050565b600081600019048311821515161561212957612129612174565b500290565b60008282101561214057612140612174565b500390565b600060001982141561215957612159612174565b5060010190565b60008261216f5761216f61218a565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052603260045260246000fd5b6001600160a01b03811681146121cb57600080fd5b5056fea2646970667358221220d58e991a72b8e5c162a60a7016bae3af608388272494f2e8b84e89bb10df0d9564736f6c63430008050033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101cf5760003560e01c80638b14d68511610104578063bab1a195116100a2578063d605787b11610071578063d605787b146104c9578063dda368c6146104dc578063e20ddcac146104ef578063f2fde38b1461050257600080fd5b8063bab1a19514610488578063bd36095a14610490578063c562a684146104a3578063d15d2e43146104b657600080fd5b806396d32cdd116100de57806396d32cdd146104005780639f20ae8314610413578063b24606b81461044e578063b5aa5d751461047557600080fd5b80638b14d685146103b55780638da5cb5b146103dc57806396c52a45146103ed57600080fd5b80634b9b586e11610171578063715018a61161014b578063715018a614610340578063849e5aff146103485780638656b2b31461036f5780638aacfa521461039257600080fd5b80634b9b586e146102aa578063673217a9146103105780636fb49f091461033757600080fd5b806338f65246116101ad57806338f6524614610222578063419ec3071461024557806343c5c285146102845780634b7388e61461029757600080fd5b806318c08f26146101d4578063230eb4fd146101e9578063265bce0a1461020f575b600080fd5b6101e76101e2366004611c32565b610515565b005b6101fc6101f7366004611c74565b610840565b6040519081526020015b60405180910390f35b6101e761021d366004611e4d565b610c0e565b600754600854610230919082565b60408051928352602083019190915201610206565b61026c7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610206565b6101e7610292366004611c32565b610d62565b6101e76102a5366004611c32565b610dfe565b6102ed6102b8366004611de5565b600360209081526000928352604080842090915290825290208054600182015460029092015490916001600160a01b03169083565b604080519384526001600160a01b03909216602084015290820152606001610206565b61026c7f000000000000000000000000000000000000000000000000000000000000000081565b6101fc60015481565b6101e7610e9a565b61026c7f000000000000000000000000000000000000000000000000000000000000000081565b61038261037d366004611db3565b610f0e565b6040519015158152602001610206565b6103826103a0366004611c0e565b60046020526000908152604090205460ff1681565b61026c7f000000000000000000000000000000000000000000000000000000000000000081565b6000546001600160a01b031661026c565b6101e76103fb366004611e4d565b610fc1565b6101fc61040e366004611d87565b6110ac565b610426610421366004611db3565b6112c8565b604080519586526020860194909452928401919091526060830152608082015260a001610206565b61026c7f000000000000000000000000000000000000000000000000000000000000000081565b6101e7610483366004611ed8565b611309565b6002546101fc565b60055461026c906001600160a01b031681565b6101e76104b1366004611c0e565b61138b565b6101e76104c4366004611e15565b6113d7565b60065461026c906001600160a01b031681565b6101e76104ea366004611db3565b6117b8565b6101e76104fd366004611c0e565b61181d565b6101e7610510366004611c0e565b611869565b60005b8181101561083b57600060036000858585818110610538576105386121a0565b60209081029290920135835250818101929092526040908101600090812033825283528190208151606081018352815480825260018301546001600160a01b0316948201949094526002909101549181019190915291506105f15760405162461bcd60e51b815260206004820152602860248201527f4e75727365526169643a204e6f742070617274696369706174696e6720696e206044820152671d1a19481c985a5960c21b60648201526084015b60405180910390fd5b60006002858585818110610607576106076121a0565b905060200201358154811061061e5761061e6121a0565b9060005260206000209060050201905061063c816003015483611953565b156106fc57600061066a868686818110610658576106586121a0565b905060200201358360020154336119cd565b6001830154604051630ab714fb60e11b81523360048201526024810191909152604481018290529091507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063156e29f690606401600060405180830381600087803b1580156106e257600080fd5b505af11580156106f6573d6000803e3d6000fd5b50505050505b60208201516001600160a01b03161561078257602082015160408084015190516323b872dd60e01b815230600482015233602482015260448101919091526001600160a01b03909116906323b872dd90606401600060405180830381600087803b15801561076957600080fd5b505af115801561077d573d6000803e3d6000fd5b505050505b60036000868686818110610798576107986121a0565b60209081029290920135835250818101929092526040908101600090812033825290925281208181556001810180546001600160a01b0319169055600201558484848181106107e9576107e96121a0565b90506020020135336001600160a01b03167f22d324652c93739755cf4581508b60875ebdd78c20c0cff5cf8e23452b29963160405160405180910390a35050808061083390612145565b915050610518565b505050565b600080546001600160a01b0316331461086b5760405162461bcd60e51b81526004016105e890611fc3565b8960005b81811015610bfe5760ff89898381811061088b5761088b6121a0565b90506020020135106108df5760405162461bcd60e51b815260206004820152601960248201527f4e75727365526169643a20496e76616c6964206e756d6265720000000000000060448201526064016105e8565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663cd5a146e8e8e86818110610923576109236121a0565b905060200201356040518263ffffffff1660e01b815260040161094891815260200190565b60806040518083038186803b15801561096057600080fd5b505afa158015610974573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109989190611f4c565b505091509150818b8b858181106109b1576109b16121a0565b90506020020135826109c3919061210f565b6109cd9190612010565b8f8f858181106109df576109df6121a0565b905060200201351015610a345760405162461bcd60e51b815260206004820152601f60248201527f4e75727365526169643a204665652073686f756c64206265206869676865720060448201526064016105e8565b5050600280549050925060026040518060a001604052808f8f85818110610a5d57610a5d6121a0565b9050602002013581526020018d8d85818110610a7b57610a7b6121a0565b9050602002013581526020018b8b85818110610a9957610a996121a0565b905060200201358152602001898985818110610ab757610ab76121a0565b905060200201358152602001878785818110610ad557610ad56121a0565b6020908102929092013590925283546001818101865560009586529482902084516005909202019081559083015193810193909355506040810151600283015560608101516003830155608001516004909101558a8a82818110610b3b57610b3b6121a0565b90506020020135837fe67bc7994d282c0fbf31557abeca3bf42c2dc7e627c6aff056739bfd6609b5d68f8f85818110610b7657610b766121a0565b905060200201358c8c86818110610b8f57610b8f6121a0565b905060200201358b8b87818110610ba857610ba86121a0565b905060200201358a8a88818110610bc157610bc16121a0565b604080519687526020878101969096528601939093525091020135606082015260800160405180910390a380610bf681612145565b91505061086f565b50509a9950505050505050505050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d505accf333060028e81548110610c5257610c526121a0565b9060005260206000209060050201600001548b8b8b8b6040518863ffffffff1660e01b8152600401610c8a9796959493929190611f82565b600060405180830381600087803b158015610ca457600080fd5b505af1158015610cb8573d6000803e3d6000fd5b505050506001600160a01b03891615610d4b57604051637ac2ff7b60e01b8152336004820152602481018990526044810188905260ff841660648201526084810183905260a481018290526001600160a01b038a1690637ac2ff7b9060c4015b600060405180830381600087803b158015610d3257600080fd5b505af1158015610d46573d6000803e3d6000fd5b505050505b610d568a8a8a6113d7565b50505050505050505050565b6000546001600160a01b03163314610d8c5760405162461bcd60e51b81526004016105e890611fc3565b60005b8181101561083b57600160046000858585818110610daf57610daf6121a0565b9050602002016020810190610dc49190611c0e565b6001600160a01b031681526020810191909152604001600020805460ff1916911515919091179055610df7600182611ff8565b9050610d8f565b6000546001600160a01b03163314610e285760405162461bcd60e51b81526004016105e890611fc3565b60005b8181101561083b57600060046000858585818110610e4b57610e4b6121a0565b9050602002016020810190610e609190611c0e565b6001600160a01b031681526020810191909152604001600020805460ff1916911515919091179055610e93600182611ff8565b9050610e2b565b6000546001600160a01b03163314610ec45760405162461bcd60e51b81526004016105e890611fc3565b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b60008060028381548110610f2457610f246121a0565b600091825260208083206040805160a0810182526005909402909101805484526001808201548585015260028083015486850152600380840154606080890191825260049095015460808901528b89529086528488203389528652968490208451938401855280548452918201546001600160a01b03169483019490945290920154908201529151909250610fb99082611953565b949350505050565b60405163d505accf60e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063d505accf9061101b9033903090600019908d908d908d908d90600401611f82565b600060405180830381600087803b15801561103557600080fd5b505af1158015611049573d6000803e3d6000fd5b505050506001600160a01b03891615610d4b5760405163aba0784760e01b81523360048201523060248201526044810188905260ff841660648201526084810183905260a481018290526001600160a01b038a169063aba078479060c401610d18565b60008060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316856001600160a01b0316141561118d57604051629159f560e01b8152600481018590527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690629159f5906024015b60606040518083038186803b15801561114a57600080fd5b505afa15801561115e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111829190611f1e565b509092509050611291565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316856001600160a01b0316141561121457604051633a791c0560e11b8152600481018590527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906374f2380a90602401611132565b604051633d3b6b2560e11b8152600481018590526001600160a01b03861690637a76d64a90602401604080518083038186803b15801561125357600080fd5b505afa158015611267573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061128b9190611efa565b90925090505b683635c9adc5dea00000600154826112a9919061210f565b6112b39190612010565b6112bd9083611ff8565b925050505b92915050565b600281815481106112d857600080fd5b6000918252602090912060059091020180546001820154600283015460038401546004909401549294509092909185565b6000546001600160a01b031633146113335760405162461bcd60e51b81526004016105e890611fc3565b60408051808201825283815260209081018390526007849055600883905581518481529081018390527fb8cded0f783883feb28d3a46c16a1394521d97ce9b29f85f4f9979eaf4b32e26910160405180910390a15050565b6000546001600160a01b031633146113b55760405162461bcd60e51b81526004016105e890611fc3565b600680546001600160a01b0319166001600160a01b0392909216919091179055565b816001600160a01b038116158061140657506001600160a01b03811660009081526004602052604090205460ff165b61145e5760405162461bcd60e51b8152602060048201526024808201527f4e75727365526169643a20546865206d61696473206973206e6f7420617070726044820152631bdd995960e21b60648201526084016105e8565b600060028581548110611473576114736121a0565b90600052602060002090600502019050806004015443106114d65760405162461bcd60e51b815260206004820152601960248201527f4e75727365526169643a20526169642068617320656e6465640000000000000060448201526064016105e8565b60008581526003602090815260408083203384529091529020541561153d5760405162461bcd60e51b815260206004820152601e60248201527f4e75727365526169643a205261696420697320696e2070726f6772657373000060448201526064016105e8565b604080516060810182524381526001600160a01b03868116602080840182815284860189815260008c8152600384528781203382529093529590912093518455516001840180546001600160a01b031916919093161790915591516002909101551561160a576040516323b872dd60e01b8152336004820152306024820152604481018490526001600160a01b038516906323b872dd90606401600060405180830381600087803b1580156115f157600080fd5b505af1158015611605573d6000803e3d6000fd5b505050505b80546040516323b872dd60e01b8152336004820152306024820152604481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906323b872dd90606401602060405180830381600087803b15801561167a57600080fd5b505af115801561168e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116b29190611d65565b5060006103e86116c383600361210f565b6116cd9190612010565b90506116d881611b01565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000166342966c68611711838561212e565b6040518263ffffffff1660e01b815260040161172f91815260200190565b600060405180830381600087803b15801561174957600080fd5b505af115801561175d573d6000803e3d6000fd5b50505050856001600160a01b031687336001600160a01b03167fdbaee2f8bdfe2e27e53a55ba816b9e0b74c12780d27d142b35023fa491602d61886040516117a791815260200190565b60405180910390a450505050505050565b6000546001600160a01b031633146117e25760405162461bcd60e51b81526004016105e890611fc3565b60018190556040518181527f4cc6f61797d7bcd39a96045b3f7c8cb2feed2fe23d042b62757ab6499b07cf559060200160405180910390a150565b6000546001600160a01b031633146118475760405162461bcd60e51b81526004016105e890611fc3565b600580546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b031633146118935760405162461bcd60e51b81526004016105e890611fc3565b6001600160a01b0381166118f85760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016105e8565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b60208101516000906001600160a01b031661197f5781518390611976904361212e565b101590506112c2565b6008546007546020840151604085015161199991906110ac565b6119a3908661210f565b6119ad919061210f565b6119b79190612010565b6119c1908461212e565b8251611976904361212e565b60008060016119dd856002612067565b6119e7919061212e565b6119f290600261210f565b6006546040516344a0a49160e01b8152600481018890526001600160a01b038681166024830152929350600092849216906344a0a49190604401602060405180830381600087803b158015611a4657600080fd5b505af1158015611a5a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a7e9190611dcc565b611a889190612160565b611a93906001611ff8565b90506000805b81831115611af657611aac600182611ff8565b905080611aba886001611ff8565b611ac4919061212e565b611acf906002612067565b611ada886001611ff8565b611ae5906002612067565b611aef919061212e565b9150611a99565b979650505050505050565b60055460405163a9059cbb60e01b81526001600160a01b039182166004820152602481018390527f00000000000000000000000000000000000000000000000000000000000000009091169063a9059cbb90604401602060405180830381600087803b158015611b7057600080fd5b505af1158015611b84573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ba89190611d65565b5050565b60008083601f840112611bbe57600080fd5b50813567ffffffffffffffff811115611bd657600080fd5b6020830191508360208260051b8501011115611bf157600080fd5b9250929050565b803560ff81168114611c0957600080fd5b919050565b600060208284031215611c2057600080fd5b8135611c2b816121b6565b9392505050565b60008060208385031215611c4557600080fd5b823567ffffffffffffffff811115611c5c57600080fd5b611c6885828601611bac565b90969095509350505050565b60008060008060008060008060008060a08b8d031215611c9357600080fd5b8a3567ffffffffffffffff80821115611cab57600080fd5b611cb78e838f01611bac565b909c509a5060208d0135915080821115611cd057600080fd5b611cdc8e838f01611bac565b909a50985060408d0135915080821115611cf557600080fd5b611d018e838f01611bac565b909850965060608d0135915080821115611d1a57600080fd5b611d268e838f01611bac565b909650945060808d0135915080821115611d3f57600080fd5b50611d4c8d828e01611bac565b915080935050809150509295989b9194979a5092959850565b600060208284031215611d7757600080fd5b81518015158114611c2b57600080fd5b60008060408385031215611d9a57600080fd5b8235611da5816121b6565b946020939093013593505050565b600060208284031215611dc557600080fd5b5035919050565b600060208284031215611dde57600080fd5b5051919050565b60008060408385031215611df857600080fd5b823591506020830135611e0a816121b6565b809150509250929050565b600080600060608486031215611e2a57600080fd5b833592506020840135611e3c816121b6565b929592945050506040919091013590565b6000806000806000806000806000806101408b8d031215611e6d57600080fd5b8a35995060208b0135611e7f816121b6565b985060408b0135975060608b01359650611e9b60808c01611bf8565b955060a08b0135945060c08b01359350611eb760e08c01611bf8565b92506101008b013591506101208b013590509295989b9194979a5092959850565b60008060408385031215611eeb57600080fd5b50508035926020909101359150565b60008060408385031215611f0d57600080fd5b505080516020909101519092909150565b600080600060608486031215611f3357600080fd5b8351925060208401519150604084015190509250925092565b60008060008060808587031215611f6257600080fd5b505082516020840151604085015160609095015191969095509092509050565b6001600160a01b0397881681529590961660208601526040850193909352606084019190915260ff16608083015260a082015260c081019190915260e00190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6000821982111561200b5761200b612174565b500190565b60008261201f5761201f61218a565b500490565b600181815b8085111561205f57816000190482111561204557612045612174565b8085161561205257918102915b93841c9390800290612029565b509250929050565b6000611c2b838360008261207d575060016112c2565b8161208a575060006112c2565b81600181146120a057600281146120aa576120c6565b60019150506112c2565b60ff8411156120bb576120bb612174565b50506001821b6112c2565b5060208310610133831016604e8410600b84101617156120e9575081810a6112c2565b6120f38383612024565b806000190482111561210757612107612174565b029392505050565b600081600019048311821515161561212957612129612174565b500290565b60008282101561214057612140612174565b500390565b600060001982141561215957612159612174565b5060010190565b60008261216f5761216f61218a565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052603260045260246000fd5b6001600160a01b03811681146121cb57600080fd5b5056fea2646970667358221220d58e991a72b8e5c162a60a7016bae3af608388272494f2e8b84e89bb10df0d9564736f6c63430008050033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/NurseRaid.sol:NurseRaid",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 13373,
        "contract": "contracts/NurseRaid.sol:NurseRaid",
        "label": "lpTokenToMaidPower",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 5944,
        "contract": "contracts/NurseRaid.sol:NurseRaid",
        "label": "raids",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_struct(Raid)5927_storage)dyn_storage"
      },
      {
        "astId": 5951,
        "contract": "contracts/NurseRaid.sol:NurseRaid",
        "label": "challengers",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(Challenger)5935_storage))"
      },
      {
        "astId": 5957,
        "contract": "contracts/NurseRaid.sol:NurseRaid",
        "label": "isMaidsApproved",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_contract(IMaids)9752,t_bool)"
      },
      {
        "astId": 5965,
        "contract": "contracts/NurseRaid.sol:NurseRaid",
        "label": "maidCafe",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(IMaidCafe)9464"
      },
      {
        "astId": 5977,
        "contract": "contracts/NurseRaid.sol:NurseRaid",
        "label": "rng",
        "offset": 0,
        "slot": "6",
        "type": "t_contract(IRNG)10104"
      },
      {
        "astId": 5985,
        "contract": "contracts/NurseRaid.sol:NurseRaid",
        "label": "maidEfficacy",
        "offset": 0,
        "slot": "7",
        "type": "t_struct(MaidEfficacy)5940_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Raid)5927_storage)dyn_storage": {
        "base": "t_struct(Raid)5927_storage",
        "encoding": "dynamic_array",
        "label": "struct NurseRaid.Raid[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IMaidCafe)9464": {
        "encoding": "inplace",
        "label": "contract IMaidCafe",
        "numberOfBytes": "20"
      },
      "t_contract(IMaids)9752": {
        "encoding": "inplace",
        "label": "contract IMaids",
        "numberOfBytes": "20"
      },
      "t_contract(IRNG)10104": {
        "encoding": "inplace",
        "label": "contract IRNG",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(Challenger)5935_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct NurseRaid.Challenger)",
        "numberOfBytes": "32",
        "value": "t_struct(Challenger)5935_storage"
      },
      "t_mapping(t_contract(IMaids)9752,t_bool)": {
        "encoding": "mapping",
        "key": "t_contract(IMaids)9752",
        "label": "mapping(contract IMaids => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_struct(Challenger)5935_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => struct NurseRaid.Challenger))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(Challenger)5935_storage)"
      },
      "t_struct(Challenger)5935_storage": {
        "encoding": "inplace",
        "label": "struct NurseRaid.Challenger",
        "members": [
          {
            "astId": 5929,
            "contract": "contracts/NurseRaid.sol:NurseRaid",
            "label": "enterBlock",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 5932,
            "contract": "contracts/NurseRaid.sol:NurseRaid",
            "label": "maids",
            "offset": 0,
            "slot": "1",
            "type": "t_contract(IMaids)9752"
          },
          {
            "astId": 5934,
            "contract": "contracts/NurseRaid.sol:NurseRaid",
            "label": "maidId",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(MaidEfficacy)5940_storage": {
        "encoding": "inplace",
        "label": "struct NurseRaid.MaidEfficacy",
        "members": [
          {
            "astId": 5937,
            "contract": "contracts/NurseRaid.sol:NurseRaid",
            "label": "numerator",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 5939,
            "contract": "contracts/NurseRaid.sol:NurseRaid",
            "label": "denominator",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Raid)5927_storage": {
        "encoding": "inplace",
        "label": "struct NurseRaid.Raid",
        "members": [
          {
            "astId": 5918,
            "contract": "contracts/NurseRaid.sol:NurseRaid",
            "label": "entranceFee",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 5920,
            "contract": "contracts/NurseRaid.sol:NurseRaid",
            "label": "nursePart",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 5922,
            "contract": "contracts/NurseRaid.sol:NurseRaid",
            "label": "maxRewardCount",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 5924,
            "contract": "contracts/NurseRaid.sol:NurseRaid",
            "label": "duration",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 5926,
            "contract": "contracts/NurseRaid.sol:NurseRaid",
            "label": "endBlock",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}