{
  "language": "Solidity",
  "sources": {
    "contracts/CloneNurses.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.5;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\";\nimport \"./libraries/CloneNurseEnumerable.sol\";\nimport \"./interfaces/IERC1271.sol\";\nimport \"./interfaces/ICloneNurses.sol\";\nimport \"./interfaces/IERC2981.sol\";\n\ncontract CloneNurses is\n    Ownable,\n    ERC721(\"MaidCoin Clone Nurses\", \"CNURSES\"),\n    CloneNurseEnumerable,\n    ERC1155Holder,\n    IERC2981,\n    ICloneNurses\n{\n    struct NurseType {\n        uint256 partCount;\n        uint256 destroyReturn;\n        uint256 power;\n        uint256 lifetime;\n    }\n\n    struct Nurse {\n        uint256 nurseType;\n        uint256 endBlock;\n        uint256 lastClaimedBlock;\n    }\n\n    INursePart public immutable override nursePart;\n    IMaidCoin public immutable override maidCoin;\n    ITheMaster public immutable override theMaster;\n    uint256 private immutable theMasterStartBlock;\n\n    mapping(uint256 => uint256) public override supportingRoute;\n    mapping(address => uint256) public override supportingTo;\n    mapping(uint256 => uint256) public override supportedPower;\n    mapping(uint256 => uint256) public override totalRewardsFromSupporters;\n\n    NurseType[] public override nurseTypes;\n    Nurse[] public override nurses;\n\n    uint256 private royaltyFee = 25; // out of 1000\n    address private royaltyReceiver; // MaidCafe\n\n    constructor(\n        INursePart _nursePart,\n        IMaidCoin _maidCoin,\n        ITheMaster _theMaster,\n        address _royaltyReceiver\n    ) {\n        nursePart = _nursePart;\n        maidCoin = _maidCoin;\n        theMaster = _theMaster;\n        royaltyReceiver = _royaltyReceiver;\n        theMasterStartBlock = _theMaster.startBlock();\n    }\n\n    function _baseURI() internal pure override returns (string memory) {\n        return \"https://api.maidcoin.org/clonenurses/\";\n    }\n\n    function totalSupply() public view override(CloneNurseEnumerable, ICloneNurseEnumerable) returns (uint256) {\n        return nurses.length;\n    }\n\n    function addNurseType(\n        uint256[] calldata partCounts,\n        uint256[] calldata destroyReturns,\n        uint256[] calldata powers,\n        uint256[] calldata lifetimes\n    ) external onlyOwner returns (uint256[] memory) {\n        uint256 startId = nurseTypes.length;\n        uint256[] memory nurseType = new uint256[](partCounts.length);\n        for (uint256 i = 0; i < partCounts.length; i += 1) {\n            require(partCounts[i] > 1, \"CloneNurses: Invalid partCount\");\n            nurseTypes.push(\n                NurseType({\n                    partCount: partCounts[i],\n                    destroyReturn: destroyReturns[i],\n                    power: powers[i],\n                    lifetime: lifetimes[i]\n                })\n            );\n            nurseType[i] = (startId + i);\n        }\n        return nurseType;\n    }\n\n    function nurseTypeCount() external view override returns (uint256) {\n        return nurseTypes.length;\n    }\n\n    function assemble(uint256 _nurseType, uint256 _parts) public override {\n        NurseType storage nurseType = nurseTypes[_nurseType];\n        uint256 _partCount = nurseType.partCount;\n        require(_parts >= _partCount, \"CloneNurses: Not enough parts\");\n\n        nursePart.safeTransferFrom(msg.sender, address(this), _nurseType, _parts, \"\");\n        nursePart.burn(_nurseType, _parts);\n        uint256 lifetime = ((nurseType.lifetime * (_parts - 1)) / (_partCount - 1));\n        uint256 startblock = block.number > theMasterStartBlock ? block.number : theMasterStartBlock;\n        uint256 endBlock = startblock + lifetime;\n        uint256 id = totalSupply();\n        theMaster.deposit(2, nurseType.power, id);\n        nurses.push(Nurse({nurseType: _nurseType, endBlock: endBlock, lastClaimedBlock: startblock}));\n        supportingRoute[id] = id;\n        emit ChangeSupportingRoute(id, id);\n        _mint(msg.sender, id);\n        emit ElongateLifetime(id, lifetime, 0, endBlock);\n    }\n\n    function assembleWithPermit(\n        uint256 nurseType,\n        uint256 _parts,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external override {\n        nursePart.permit(msg.sender, address(this), deadline, v, r, s);\n        assemble(nurseType, _parts);\n    }\n\n    function elongateLifetime(uint256[] calldata ids, uint256[] calldata parts) external override {\n        require(ids.length == parts.length, \"CloneNurses: Invalid parameters\");\n        claim(ids);\n        for (uint256 i = 0; i < ids.length; i += 1) {\n            require(parts[i] > 0, \"CloneNurses: Invalid amounts of parts\");\n            Nurse storage nurse = nurses[ids[i]];\n            uint256 _nurseType = nurse.nurseType;\n            NurseType storage nurseType = nurseTypes[_nurseType];\n\n            nursePart.safeTransferFrom(msg.sender, address(this), _nurseType, parts[i], \"\");\n            nursePart.burn(_nurseType, parts[i]);\n\n            uint256 oldEndBlock = nurse.endBlock;\n            uint256 from;\n            if (block.number <= oldEndBlock) from = oldEndBlock;\n            else from = block.number;\n\n            uint256 rechagedLifetime = ((nurseType.lifetime * parts[i]) / (nurseType.partCount - 1));\n            uint256 newEndBlock = from + rechagedLifetime;\n            nurse.endBlock = newEndBlock;\n            emit ElongateLifetime(ids[i], rechagedLifetime, oldEndBlock, newEndBlock);\n        }\n    }\n\n    function destroy(uint256[] calldata ids, uint256[] calldata toIds) external override {\n        require(ids.length == toIds.length, \"CloneNurses: Invalid parameters\");\n        for (uint256 i = 0; i < ids.length; i += 1) {\n            require(msg.sender == ownerOf(ids[i]), \"CloneNurses: Forbidden\");\n            uint256 power = supportedPower[ids[i]];\n            if (power == 0) {\n                supportingRoute[ids[i]] = type(uint256).max;\n                emit ChangeSupportingRoute(ids[i], type(uint256).max);\n            } else {\n                require(toIds[i] != ids[i], \"CloneNurses: Invalid id, toId\");\n                require(_exists(toIds[i]), \"CloneNurses: Invalid toId\");\n\n                supportingRoute[ids[i]] = toIds[i];\n                emit ChangeSupportingRoute(ids[i], toIds[i]);\n                supportedPower[toIds[i]] += power;\n                supportedPower[ids[i]] = 0;\n                emit ChangeSupportedPower(toIds[i], int256(power));\n            }\n            NurseType storage nurseType = nurseTypes[nurses[ids[i]].nurseType];\n\n            uint256 balanceBefore = maidCoin.balanceOf(address(this));\n            theMaster.withdraw(2, nurseType.power, ids[i]);\n            uint256 balanceAfter = maidCoin.balanceOf(address(this));\n            uint256 reward = balanceAfter - balanceBefore;\n            _claim(ids[i], reward);\n\n            theMaster.mint(msg.sender, nurseType.destroyReturn);\n            _burn(ids[i]);\n            delete nurses[ids[i]];\n        }\n    }\n\n    function claim(uint256[] calldata ids) public override {\n        for (uint256 i = 0; i < ids.length; i += 1) {\n            require(msg.sender == ownerOf(ids[i]), \"CloneNurses: Forbidden\");\n            uint256 balanceBefore = maidCoin.balanceOf(address(this));\n            theMaster.deposit(2, 0, ids[i]);\n            uint256 balanceAfter = maidCoin.balanceOf(address(this));\n            uint256 reward = balanceAfter - balanceBefore;\n            _claim(ids[i], reward);\n        }\n    }\n\n    function _claim(uint256 id, uint256 reward) internal {\n        if (reward == 0) return;\n        else {\n            Nurse storage nurse = nurses[id];\n            uint256 endBlock = nurse.endBlock;\n            uint256 lastClaimedBlock = nurse.lastClaimedBlock;\n            uint256 burningReward;\n            uint256 claimableReward;\n            if (endBlock <= lastClaimedBlock) burningReward = reward;\n            else if (endBlock < block.number) {\n                claimableReward = (reward * (endBlock - lastClaimedBlock)) / (block.number - lastClaimedBlock);\n                burningReward = reward - claimableReward;\n            } else claimableReward = reward;\n\n            if (burningReward > 0) maidCoin.burn(burningReward);\n            if (claimableReward > 0) maidCoin.transfer(msg.sender, claimableReward);\n            nurse.lastClaimedBlock = block.number;\n            emit Claim(id, msg.sender, claimableReward);\n        }\n    }\n\n    function pendingReward(uint256 id) external view override returns (uint256 claimableReward) {\n        require(_exists(id), \"CloneNurses: Invalid id\");\n        uint256 reward = theMaster.pendingReward(2, id);\n\n        if (reward == 0) return 0;\n        else {\n            Nurse storage nurse = nurses[id];\n            uint256 endBlock = nurse.endBlock;\n            uint256 lastClaimedBlock = nurse.lastClaimedBlock;\n            if (endBlock <= lastClaimedBlock) return 0;\n            else if (endBlock < block.number) {\n                claimableReward = (reward * (endBlock - lastClaimedBlock)) / (block.number - lastClaimedBlock);\n            } else claimableReward = reward;\n        }\n    }\n\n    function setSupportingTo(\n        address supporter,\n        uint256 to,\n        uint256 amounts\n    ) public override {\n        require(msg.sender == address(theMaster), \"CloneNurses: Forbidden\");\n        require(_exists(to), \"CloneNurses: Invalid target\");\n        supportingTo[supporter] = to;\n        emit SupportTo(supporter, to);\n\n        if (amounts > 0) {\n            supportedPower[to] += amounts;\n            emit ChangeSupportedPower(to, int256(amounts));\n        }\n    }\n\n    function findSupportingTo(address supporter) external view override returns (address, uint256) {\n        uint256 _supportingTo = supportingTo[supporter];\n        uint256 _route = supportingRoute[_supportingTo];\n        if (_route == _supportingTo) return (ownerOf(_supportingTo), _supportingTo);\n        while (_route != _supportingTo) {\n            _supportingTo = _route;\n            _route = supportingRoute[_supportingTo];\n        }\n        return (ownerOf(_supportingTo), _supportingTo);\n    }\n\n    function checkSupportingRoute(address supporter) public override returns (address, uint256) {\n        uint256 _supportingTo = supportingTo[supporter];\n        uint256 _route = supportingRoute[_supportingTo];\n        if (_route == _supportingTo) return (ownerOf(_supportingTo), _supportingTo);\n        uint256 initialSupportTo = _supportingTo;\n        while (_route != _supportingTo) {\n            _supportingTo = _route;\n            _route = supportingRoute[_supportingTo];\n        }\n        supportingTo[supporter] = _supportingTo;\n        supportingRoute[initialSupportTo] = _supportingTo;\n        emit ChangeSupportingRoute(initialSupportTo, _supportingTo);\n        emit SupportTo(supporter, _supportingTo);\n        return (ownerOf(_supportingTo), _supportingTo);\n    }\n\n    function changeSupportedPower(address supporter, int256 power) public override {\n        require(msg.sender == address(theMaster), \"CloneNurses: Forbidden\");\n        (, uint256 id) = checkSupportingRoute(supporter);\n        int256 _supportedPower = int256(supportedPower[id]);\n        if (power < 0) require(_supportedPower >= (-power), \"CloneNurses: Outranged power\");\n        _supportedPower += power;\n        supportedPower[id] = uint256(_supportedPower);\n        emit ChangeSupportedPower(id, power);\n    }\n\n    function recordRewardsTransfer(\n        address supporter,\n        uint256 id,\n        uint256 amounts\n    ) internal {\n        totalRewardsFromSupporters[id] += amounts;\n        emit TransferSupportingRewards(supporter, id, amounts);\n    }\n\n    function shareRewards(\n        uint256 pending,\n        address supporter,\n        uint8 supportingRatio\n    ) public override returns (address nurseOwner, uint256 amountToNurseOwner) {\n        require(msg.sender == address(theMaster), \"CloneNurses: Forbidden\");\n        amountToNurseOwner = (pending * supportingRatio) / 100;\n        uint256 _supportTo;\n        if (amountToNurseOwner > 0) {\n            (nurseOwner, _supportTo) = checkSupportingRoute(supporter);\n            recordRewardsTransfer(supporter, _supportTo, amountToNurseOwner);\n        }\n    }\n\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal override(ERC721, CloneNurseEnumerable) {\n        super._beforeTokenTransfer(from, to, tokenId);\n    }\n\n    function supportsInterface(bytes4 interfaceId)\n        public\n        view\n        override(ERC721, ERC1155Receiver, IERC165)\n        returns (bool)\n    {\n        return interfaceId == 0x2a55205a || super.supportsInterface(interfaceId);\n    }\n\n    function royaltyInfo(uint256, uint256 _salePrice) external view override returns (address, uint256) {\n        return (royaltyReceiver, (_salePrice * royaltyFee) / 1000);\n    }\n\n    function setRoyaltyInfo(address _receiver, uint256 _royaltyFee) external onlyOwner {\n        royaltyReceiver = _receiver;\n        royaltyFee = _royaltyFee;\n    }\n    \n    function exists(uint256 id) external view override returns (bool) {\n        return _exists(id);\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor () {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./ERC1155Receiver.sol\";\n\n/**\n * @dev _Available since v3.1._\n */\ncontract ERC1155Holder is ERC1155Receiver {\n    function onERC1155Received(address, address, uint256, uint256, bytes memory) public virtual override returns (bytes4) {\n        return this.onERC1155Received.selector;\n    }\n\n    function onERC1155BatchReceived(address, address, uint256[] memory, uint256[] memory, bytes memory) public virtual override returns (bytes4) {\n        return this.onERC1155BatchReceived.selector;\n    }\n}\n"
    },
    "contracts/libraries/CloneNurseEnumerable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./ERC721.sol\";\nimport \"../interfaces/ICloneNurseEnumerable.sol\";\n\n/**\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\n * enumerability of all the token ids in the contract as well as all token ids owned by each\n * account.\n\n * @dev MaidCoin: This is for CloneNurses and the like minted in order from 0 and have burn function.\n * This doesn't have tokenByIndex function.\n */\nabstract contract CloneNurseEnumerable is ERC721, ICloneNurseEnumerable {\n    // Mapping from owner to list of owned token IDs\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\n\n    // Mapping from token ID to index of the owner tokens list\n    mapping(uint256 => uint256) private _ownedTokensIndex;\n\n    /**\n     * @dev See {ICloneNurseEnumerable-tokenOfOwnerByIndex}.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\n        require(index < ERC721.balanceOf(owner), \"ERC721Enumerable: owner index out of bounds\");\n        return _ownedTokens[owner][index];\n    }\n\n    /**\n     * @dev See {ICloneNurseEnumerable-totalSupply}.\n     */\n    //TODO\n    function totalSupply() public view virtual override returns (uint256) {\n        // return _allTokens.length;\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual override {\n        super._beforeTokenTransfer(from, to, tokenId);\n\n        if (from == address(0)) {\n            _addTokenToOwnerEnumeration(to, tokenId);\n        } else if (to == address(0)) {\n            _removeTokenFromOwnerEnumeration(from, tokenId);\n        } else {\n            _removeTokenFromOwnerEnumeration(from, tokenId);\n            _addTokenToOwnerEnumeration(to, tokenId);\n        }\n    }\n\n    /**\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\n     * @param to address representing the new owner of the given token ID\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\n     */\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\n        uint256 length = ERC721.balanceOf(to);\n        _ownedTokens[to][length] = tokenId;\n        _ownedTokensIndex[tokenId] = length;\n    }\n\n    /**\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\n     * @param from address representing the previous owner of the given token ID\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\n     */\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\n        // then delete the last slot (swap and pop).\n\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\n\n        // When the token to delete is the last token, the swap operation is unnecessary\n        if (tokenIndex != lastTokenIndex) {\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\n\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\n        }\n\n        // This also deletes the contents at the last position of the array\n        delete _ownedTokensIndex[tokenId];\n        delete _ownedTokens[from][lastTokenIndex];\n    }\n}\n"
    },
    "contracts/interfaces/IERC1271.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.5.0;\n\n/// @title Interface for verifying contract-based account signatures\n/// @notice Interface that verifies provided signature for the data\n/// @dev Interface defined by EIP-1271\ninterface IERC1271 {\n    /// @notice Returns whether the provided signature is valid for the provided data\n    /// @dev MUST return the bytes4 magic value 0x1626ba7e when function passes.\n    /// MUST NOT modify state (using STATICCALL for solc < 0.5, view modifier for solc > 0.5).\n    /// MUST allow external calls.\n    /// @param hash Hash of the data to be signed\n    /// @param signature Signature byte array associated with _data\n    /// @return magicValue The bytes4 magic value 0x1626ba7e\n    function isValidSignature(bytes32 hash, bytes memory signature) external view returns (bytes4 magicValue);\n}\n"
    },
    "contracts/interfaces/ICloneNurses.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.5.0;\n\nimport \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\";\nimport \"./ICloneNurseEnumerable.sol\";\nimport \"./ISupportable.sol\";\nimport \"./INursePart.sol\";\nimport \"./IMaidCoin.sol\";\nimport \"./ITheMaster.sol\";\n\ninterface ICloneNurses is IERC721, IERC721Metadata, ICloneNurseEnumerable, ISupportable {\n    event Claim(uint256 indexed id, address indexed claimer, uint256 reward);\n    event ElongateLifetime(uint256 indexed id, uint256 rechargedLifetime, uint256 lastEndBlock, uint256 newEndBlock);\n\n    function nursePart() external view returns (INursePart);\n\n    function maidCoin() external view returns (IMaidCoin);\n\n    function theMaster() external view returns (ITheMaster);\n\n    function nurseTypes(uint256 typeId)\n        external\n        view\n        returns (\n            uint256 partCount,\n            uint256 destroyReturn,\n            uint256 power,\n            uint256 lifetime\n        );\n\n    function nurseTypeCount() external view returns (uint256);\n\n    function nurses(uint256 id)\n        external\n        view\n        returns (\n            uint256 nurseType,\n            uint256 endBlock,\n            uint256 lastClaimedBlock\n        );\n\n    function assemble(uint256 nurseType, uint256 parts) external;\n\n    function assembleWithPermit(\n        uint256 nurseType,\n        uint256 parts,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    function elongateLifetime(uint256[] calldata ids, uint256[] calldata parts) external;\n\n    function destroy(uint256[] calldata ids, uint256[] calldata toIds) external;\n\n    function claim(uint256[] calldata ids) external;\n\n    function pendingReward(uint256 id) external view returns (uint256);\n\n    function findSupportingTo(address supporter) external view returns (address, uint256);\n\n    function exists(uint256 id) external view returns (bool);\n}\n"
    },
    "contracts/interfaces/IERC2981.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.5;\n\nimport \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\n\n///\n/// @dev Interface for the NFT Royalty Standard\n///\ninterface IERC2981 is IERC165 {\n    /// ERC165 bytes to add to interface array - set in parent contract\n    /// implementing this standard\n    ///\n    /// bytes4(keccak256(\"royaltyInfo(uint256,uint256)\")) == 0x2a55205a\n    /// bytes4 private constant _INTERFACE_ID_ERC2981 = 0x2a55205a;\n    /// _registerInterface(_INTERFACE_ID_ERC2981);\n\n    /// @notice Called with the sale price to determine how much royalty\n    //          is owed and to whom.\n    /// @param _tokenId - the NFT asset queried for royalty information\n    /// @param _salePrice - the sale price of the NFT asset specified by _tokenId\n    /// @return receiver - address of who should be sent the royalty payment\n    /// @return royaltyAmount - the royalty payment amount for _salePrice\n    function royaltyInfo(uint256 _tokenId, uint256 _salePrice)\n        external\n        view\n        returns (address receiver, uint256 royaltyAmount);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/utils/ERC1155Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC1155Receiver.sol\";\nimport \"../../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev _Available since v3.1._\n */\nabstract contract ERC1155Receiver is ERC165, IERC1155Receiver {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return interfaceId == type(IERC1155Receiver).interfaceId\n            || super.supportsInterface(interfaceId);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev _Available since v3.1._\n */\ninterface IERC1155Receiver is IERC165 {\n\n    /**\n        @dev Handles the receipt of a single ERC1155 token type. This function is\n        called at the end of a `safeTransferFrom` after the balance has been updated.\n        To accept the transfer, this must return\n        `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\n        (i.e. 0xf23a6e61, or its own function selector).\n        @param operator The address which initiated the transfer (i.e. msg.sender)\n        @param from The address which previously owned the token\n        @param id The ID of the token being transferred\n        @param value The amount of tokens being transferred\n        @param data Additional data with no specified format\n        @return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed\n    */\n    function onERC1155Received(\n        address operator,\n        address from,\n        uint256 id,\n        uint256 value,\n        bytes calldata data\n    )\n        external\n        returns(bytes4);\n\n    /**\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\n        is called at the end of a `safeBatchTransferFrom` after the balances have\n        been updated. To accept the transfer(s), this must return\n        `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\n        (i.e. 0xbc197c81, or its own function selector).\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\n        @param from The address which previously owned the token\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\n        @param data Additional data with no specified format\n        @return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed\n    */\n    function onERC1155BatchReceived(\n        address operator,\n        address from,\n        uint256[] calldata ids,\n        uint256[] calldata values,\n        bytes calldata data\n    )\n        external\n        returns(bytes4);\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "contracts/libraries/ERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\";\nimport \"@openzeppelin/contracts/utils/Address.sol\";\nimport \"@openzeppelin/contracts/utils/Context.sol\";\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\nimport \"@openzeppelin/contracts/utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\n    using Address for address;\n    using Strings for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to owner address\n    mapping(uint256 => address) private _owners;\n\n    // Mapping owner address to token count\n    mapping(address => uint256) private _balances;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ERC721: balance query for the zero address\");\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        address owner = _owners[tokenId];\n        require(owner != address(0), \"ERC721: owner query for nonexistent token\");\n        return owner;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        require(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overriden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not owner nor approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        require(_exists(tokenId), \"ERC721: approved query for nonexistent token\");\n\n        return _tokenApprovals[tokenId];\n    }\n\n    function _setApprovalForAll(\n        address owner,\n        address operator,\n        bool approved\n    ) internal {\n        require(owner != operator, \"ERC721: approve to caller\");\n\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n        _safeTransfer(from, to, tokenId, _data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _owners[tokenId] != address(0);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n        require(_exists(tokenId), \"ERC721: operator query for nonexistent token\");\n        address owner = ERC721.ownerOf(tokenId);\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal virtual {\n        _mint(to, tokenId);\n        require(\n            _checkOnERC721Received(address(0), to, tokenId, _data),\n            \"ERC721: transfer to non ERC721Receiver implementer\"\n        );\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId);\n\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(address(0), to, tokenId);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ERC721.ownerOf(tokenId);\n\n        _beforeTokenTransfer(owner, address(0), tokenId);\n\n        // Clear approvals\n        _approve(address(0), tokenId);\n\n        _balances[owner] -= 1;\n        delete _owners[tokenId];\n\n        emit Transfer(owner, address(0), tokenId);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer of token that is not own\");\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId);\n\n        // Clear approvals from the previous owner\n        _approve(address(0), tokenId);\n\n        _balances[from] -= 1;\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits a {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param _data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) private returns (bool) {\n        if (to.isContract()) {\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\n                return retval == IERC721Receiver(to).onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n                } else {\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n}\n"
    },
    "contracts/interfaces/ICloneNurseEnumerable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface ICloneNurseEnumerable is IERC721 {\n    /**\n     * @dev Returns the total amount of tokens stored by the contract.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n\n    /**\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\n      *\n      * Requirements:\n      *\n      * - `from` cannot be the zero address.\n      * - `to` cannot be the zero address.\n      * - `tokenId` token must exist and be owned by `from`.\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n      *\n      * Emits a {Transfer} event.\n      */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\n     */\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant alphabet = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = alphabet[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n}\n"
    },
    "contracts/interfaces/ISupportable.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.5.0;\n\ninterface ISupportable {\n    event SupportTo(address indexed supporter, uint256 indexed to);\n    event ChangeSupportingRoute(uint256 indexed from, uint256 indexed to);\n    event ChangeSupportedPower(uint256 indexed id, int256 power);\n    event TransferSupportingRewards(address indexed supporter, uint256 indexed id, uint256 amounts);\n\n    function supportingRoute(uint256 id) external view returns (uint256);\n\n    function supportingTo(address supporter) external view returns (uint256);\n\n    function supportedPower(uint256 id) external view returns (uint256);\n\n    function totalRewardsFromSupporters(uint256 id) external view returns (uint256);\n\n    function setSupportingTo(\n        address supporter,\n        uint256 to,\n        uint256 amounts\n    ) external;\n\n    function checkSupportingRoute(address supporter) external returns (address, uint256);\n\n    function changeSupportedPower(address supporter, int256 power) external;\n\n    function shareRewards(\n        uint256 pending,\n        address supporter,\n        uint8 supportingRatio\n    ) external returns (address nurseOwner, uint256 amountToNurseOwner);\n}\n"
    },
    "contracts/interfaces/INursePart.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.5.0;\n\nimport \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\";\n\ninterface INursePart is IERC1155 {\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n\n    function PERMIT_TYPEHASH() external view returns (bytes32);\n\n    function nonces(address owner) external view returns (uint256);\n\n    function mint(\n        address to,\n        uint256 id,\n        uint256 amount\n    ) external;\n\n    function burn(uint256 id, uint256 amount) external;\n\n    function permit(\n        address owner,\n        address spender,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n}\n"
    },
    "contracts/interfaces/IMaidCoin.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.5.0;\n\ninterface IMaidCoin {\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    function name() external pure returns (string memory);\n\n    function symbol() external pure returns (string memory);\n\n    function decimals() external pure returns (uint8);\n\n    function totalSupply() external view returns (uint256);\n\n    function INITIAL_SUPPLY() external pure returns (uint256);\n\n    function balanceOf(address owner) external view returns (uint256);\n\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 value) external returns (bool);\n\n    function transfer(address to, uint256 value) external returns (bool);\n\n    function transferFrom(\n        address from,\n        address to,\n        uint256 value\n    ) external returns (bool);\n\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n\n    function nonces(address owner) external view returns (uint256);\n\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    function mint(address to, uint256 amount) external;\n\n    function burn(uint256 amount) external;\n}\n"
    },
    "contracts/interfaces/ITheMaster.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.5.0;\n\nimport \"./IMaidCoin.sol\";\nimport \"./IRewardCalculator.sol\";\nimport \"./ISupportable.sol\";\nimport \"./IMasterChefModule.sol\";\n\ninterface ITheMaster is IMasterChefModule {\n    event ChangeRewardCalculator(address addr);\n\n    event Add(\n        uint256 indexed pid,\n        address addr,\n        bool indexed delegate,\n        bool indexed mintable,\n        address supportable,\n        uint8 supportingRatio,\n        uint256 allocPoint\n    );\n\n    event Set(uint256 indexed pid, uint256 allocPoint);\n    event Deposit(uint256 indexed userId, uint256 indexed pid, uint256 amount);\n    event Withdraw(uint256 indexed userId, uint256 indexed pid, uint256 amount);\n    event EmergencyWithdraw(address indexed user, uint256 indexed pid, uint256 amount);\n\n    event Support(address indexed supporter, uint256 indexed pid, uint256 amount);\n    event Desupport(address indexed supporter, uint256 indexed pid, uint256 amount);\n    event EmergencyDesupport(address indexed user, uint256 indexed pid, uint256 amount);\n\n    event SetIsSupporterPool(uint256 indexed pid, bool indexed status);\n\n    function initialRewardPerBlock() external view returns (uint256);\n\n    function decreasingInterval() external view returns (uint256);\n\n    function startBlock() external view returns (uint256);\n\n    function maidCoin() external view returns (IMaidCoin);\n\n    function rewardCalculator() external view returns (IRewardCalculator);\n\n    function poolInfo(uint256 pid)\n        external\n        view\n        returns (\n            address addr,\n            bool delegate,\n            ISupportable supportable,\n            uint8 supportingRatio,\n            uint256 allocPoint,\n            uint256 lastRewardBlock,\n            uint256 accRewardPerShare,\n            uint256 supply\n        );\n\n    function poolCount() external view returns (uint256);\n\n    function userInfo(uint256 pid, uint256 user) external view returns (uint256 amount, uint256 rewardDebt);\n\n    function mintableByAddr(address addr) external view returns (bool);\n\n    function totalAllocPoint() external view returns (uint256);\n\n    function pendingReward(uint256 pid, uint256 userId) external view returns (uint256);\n\n    function rewardPerBlock() external view returns (uint256);\n\n    function changeRewardCalculator(address addr) external;\n\n    function add(\n        address addr,\n        bool delegate,\n        bool mintable,\n        address supportable,\n        uint8 supportingRatio,\n        uint256 allocPoint\n    ) external;\n\n    function set(uint256[] calldata pid, uint256[] calldata allocPoint) external;\n\n    function deposit(\n        uint256 pid,\n        uint256 amount,\n        uint256 userId\n    ) external;\n\n    function depositWithPermit(\n        uint256 pid,\n        uint256 amount,\n        uint256 userId,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    function depositWithPermitMax(\n        uint256 pid,\n        uint256 amount,\n        uint256 userId,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    function withdraw(\n        uint256 pid,\n        uint256 amount,\n        uint256 userId\n    ) external;\n\n    function emergencyWithdraw(uint256 pid) external;\n\n    function support(\n        uint256 pid,\n        uint256 amount,\n        uint256 supportTo\n    ) external;\n\n    function supportWithPermit(\n        uint256 pid,\n        uint256 amount,\n        uint256 supportTo,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    function supportWithPermitMax(\n        uint256 pid,\n        uint256 amount,\n        uint256 supportTo,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    function desupport(uint256 pid, uint256 amount) external;\n\n    function emergencyDesupport(uint256 pid) external;\n\n    function mint(address to, uint256 amount) external;\n\n    function claimSushiReward(uint256 id) external;\n\n    function pendingSushiReward(uint256 id) external view returns (uint256);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/IERC1155.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155 is IERC165 {\n    /**\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\n     */\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\n\n    /**\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\n     * transfers.\n     */\n    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);\n\n    /**\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\n     * `approved`.\n     */\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\n\n    /**\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\n     *\n     * If an {URI} event was emitted for `id`, the standard\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\n     * returned by {IERC1155MetadataURI-uri}.\n     */\n    event URI(string value, uint256 indexed id);\n\n    /**\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) external view returns (uint256);\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids) external view returns (uint256[] memory);\n\n    /**\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\n     *\n     * Emits an {ApprovalForAll} event.\n     *\n     * Requirements:\n     *\n     * - `operator` cannot be the caller.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\n     *\n     * See {setApprovalForAll}.\n     */\n    function isApprovedForAll(address account, address operator) external view returns (bool);\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function safeBatchTransferFrom(address from, address to, uint256[] calldata ids, uint256[] calldata amounts, bytes calldata data) external;\n}\n"
    },
    "contracts/interfaces/IRewardCalculator.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.5.0;\n\ninterface IRewardCalculator {\n    function rewardPerBlock() external view returns (uint256);\n}\n"
    },
    "contracts/interfaces/IMasterChefModule.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.5.0;\n\nimport \"./IMasterChef.sol\";\nimport \"../uniswapv2/interfaces/IUniswapV2Pair.sol\";\n\ninterface IMasterChefModule {\n    function lpToken() external view returns (IUniswapV2Pair);\n\n    function sushi() external view returns (IERC20);\n\n    function sushiMasterChef() external view returns (IMasterChef);\n\n    function masterChefPid() external view returns (uint256);\n\n    function sushiLastRewardBlock() external view returns (uint256);\n\n    function accSushiPerShare() external view returns (uint256);\n}\n"
    },
    "contracts/interfaces/IMasterChef.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.6.12;\npragma experimental ABIEncoderV2;\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ninterface IMasterChef {\n    struct UserInfo {\n        uint256 amount; // How many LP tokens the user has provided.\n        uint256 rewardDebt; // Reward debt. See explanation below.\n    }\n\n    struct PoolInfo {\n        IERC20 lpToken; // Address of LP token contract.\n        uint256 allocPoint; // How many allocation points assigned to this pool. SUSHI to distribute per block.\n        uint256 lastRewardBlock; // Last block number that SUSHI distribution occurs.\n        uint256 accSushiPerShare; // Accumulated SUSHI per share, times 1e12. See below.\n    }\n\n    function poolInfo(uint256 pid) external view returns (IMasterChef.PoolInfo memory);\n\n    function userInfo(uint256 pid, address user) external view returns (IMasterChef.UserInfo memory);\n\n    function pendingSushi(uint256 _pid, address _user) external view returns (uint256);\n\n    function deposit(uint256 _pid, uint256 _amount) external;\n\n    function withdraw(uint256 _pid, uint256 _amount) external;\n}\n"
    },
    "contracts/uniswapv2/interfaces/IUniswapV2Pair.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.5.0;\n\ninterface IUniswapV2Pair {\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    function name() external pure returns (string memory);\n\n    function symbol() external pure returns (string memory);\n\n    function decimals() external pure returns (uint8);\n\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address owner) external view returns (uint256);\n\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 value) external returns (bool);\n\n    function transfer(address to, uint256 value) external returns (bool);\n\n    function transferFrom(\n        address from,\n        address to,\n        uint256 value\n    ) external returns (bool);\n\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n\n    function nonces(address owner) external view returns (uint256);\n\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\n    event Burn(address indexed sender, uint256 amount0, uint256 amount1, address indexed to);\n    event Swap(\n        address indexed sender,\n        uint256 amount0In,\n        uint256 amount1In,\n        uint256 amount0Out,\n        uint256 amount1Out,\n        address indexed to\n    );\n    event Sync(uint112 reserve0, uint112 reserve1);\n\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\n\n    function factory() external view returns (address);\n\n    function token0() external view returns (address);\n\n    function token1() external view returns (address);\n\n    function getReserves()\n        external\n        view\n        returns (\n            uint112 reserve0,\n            uint112 reserve1,\n            uint32 blockTimestampLast\n        );\n\n    function price0CumulativeLast() external view returns (uint256);\n\n    function price1CumulativeLast() external view returns (uint256);\n\n    function kLast() external view returns (uint256);\n\n    function mint(address to) external returns (uint256 liquidity);\n\n    function burn(address to) external returns (uint256 amount0, uint256 amount1);\n\n    function swap(\n        uint256 amount0Out,\n        uint256 amount1Out,\n        address to,\n        bytes calldata data\n    ) external;\n\n    function skim(address to) external;\n\n    function sync() external;\n\n    function initialize(address, address) external;\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "contracts/NursePart.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.5;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"./libraries/ERC1155.sol\";\nimport \"./interfaces/IERC1271.sol\";\nimport \"./interfaces/INursePart.sol\";\nimport \"./libraries/Signature.sol\";\nimport \"./interfaces/IERC2981.sol\";\n\ncontract NursePart is Ownable, ERC1155(\"https://api.maidcoin.org/nurseparts/{id}\"), IERC2981, INursePart {\n    string public constant name = \"MaidCoin Nurse Parts\";\n\n    bytes32 private immutable _CACHED_DOMAIN_SEPARATOR;\n    uint256 private immutable _CACHED_CHAIN_ID;\n\n    bytes32 private immutable _HASHED_NAME;\n    bytes32 private immutable _HASHED_VERSION;\n    bytes32 private immutable _TYPE_HASH;\n\n    // keccak256(\"Permit(address owner,address spender,uint256 nonce,uint256 deadline)\");\n    bytes32 public constant override PERMIT_TYPEHASH =\n        0xdaab21af31ece73a508939fedd476a5ee5129a5ed4bb091f3236ffb45394df62;\n\n    mapping(address => uint256) public override nonces;\n\n    uint256 private royaltyFee = 25; // out of 1000\n    address private royaltyReceiver; // MaidCafe\n\n    constructor(address _royaltyReceiver) {\n        _CACHED_CHAIN_ID = block.chainid;\n        _HASHED_NAME = keccak256(bytes(\"MaidCoin Nurse Parts\"));\n        _HASHED_VERSION = keccak256(bytes(\"1\"));\n        _TYPE_HASH = keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\");\n\n        _CACHED_DOMAIN_SEPARATOR = keccak256(\n            abi.encode(\n                keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"),\n                keccak256(bytes(\"MaidCoin Nurse Parts\")),\n                keccak256(bytes(\"1\")),\n                block.chainid,\n                address(this)\n            )\n        );\n        royaltyReceiver = _royaltyReceiver;\n    }\n\n    function DOMAIN_SEPARATOR() public view override returns (bytes32) {\n        if (block.chainid == _CACHED_CHAIN_ID) {\n            return _CACHED_DOMAIN_SEPARATOR;\n        } else {\n            return keccak256(abi.encode(_TYPE_HASH, _HASHED_NAME, _HASHED_VERSION, block.chainid, address(this)));\n        }\n    }\n\n    function mint(\n        address to,\n        uint256 id,\n        uint256 amount\n    ) external override onlyOwner {\n        _mint(to, id, amount, \"\");\n    }\n\n    function burn(uint256 id, uint256 amount) external override {\n        _burn(msg.sender, id, amount);\n    }\n\n    function permit(\n        address owner,\n        address spender,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external override {\n        require(block.timestamp <= deadline, \"NursePart: Expired deadline\");\n        bytes32 _DOMAIN_SEPARATOR = DOMAIN_SEPARATOR();\n\n        bytes32 digest = keccak256(\n            abi.encodePacked(\n                \"\\x19\\x01\",\n                _DOMAIN_SEPARATOR,\n                keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, nonces[owner], deadline))\n            )\n        );\n        nonces[owner] += 1;\n\n        if (Address.isContract(owner)) {\n            require(\n                IERC1271(owner).isValidSignature(digest, abi.encodePacked(r, s, v)) == 0x1626ba7e,\n                \"NursePart: Unauthorized\"\n            );\n        } else {\n            address recoveredAddress = Signature.recover(digest, v, r, s);\n            require(recoveredAddress == owner, \"NursePart: Unauthorized\");\n        }\n\n        _setApprovalForAll(owner, spender, true);\n    }\n\n    function supportsInterface(bytes4 interfaceId) public view override(ERC1155, IERC165) returns (bool) {\n        return interfaceId == 0x2a55205a || super.supportsInterface(interfaceId);\n    }\n\n    function royaltyInfo(uint256, uint256 _salePrice) external view override returns (address, uint256) {\n        return (royaltyReceiver, (_salePrice * royaltyFee) / 1000);\n    }\n\n    function setRoyaltyInfo(address _receiver, uint256 _royaltyFee) external onlyOwner {\n        royaltyReceiver = _receiver;\n        royaltyFee = _royaltyFee;\n    }\n}\n"
    },
    "contracts/libraries/ERC1155.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.5;\n\nimport \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\";\nimport \"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\";\nimport \"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\";\nimport \"@openzeppelin/contracts/utils/Address.sol\";\nimport \"@openzeppelin/contracts/utils/Context.sol\";\nimport \"@openzeppelin/contracts/utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of the basic standard multi-token.\n * See https://eips.ethereum.org/EIPS/eip-1155\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\n *\n * _Available since v3.1._\n */\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\n    using Address for address;\n\n    // Mapping from token ID to account balances\n    mapping(uint256 => mapping(address => uint256)) private _balances;\n\n    // Mapping from account to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\n    string private _uri;\n\n    /**\n     * @dev See {_setURI}.\n     */\n    constructor(string memory uri_) {\n        _setURI(uri_);\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC1155).interfaceId ||\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC1155MetadataURI-uri}.\n     *\n     * This implementation returns the same URI for *all* token types. It relies\n     * on the token type ID substitution mechanism\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\n     *\n     * Clients calling this function must replace the `\\{id\\}` substring with the\n     * actual token type ID.\n     */\n    function uri(uint256) public view virtual override returns (string memory) {\n        return _uri;\n    }\n\n    /**\n     * @dev See {IERC1155-balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\n        require(account != address(0), \"ERC1155: balance query for the zero address\");\n        return _balances[id][account];\n    }\n\n    /**\n     * @dev See {IERC1155-balanceOfBatch}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\n        public\n        view\n        virtual\n        override\n        returns (uint256[] memory)\n    {\n        require(accounts.length == ids.length, \"ERC1155: accounts and ids length mismatch\");\n\n        uint256[] memory batchBalances = new uint256[](accounts.length);\n\n        for (uint256 i = 0; i < accounts.length; ++i) {\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\n        }\n\n        return batchBalances;\n    }\n\n    function _setApprovalForAll(\n        address owner,\n        address operator,\n        bool approved\n    ) internal {\n        require(owner != operator, \"ERC1155: setting approval status for self\");\n\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev See {IERC1155-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC1155-isApprovedForAll}.\n     */\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[account][operator];\n    }\n\n    /**\n     * @dev See {IERC1155-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n        _safeTransferFrom(from, to, id, amount, data);\n    }\n\n    /**\n     * @dev See {IERC1155-safeBatchTransferFrom}.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: transfer caller is not owner nor approved\"\n        );\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\n    }\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function _safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) internal virtual {\n        require(to != address(0), \"ERC1155: transfer to the zero address\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, from, to, _asSingletonArray(id), _asSingletonArray(amount), data);\n\n        uint256 fromBalance = _balances[id][from];\n        require(fromBalance >= amount, \"ERC1155: insufficient balance for transfer\");\n        unchecked {\n            _balances[id][from] = fromBalance - amount;\n        }\n        _balances[id][to] += amount;\n\n        emit TransferSingle(operator, from, to, id, amount);\n\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function _safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n        require(to != address(0), \"ERC1155: transfer to the zero address\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\n\n        for (uint256 i = 0; i < ids.length; ++i) {\n            uint256 id = ids[i];\n            uint256 amount = amounts[i];\n\n            uint256 fromBalance = _balances[id][from];\n            require(fromBalance >= amount, \"ERC1155: insufficient balance for transfer\");\n            unchecked {\n                _balances[id][from] = fromBalance - amount;\n            }\n            _balances[id][to] += amount;\n        }\n\n        emit TransferBatch(operator, from, to, ids, amounts);\n\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\n    }\n\n    /**\n     * @dev Sets a new URI for all token types, by relying on the token type ID\n     * substitution mechanism\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\n     *\n     * By this mechanism, any occurrence of the `\\{id\\}` substring in either the\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\n     * clients with the token type ID.\n     *\n     * For example, the `https://token-cdn-domain/\\{id\\}.json` URI would be\n     * interpreted by clients as\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\n     * for token type ID 0x4cce0.\n     *\n     * See {uri}.\n     *\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\n     * this function emits no events.\n     */\n    function _setURI(string memory newuri) internal virtual {\n        _uri = newuri;\n    }\n\n    /**\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `account`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - If `account` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function _mint(\n        address account,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) internal virtual {\n        require(account != address(0), \"ERC1155: mint to the zero address\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, address(0), account, _asSingletonArray(id), _asSingletonArray(amount), data);\n\n        _balances[id][account] += amount;\n        emit TransferSingle(operator, address(0), account, id, amount);\n\n        _doSafeTransferAcceptanceCheck(operator, address(0), account, id, amount, data);\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function _mintBatch(\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {\n        require(to != address(0), \"ERC1155: mint to the zero address\");\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\n\n        for (uint256 i = 0; i < ids.length; i++) {\n            _balances[ids[i]][to] += amounts[i];\n        }\n\n        emit TransferBatch(operator, address(0), to, ids, amounts);\n\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens of token type `id` from `account`\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens of token type `id`.\n     */\n    function _burn(\n        address account,\n        uint256 id,\n        uint256 amount\n    ) internal virtual {\n        require(account != address(0), \"ERC1155: burn from the zero address\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, account, address(0), _asSingletonArray(id), _asSingletonArray(amount), \"\");\n\n        uint256 accountBalance = _balances[id][account];\n        require(accountBalance >= amount, \"ERC1155: burn amount exceeds balance\");\n        unchecked {\n            _balances[id][account] = accountBalance - amount;\n        }\n\n        emit TransferSingle(operator, account, address(0), id, amount);\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     */\n    function _burnBatch(\n        address account,\n        uint256[] memory ids,\n        uint256[] memory amounts\n    ) internal virtual {\n        require(account != address(0), \"ERC1155: burn from the zero address\");\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, account, address(0), ids, amounts, \"\");\n\n        for (uint256 i = 0; i < ids.length; i++) {\n            uint256 id = ids[i];\n            uint256 amount = amounts[i];\n\n            uint256 accountBalance = _balances[id][account];\n            require(accountBalance >= amount, \"ERC1155: burn amount exceeds balance\");\n            unchecked {\n                _balances[id][account] = accountBalance - amount;\n            }\n        }\n\n        emit TransferBatch(operator, account, address(0), ids, amounts);\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning, as well as batched variants.\n     *\n     * The same hook is called on both single and batched variants. For single\n     * transfers, the length of the `id` and `amount` arrays will be 1.\n     *\n     * Calling conditions (for each `id` and `amount` pair):\n     *\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * of token type `id` will be  transferred to `to`.\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\n     * for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\n     * will be burned.\n     * - `from` and `to` are never both zero.\n     * - `ids` and `amounts` have the same, non-zero length.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {}\n\n    function _doSafeTransferAcceptanceCheck(\n        address operator,\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) private {\n        if (to.isContract()) {\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\n                if (response != IERC1155Receiver(to).onERC1155Received.selector) {\n                    revert(\"ERC1155: ERC1155Receiver rejected tokens\");\n                }\n            } catch Error(string memory reason) {\n                revert(reason);\n            } catch {\n                revert(\"ERC1155: transfer to non ERC1155Receiver implementer\");\n            }\n        }\n    }\n\n    function _doSafeBatchTransferAcceptanceCheck(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) private {\n        if (to.isContract()) {\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\n                bytes4 response\n            ) {\n                if (response != IERC1155Receiver(to).onERC1155BatchReceived.selector) {\n                    revert(\"ERC1155: ERC1155Receiver rejected tokens\");\n                }\n            } catch Error(string memory reason) {\n                revert(reason);\n            } catch {\n                revert(\"ERC1155: transfer to non ERC1155Receiver implementer\");\n            }\n        }\n    }\n\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\n        uint256[] memory array = new uint256[](1);\n        array[0] = element;\n\n        return array;\n    }\n}\n"
    },
    "contracts/libraries/Signature.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.5;\n\nlibrary Signature {\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        require(\n            uint256(s) <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0,\n            \"ECDSA: invalid signature 's' value\"\n        );\n        require(v == 27 || v == 28, \"ECDSA: invalid signature 'v' value\");\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        require(signer != address(0), \"ECDSA: invalid signature\");\n\n        return signer;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC1155.sol\";\n\n/**\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155MetadataURI is IERC1155 {\n    /**\n     * @dev Returns the URI for token type `id`.\n     *\n     * If the `\\{id\\}` substring is present in the URI, it must be replaced by\n     * clients with the actual token type ID.\n     */\n    function uri(uint256 id) external view returns (string memory);\n}\n"
    },
    "contracts/Maids.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.5;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"./libraries/ERC721Enumerable.sol\";\nimport \"./uniswapv2/interfaces/IUniswapV2Pair.sol\";\nimport \"./interfaces/IERC1271.sol\";\nimport \"./interfaces/IMaids.sol\";\nimport \"./libraries/Signature.sol\";\nimport \"./libraries/MasterChefModule.sol\";\nimport \"./interfaces/IERC2981.sol\";\n\ncontract Maids is Ownable, ERC721(\"MaidCoin Maids\", \"MAIDS\"), ERC721Enumerable, MasterChefModule, IERC2981, IMaids {\n    struct MaidInfo {\n        uint256 originPower;\n        uint256 supportedLPTokenAmount;\n        uint256 sushiRewardDebt;\n    }\n\n    bytes32 private immutable _CACHED_DOMAIN_SEPARATOR;\n    uint256 private immutable _CACHED_CHAIN_ID;\n\n    bytes32 private immutable _HASHED_NAME;\n    bytes32 private immutable _HASHED_VERSION;\n    bytes32 private immutable _TYPE_HASH;\n\n    // keccak256(\"Permit(address spender,uint256 tokenId,uint256 nonce,uint256 deadline)\");\n    bytes32 public constant override PERMIT_TYPEHASH =\n        0x49ecf333e5b8c95c40fdafc95c1ad136e8914a8fb55e9dc8bb01eaa83a2df9ad;\n\n    // keccak256(\"Permit(address owner,address spender,uint256 nonce,uint256 deadline)\");\n    bytes32 public constant override PERMIT_ALL_TYPEHASH =\n        0xdaab21af31ece73a508939fedd476a5ee5129a5ed4bb091f3236ffb45394df62;\n\n    uint256 public constant override MAX_MAID_COUNT = 1000;\n\n    mapping(uint256 => uint256) public override nonces;\n    mapping(address => uint256) public override noncesForAll;\n\n    MaidInfo[] public override maids;\n\n    uint256 private royaltyFee = 25; // out of 1000\n    address private royaltyReceiver; // MaidCafe\n\n    constructor(\n        IUniswapV2Pair _lpToken,\n        IERC20 _sushi,\n        address _royaltyReceiver\n    ) MasterChefModule(_lpToken, _sushi) {\n        _CACHED_CHAIN_ID = block.chainid;\n        _HASHED_NAME = keccak256(bytes(\"MaidCoin Maids\"));\n        _HASHED_VERSION = keccak256(bytes(\"1\"));\n        _TYPE_HASH = keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\");\n\n        _CACHED_DOMAIN_SEPARATOR = keccak256(\n            abi.encode(\n                keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"),\n                keccak256(bytes(\"MaidCoin Maids\")),\n                keccak256(bytes(\"1\")),\n                block.chainid,\n                address(this)\n            )\n        );\n\n        royaltyReceiver = _royaltyReceiver;\n    }\n\n    function _baseURI() internal pure override returns (string memory) {\n        return \"https://api.maidcoin.org/maids/\";\n    }\n\n    function DOMAIN_SEPARATOR() public view override returns (bytes32) {\n        if (block.chainid == _CACHED_CHAIN_ID) {\n            return _CACHED_DOMAIN_SEPARATOR;\n        } else {\n            return keccak256(abi.encode(_TYPE_HASH, _HASHED_NAME, _HASHED_VERSION, block.chainid, address(this)));\n        }\n    }\n\n    function totalSupply() public view override(ERC721Enumerable, IERC721Enumerable) returns (uint256) {\n        return maids.length;\n    }\n\n    function tokenByIndex(uint256 index)\n        public\n        view\n        virtual\n        override(ERC721Enumerable, IERC721Enumerable)\n        returns (uint256)\n    {\n        require(index < totalSupply(), \"Maids: Invalid index\");\n        return index;\n    }\n\n    function mint(uint256 power) public onlyOwner returns (uint256 id) {\n        id = maids.length;\n        require(id < MAX_MAID_COUNT, \"Maids: Maximum Maids\");\n        maids.push(MaidInfo({originPower: power, supportedLPTokenAmount: 0, sushiRewardDebt: 0}));\n        _mint(msg.sender, id);\n    }\n\n    function mintBatch(uint256[] calldata powers, uint256 amounts) external onlyOwner {\n        require(powers.length == amounts, \"Maids: Invalid parameters\");\n        uint256 from = maids.length;\n        for (uint256 i = 0; i < amounts; i += 1) {\n            maids.push(MaidInfo({originPower: powers[i], supportedLPTokenAmount: 0, sushiRewardDebt: 0}));\n            _mint(msg.sender, (i + from));\n        }\n    }\n\n    function powerAndLP(uint256 id) external view override returns (uint256, uint256) {\n        MaidInfo storage maid = maids[id];\n        return (maid.originPower, maid.supportedLPTokenAmount);\n    }\n\n    function support(uint256 id, uint256 lpTokenAmount) public override {\n        require(ownerOf(id) == msg.sender, \"Maids: Forbidden\");\n        require(lpTokenAmount > 0, \"Maids: Invalid lpTokenAmount\");\n        uint256 _supportedLPTokenAmount = maids[id].supportedLPTokenAmount;\n\n        maids[id].supportedLPTokenAmount = _supportedLPTokenAmount + lpTokenAmount;\n        lpToken.transferFrom(msg.sender, address(this), lpTokenAmount);\n\n        uint256 _pid = masterChefPid;\n        if (_pid > 0) {\n            maids[id].sushiRewardDebt = _depositModule(\n                _pid,\n                lpTokenAmount,\n                _supportedLPTokenAmount,\n                maids[id].sushiRewardDebt\n            );\n        }\n\n        emit Support(id, lpTokenAmount);\n    }\n\n    function supportWithPermit(\n        uint256 id,\n        uint256 lpTokenAmount,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external override {\n        lpToken.permit(msg.sender, address(this), lpTokenAmount, deadline, v, r, s);\n        support(id, lpTokenAmount);\n    }\n\n    function desupport(uint256 id, uint256 lpTokenAmount) external override {\n        require(ownerOf(id) == msg.sender, \"Maids: Forbidden\");\n        require(lpTokenAmount > 0, \"Maids: Invalid lpTokenAmount\");\n        uint256 _supportedLPTokenAmount = maids[id].supportedLPTokenAmount;\n\n        maids[id].supportedLPTokenAmount = _supportedLPTokenAmount - lpTokenAmount;\n\n        uint256 _pid = masterChefPid;\n        if (_pid > 0) {\n            maids[id].sushiRewardDebt = _withdrawModule(\n                _pid,\n                lpTokenAmount,\n                _supportedLPTokenAmount,\n                maids[id].sushiRewardDebt\n            );\n        }\n\n        lpToken.transfer(msg.sender, lpTokenAmount);\n        emit Desupport(id, lpTokenAmount);\n    }\n\n    function claimSushiReward(uint256 id) public override {\n        require(ownerOf(id) == msg.sender, \"Maids: Forbidden\");\n        maids[id].sushiRewardDebt = _claimSushiReward(maids[id].supportedLPTokenAmount, maids[id].sushiRewardDebt);\n    }\n\n    function pendingSushiReward(uint256 id) external view override returns (uint256) {\n        return _pendingSushiReward(maids[id].supportedLPTokenAmount, maids[id].sushiRewardDebt);\n    }\n\n    function permit(\n        address spender,\n        uint256 id,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external override {\n        require(block.timestamp <= deadline, \"Maids: Expired deadline\");\n        bytes32 _DOMAIN_SEPARATOR = DOMAIN_SEPARATOR();\n\n        bytes32 digest = keccak256(\n            abi.encodePacked(\n                \"\\x19\\x01\",\n                _DOMAIN_SEPARATOR,\n                keccak256(abi.encode(PERMIT_TYPEHASH, spender, id, nonces[id], deadline))\n            )\n        );\n        nonces[id] += 1;\n\n        address owner = ownerOf(id);\n        require(spender != owner, \"Maids: Invalid spender\");\n\n        if (Address.isContract(owner)) {\n            require(\n                IERC1271(owner).isValidSignature(digest, abi.encodePacked(r, s, v)) == 0x1626ba7e,\n                \"Maids: Unauthorized\"\n            );\n        } else {\n            address recoveredAddress = Signature.recover(digest, v, r, s);\n            require(recoveredAddress == owner, \"Maids: Unauthorized\");\n        }\n\n        _approve(spender, id);\n    }\n\n    function permitAll(\n        address owner,\n        address spender,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external override {\n        require(block.timestamp <= deadline, \"Maids: Expired deadline\");\n        bytes32 _DOMAIN_SEPARATOR = DOMAIN_SEPARATOR();\n\n        bytes32 digest = keccak256(\n            abi.encodePacked(\n                \"\\x19\\x01\",\n                _DOMAIN_SEPARATOR,\n                keccak256(abi.encode(PERMIT_ALL_TYPEHASH, owner, spender, noncesForAll[owner], deadline))\n            )\n        );\n        noncesForAll[owner] += 1;\n\n        if (Address.isContract(owner)) {\n            require(\n                IERC1271(owner).isValidSignature(digest, abi.encodePacked(r, s, v)) == 0x1626ba7e,\n                \"Maids: Unauthorized\"\n            );\n        } else {\n            address recoveredAddress = Signature.recover(digest, v, r, s);\n            require(recoveredAddress == owner, \"Maids: Unauthorized\");\n        }\n\n        _setApprovalForAll(owner, spender, true);\n    }\n\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal override(ERC721, ERC721Enumerable) {\n        super._beforeTokenTransfer(from, to, tokenId);\n    }\n\n    function supportsInterface(bytes4 interfaceId)\n        public\n        view\n        override(ERC721, ERC721Enumerable, IERC165)\n        returns (bool)\n    {\n        return interfaceId == 0x2a55205a || super.supportsInterface(interfaceId);\n    }\n\n    function royaltyInfo(uint256, uint256 _salePrice) external view override returns (address, uint256) {\n        return (royaltyReceiver, (_salePrice * royaltyFee) / 1000);\n    }\n\n    function setRoyaltyInfo(address _receiver, uint256 _royaltyFee) external onlyOwner {\n        royaltyReceiver = _receiver;\n        royaltyFee = _royaltyFee;\n    }\n}\n"
    },
    "contracts/libraries/ERC721Enumerable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./ERC721.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\";\n\n/**\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\n * enumerability of all the token ids in the contract as well as all token ids owned by each\n * account.\n\n * @dev MaidCoin: This is for Maids and the like minted in order from 0 and doesn't have burn function.\n */\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\n    // Mapping from owner to list of owned token IDs\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\n\n    // Mapping from token ID to index of the owner tokens list\n    mapping(uint256 => uint256) private _ownedTokensIndex;\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\n        require(index < ERC721.balanceOf(owner), \"ERC721Enumerable: owner index out of bounds\");\n        return _ownedTokens[owner][index];\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-totalSupply}.\n     */\n    //TODO\n    function totalSupply() public view virtual override returns (uint256) {\n        // return _allTokens.length;\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-tokenByIndex}.\n     */\n    //TODO\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\n        // require(index < ERC721Enumerable.totalSupply(), \"ERC721Enumerable: global index out of bounds\");\n        // return _allTokens[index];\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual override {\n        super._beforeTokenTransfer(from, to, tokenId);\n\n        if (from == address(0)) {\n            _addTokenToOwnerEnumeration(to, tokenId);\n        } else if (to == address(0)) {\n            _removeTokenFromOwnerEnumeration(from, tokenId);\n        } else {\n            _removeTokenFromOwnerEnumeration(from, tokenId);\n            _addTokenToOwnerEnumeration(to, tokenId);\n        }\n    }\n\n    /**\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\n     * @param to address representing the new owner of the given token ID\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\n     */\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\n        uint256 length = ERC721.balanceOf(to);\n        _ownedTokens[to][length] = tokenId;\n        _ownedTokensIndex[tokenId] = length;\n    }\n\n    /**\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\n     * @param from address representing the previous owner of the given token ID\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\n     */\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\n        // then delete the last slot (swap and pop).\n\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\n\n        // When the token to delete is the last token, the swap operation is unnecessary\n        if (tokenIndex != lastTokenIndex) {\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\n\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\n        }\n\n        // This also deletes the contents at the last position of the array\n        delete _ownedTokensIndex[tokenId];\n        delete _ownedTokens[from][lastTokenIndex];\n    }\n}\n"
    },
    "contracts/interfaces/IMaids.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.5.0;\n\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\";\nimport \"../uniswapv2/interfaces/IUniswapV2Pair.sol\";\nimport \"./IMasterChefModule.sol\";\n\ninterface IMaids is IERC721, IERC721Metadata, IERC721Enumerable, IMasterChefModule {\n    event Support(uint256 indexed id, uint256 lpTokenAmount);\n    event Desupport(uint256 indexed id, uint256 lpTokenAmount);\n\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n\n    function PERMIT_TYPEHASH() external view returns (bytes32);\n\n    function PERMIT_ALL_TYPEHASH() external view returns (bytes32);\n\n    function MAX_MAID_COUNT() external view returns (uint256);\n\n    function nonces(uint256 id) external view returns (uint256);\n\n    function noncesForAll(address owner) external view returns (uint256);\n\n    function maids(uint256 id)\n        external\n        view\n        returns (\n            uint256 originPower,\n            uint256 supportedLPTokenAmount,\n            uint256 sushiRewardDebt\n        );\n\n    function powerAndLP(uint256 id) external view returns (uint256, uint256);\n\n    function support(uint256 id, uint256 lpTokenAmount) external;\n\n    function supportWithPermit(\n        uint256 id,\n        uint256 lpTokenAmount,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    function desupport(uint256 id, uint256 lpTokenAmount) external;\n\n    function claimSushiReward(uint256 id) external;\n\n    function pendingSushiReward(uint256 id) external view returns (uint256);\n\n    function permit(\n        address spender,\n        uint256 id,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    function permitAll(\n        address owner,\n        address spender,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n}\n"
    },
    "contracts/libraries/MasterChefModule.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.5;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"../interfaces/IMasterChefModule.sol\";\n\nabstract contract MasterChefModule is Ownable, IMasterChefModule {\n    IUniswapV2Pair public immutable override lpToken;\n\n    IERC20 public immutable override sushi;\n    IMasterChef public override sushiMasterChef;\n    uint256 public override masterChefPid;\n    uint256 public override sushiLastRewardBlock;\n    uint256 public override accSushiPerShare;\n    bool private initialDeposited;\n\n    constructor(IUniswapV2Pair _lpToken, IERC20 _sushi) {\n        lpToken = _lpToken;\n        sushi = _sushi;\n    }\n\n    function _depositModule(\n        uint256 _pid,\n        uint256 depositAmount,\n        uint256 supportedLPTokenAmount,\n        uint256 sushiRewardDebt\n    ) internal returns (uint256 newRewardDebt) {\n        uint256 _totalSupportedLPTokenAmount = sushiMasterChef.userInfo(_pid, address(this)).amount;\n        uint256 _accSushiPerShare = _depositToSushiMasterChef(_pid, depositAmount, _totalSupportedLPTokenAmount);\n        uint256 pending = (supportedLPTokenAmount * _accSushiPerShare) / 1e18 - sushiRewardDebt;\n        if (pending > 0) safeSushiTransfer(msg.sender, pending);\n        return ((supportedLPTokenAmount + depositAmount) * _accSushiPerShare) / 1e18;\n    }\n\n    function _withdrawModule(\n        uint256 _pid,\n        uint256 withdrawalAmount,\n        uint256 supportedLPTokenAmount,\n        uint256 sushiRewardDebt\n    ) internal returns (uint256 newRewardDebt) {\n        uint256 _totalSupportedLPTokenAmount = sushiMasterChef.userInfo(_pid, address(this)).amount;\n        uint256 _accSushiPerShare = _withdrawFromSushiMasterChef(_pid, withdrawalAmount, _totalSupportedLPTokenAmount);\n        uint256 pending = (supportedLPTokenAmount * _accSushiPerShare) / 1e18 - sushiRewardDebt;\n        if (pending > 0) safeSushiTransfer(msg.sender, pending);\n        return ((supportedLPTokenAmount - withdrawalAmount) * _accSushiPerShare) / 1e18;\n    }\n\n    function _claimSushiReward(uint256 supportedLPTokenAmount, uint256 sushiRewardDebt)\n        internal\n        returns (uint256 newRewardDebt)\n    {\n        uint256 _pid = masterChefPid;\n        require(_pid > 0, \"MasterChefModule: Unclaimable\");\n\n        uint256 _totalSupportedLPTokenAmount = sushiMasterChef.userInfo(_pid, address(this)).amount;\n        uint256 _accSushiPerShare = _depositToSushiMasterChef(_pid, 0, _totalSupportedLPTokenAmount);\n        uint256 pending = (supportedLPTokenAmount * _accSushiPerShare) / 1e18 - sushiRewardDebt;\n        require(pending > 0, \"MasterChefModule: Nothing can be claimed\");\n        safeSushiTransfer(msg.sender, pending);\n        return (supportedLPTokenAmount * _accSushiPerShare) / 1e18;\n    }\n\n    function _pendingSushiReward(uint256 supportedLPTokenAmount, uint256 sushiRewardDebt)\n        internal\n        view\n        returns (uint256)\n    {\n        uint256 _pid = masterChefPid;\n        if (_pid == 0) return 0;\n        uint256 _totalSupportedLPTokenAmount = sushiMasterChef.userInfo(_pid, address(this)).amount;\n\n        uint256 _accSushiPerShare = accSushiPerShare;\n        if (block.number > sushiLastRewardBlock && _totalSupportedLPTokenAmount != 0) {\n            uint256 reward = sushiMasterChef.pendingSushi(masterChefPid, address(this));\n            _accSushiPerShare += ((reward * 1e18) / _totalSupportedLPTokenAmount);\n        }\n\n        return (supportedLPTokenAmount * _accSushiPerShare) / 1e18 - sushiRewardDebt;\n    }\n\n    function setSushiMasterChef(IMasterChef _masterChef, uint256 _pid) external onlyOwner {\n        require(address(_masterChef.poolInfo(_pid).lpToken) == address(lpToken), \"MasterChefModule: Invalid pid\");\n        if (!initialDeposited) {\n            initialDeposited = true;\n            lpToken.approve(address(_masterChef), type(uint256).max);\n\n            sushiMasterChef = _masterChef;\n            masterChefPid = _pid;\n            _depositToSushiMasterChef(_pid, lpToken.balanceOf(address(this)), 0);\n        } else {\n            IMasterChef oldChef = sushiMasterChef;\n            uint256 oldpid = masterChefPid;\n            _withdrawFromSushiMasterChef(oldpid, oldChef.userInfo(oldpid, address(this)).amount, 0);\n            if (_masterChef != oldChef) {\n                lpToken.approve(address(oldChef), 0);\n                lpToken.approve(address(_masterChef), type(uint256).max);\n            }\n\n            sushiMasterChef = _masterChef;\n            masterChefPid = _pid;\n            _depositToSushiMasterChef(_pid, lpToken.balanceOf(address(this)), 0);\n        }\n    }\n\n    function _depositToSushiMasterChef(\n        uint256 _pid,\n        uint256 _amount,\n        uint256 _totalSupportedLPTokenAmount\n    ) internal returns (uint256 _accSushiPerShare) {\n        return _toSushiMasterChef(true, _pid, _amount, _totalSupportedLPTokenAmount);\n    }\n\n    function _withdrawFromSushiMasterChef(\n        uint256 _pid,\n        uint256 _amount,\n        uint256 _totalSupportedLPTokenAmount\n    ) internal returns (uint256 _accSushiPerShare) {\n        return _toSushiMasterChef(false, _pid, _amount, _totalSupportedLPTokenAmount);\n    }\n\n    function _toSushiMasterChef(\n        bool deposit,\n        uint256 _pid,\n        uint256 _amount,\n        uint256 _totalSupportedLPTokenAmount\n    ) internal returns (uint256) {\n        uint256 reward;\n        if (block.number <= sushiLastRewardBlock) {\n            if (deposit) sushiMasterChef.deposit(_pid, _amount);\n            else sushiMasterChef.withdraw(_pid, _amount);\n            return accSushiPerShare;\n        } else {\n            uint256 balance0 = sushi.balanceOf(address(this));\n            if (deposit) sushiMasterChef.deposit(_pid, _amount);\n            else sushiMasterChef.withdraw(_pid, _amount);\n            uint256 balance1 = sushi.balanceOf(address(this));\n            reward = balance1 - balance0;\n        }\n        sushiLastRewardBlock = block.number;\n        if (_totalSupportedLPTokenAmount > 0 && reward > 0) {\n            uint256 _accSushiPerShare = accSushiPerShare + ((reward * 1e18) / _totalSupportedLPTokenAmount);\n            accSushiPerShare = _accSushiPerShare;\n            return _accSushiPerShare;\n        } else {\n            return accSushiPerShare;\n        }\n    }\n\n    function safeSushiTransfer(address _to, uint256 _amount) internal {\n        uint256 sushiBal = sushi.balanceOf(address(this));\n        if (_amount > sushiBal) {\n            sushi.transfer(_to, sushiBal);\n        } else {\n            sushi.transfer(_to, _amount);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Enumerable is IERC721 {\n\n    /**\n     * @dev Returns the total amount of tokens stored by the contract.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\n\n    /**\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\n     * Use along with {totalSupply} to enumerate all tokens.\n     */\n    function tokenByIndex(uint256 index) external view returns (uint256);\n}\n"
    },
    "contracts/TheMaster.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.5;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"./uniswapv2/interfaces/IUniswapV2ERC20.sol\";\nimport \"./interfaces/ITheMaster.sol\";\nimport \"./libraries/MasterChefModule.sol\";\n\ncontract TheMaster is Ownable, MasterChefModule, ITheMaster {\n    using SafeERC20 for IERC20;\n\n    struct UserInfo {\n        uint256 amount;\n        uint256 rewardDebt;\n    }\n\n    struct PoolInfo {\n        address addr;\n        bool delegate;\n        ISupportable supportable;\n        uint8 supportingRatio; //out of 100\n        uint256 allocPoint;\n        uint256 lastRewardBlock;\n        uint256 accRewardPerShare;\n        uint256 supply;\n    }\n\n    uint256 private constant PRECISION = 1e20;\n\n    uint256 public immutable override initialRewardPerBlock;\n    uint256 public immutable override decreasingInterval;\n    uint256 public immutable override startBlock;\n\n    IMaidCoin public immutable override maidCoin;\n    IRewardCalculator public override rewardCalculator;\n\n    PoolInfo[] public override poolInfo;\n    mapping(uint256 => mapping(uint256 => UserInfo)) public override userInfo;\n    mapping(uint256 => mapping(address => uint256)) private sushiRewardDebt;\n    mapping(address => bool) public override mintableByAddr;\n    uint256 public override totalAllocPoint;\n\n    constructor(\n        uint256 _initialRewardPerBlock,\n        uint256 _decreasingInterval,\n        uint256 _startBlock,\n        IMaidCoin _maidCoin,\n        IUniswapV2Pair _lpToken,\n        IERC20 _sushi\n    ) MasterChefModule(_lpToken, _sushi) {\n        initialRewardPerBlock = _initialRewardPerBlock;\n        decreasingInterval = _decreasingInterval;\n        startBlock = _startBlock;\n        maidCoin = _maidCoin;\n    }\n\n    function poolCount() external view override returns (uint256) {\n        return poolInfo.length;\n    }\n\n    function pendingReward(uint256 pid, uint256 userId) external view override returns (uint256) {\n        PoolInfo storage pool = poolInfo[pid];\n        UserInfo storage user = userInfo[pid][userId];\n        (uint256 accRewardPerShare, uint256 supply) = (pool.accRewardPerShare, pool.supply);\n        uint256 _lastRewardBlock = pool.lastRewardBlock;\n        if (block.number > _lastRewardBlock && supply != 0) {\n            uint256 reward = ((block.number - _lastRewardBlock) * rewardPerBlock() * pool.allocPoint) / totalAllocPoint;\n            accRewardPerShare = accRewardPerShare + (reward * PRECISION) / supply;\n        }\n        uint256 pending = ((user.amount * accRewardPerShare) / PRECISION) - user.rewardDebt;\n        uint256 _supportingRatio = pool.supportingRatio;\n        if (_supportingRatio == 0) {\n            return pending;\n        } else {\n            return pending - ((pending * _supportingRatio) / 100);\n        }\n    }\n\n    function rewardPerBlock() public view override returns (uint256) {\n        if (address(rewardCalculator) != address(0)) {\n            return rewardCalculator.rewardPerBlock();\n        }\n        uint256 era = (block.number - startBlock) / decreasingInterval;\n        return initialRewardPerBlock / (era + 1);\n    }\n\n    function changeRewardCalculator(address addr) external override onlyOwner {\n        rewardCalculator = IRewardCalculator(addr);\n        emit ChangeRewardCalculator(addr);\n    }\n\n    function add(\n        address addr,\n        bool delegate,\n        bool mintable,\n        address supportable,\n        uint8 supportingRatio,\n        uint256 allocPoint\n    ) external override onlyOwner {\n        if (supportable != address(0)) {\n            require(supportingRatio > 0 && supportingRatio <= 80, \"TheMaster: Outranged supportingRatio\");\n        } else {\n            require(supportingRatio == 0, \"TheMaster: Not supportable pool\");\n        }\n        massUpdatePools();\n        uint256 lastRewardBlock = block.number > startBlock ? block.number : startBlock;\n        totalAllocPoint += allocPoint;\n        uint256 pid = poolInfo.length;\n        poolInfo.push(\n            PoolInfo(addr, delegate, ISupportable(supportable), supportingRatio, allocPoint, lastRewardBlock, 0, 0)\n        );\n        if (mintable) {\n            mintableByAddr[addr] = true;\n        }\n        emit Add(pid, addr, delegate, mintableByAddr[addr], supportable, supportingRatio, allocPoint);\n    }\n\n    function set(uint256[] calldata pids, uint256[] calldata allocPoints) external override onlyOwner {\n        massUpdatePools();\n        for (uint256 i = 0; i < pids.length; i += 1) {\n            totalAllocPoint = totalAllocPoint - poolInfo[pids[i]].allocPoint + allocPoints[i];\n            poolInfo[pids[i]].allocPoint = allocPoints[i];\n            emit Set(pids[i], allocPoints[i]);\n        }\n    }\n\n    function updatePool(PoolInfo storage pool) internal {\n        uint256 _lastRewardBlock = pool.lastRewardBlock;\n        if (block.number <= _lastRewardBlock) {\n            return;\n        }\n        uint256 supply = pool.supply;\n        if (supply == 0 || pool.allocPoint == 0) {\n            pool.lastRewardBlock = block.number;\n            return;\n        }\n        uint256 reward = ((block.number - _lastRewardBlock) * rewardPerBlock() * pool.allocPoint) / totalAllocPoint;\n        maidCoin.mint(address(this), reward);\n        pool.accRewardPerShare = pool.accRewardPerShare + (reward * PRECISION) / supply;\n        pool.lastRewardBlock = block.number;\n    }\n\n    function massUpdatePools() internal {\n        uint256 length = poolInfo.length;\n        for (uint256 pid = 0; pid < length; ++pid) {\n            updatePool(poolInfo[pid]);\n        }\n    }\n\n    function deposit(\n        uint256 pid,\n        uint256 amount,\n        uint256 userId\n    ) public override {\n        PoolInfo storage pool = poolInfo[pid];\n        require(address(pool.supportable) == address(0), \"TheMaster: Use support func\");\n        UserInfo storage user = userInfo[pid][userId];\n        if (pool.delegate) {\n            require(pool.addr == msg.sender, \"TheMaster: Not called by delegate\");\n            _deposit(pid, pool, user, amount, false);\n        } else {\n            require(address(uint160(userId)) == msg.sender, \"TheMaster: Deposit to your address\");\n            _deposit(pid, pool, user, amount, true);\n        }\n        emit Deposit(userId, pid, amount);\n    }\n\n    function _deposit(\n        uint256 pid,\n        PoolInfo storage pool,\n        UserInfo storage user,\n        uint256 amount,\n        bool tokenTransfer\n    ) internal {\n        updatePool(pool);\n        uint256 _accRewardPerShare = pool.accRewardPerShare;\n        uint256 _amount = user.amount;\n        if (_amount > 0) {\n            uint256 pending = ((_amount * _accRewardPerShare) / PRECISION) - user.rewardDebt;\n            if (pending > 0) safeRewardTransfer(msg.sender, pending);\n        }\n        if (amount > 0) {\n            if (tokenTransfer) {\n                IERC20(pool.addr).safeTransferFrom(msg.sender, address(this), amount);\n                uint256 _mcPid = masterChefPid;\n                if (_mcPid > 0 && pool.addr == address(lpToken)) {\n                    sushiRewardDebt[pid][msg.sender] = _depositModule(\n                        _mcPid,\n                        amount,\n                        _amount,\n                        sushiRewardDebt[pid][msg.sender]\n                    );\n                }\n            }\n            pool.supply += amount;\n            _amount += amount;\n            user.amount = _amount;\n        }\n        user.rewardDebt = (_amount * _accRewardPerShare) / PRECISION;\n    }\n\n    function depositWithPermit(\n        uint256 pid,\n        uint256 amount,\n        uint256 userId,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external override {\n        IUniswapV2ERC20(poolInfo[pid].addr).permit(msg.sender, address(this), amount, deadline, v, r, s);\n        deposit(pid, amount, userId);\n    }\n\n    function depositWithPermitMax(\n        uint256 pid,\n        uint256 amount,\n        uint256 userId,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external override {\n        IUniswapV2ERC20(poolInfo[pid].addr).permit(msg.sender, address(this), type(uint256).max, deadline, v, r, s);\n        deposit(pid, amount, userId);\n    }\n\n    function withdraw(\n        uint256 pid,\n        uint256 amount,\n        uint256 userId\n    ) public override {\n        PoolInfo storage pool = poolInfo[pid];\n        require(address(pool.supportable) == address(0), \"TheMaster: Use desupport func\");\n        UserInfo storage user = userInfo[pid][userId];\n        if (pool.delegate) {\n            require(pool.addr == msg.sender, \"TheMaster: Not called by delegate\");\n            _withdraw(pid, pool, user, amount, false);\n        } else {\n            require(address(uint160(userId)) == msg.sender, \"TheMaster: Not called by user\");\n            _withdraw(pid, pool, user, amount, true);\n        }\n        emit Withdraw(userId, pid, amount);\n    }\n\n    function _withdraw(\n        uint256 pid,\n        PoolInfo storage pool,\n        UserInfo storage user,\n        uint256 amount,\n        bool tokenTransfer\n    ) internal {\n        uint256 _amount = user.amount;\n        require(_amount >= amount, \"TheMaster: Insufficient amount\");\n        updatePool(pool);\n        uint256 _accRewardPerShare = pool.accRewardPerShare;\n        uint256 pending = ((_amount * _accRewardPerShare) / PRECISION) - user.rewardDebt;\n        if (pending > 0) safeRewardTransfer(msg.sender, pending);\n        if (amount > 0) {\n            pool.supply -= amount;\n            _amount -= amount;\n            user.amount = _amount;\n            if (tokenTransfer) {\n                uint256 _mcPid = masterChefPid;\n                if (_mcPid > 0 && pool.addr == address(lpToken)) {\n                    sushiRewardDebt[pid][msg.sender] = _withdrawModule(\n                        _mcPid,\n                        amount,\n                        _amount + amount,\n                        sushiRewardDebt[pid][msg.sender]\n                    );\n                }\n\n                IERC20(pool.addr).safeTransfer(msg.sender, amount);\n            }\n        }\n        user.rewardDebt = (_amount * _accRewardPerShare) / PRECISION;\n    }\n\n    function emergencyWithdraw(uint256 pid) external override {\n        PoolInfo storage pool = poolInfo[pid];\n        require(address(pool.supportable) == address(0), \"TheMaster: Use desupport func\");\n        require(!pool.delegate, \"TheMaster: Pool should be non-delegate\");\n        UserInfo storage user = userInfo[pid][uint256(uint160(msg.sender))];\n        uint256 amounts = user.amount;\n        user.amount = 0;\n        user.rewardDebt = 0;\n        pool.supply -= amounts;\n\n        uint256 _mcPid = masterChefPid;\n        if (_mcPid > 0 && pool.addr == address(lpToken)) {\n            sushiRewardDebt[pid][msg.sender] = _withdrawModule(\n                _mcPid,\n                amounts,\n                amounts,\n                sushiRewardDebt[pid][msg.sender]\n            );\n        }\n\n        IERC20(pool.addr).safeTransfer(msg.sender, amounts);\n        emit EmergencyWithdraw(msg.sender, pid, amounts);\n    }\n\n    function support(\n        uint256 pid,\n        uint256 amount,\n        uint256 supportTo\n    ) public override {\n        PoolInfo storage pool = poolInfo[pid];\n        ISupportable supportable = pool.supportable;\n        require(address(supportable) != address(0), \"TheMaster: Use deposit func\");\n        UserInfo storage user = userInfo[pid][uint256(uint160(msg.sender))];\n        updatePool(pool);\n        uint256 _accRewardPerShare = pool.accRewardPerShare;\n        uint256 _amount = user.amount;\n        if (_amount > 0) {\n            uint256 pending = ((_amount * _accRewardPerShare) / PRECISION) - user.rewardDebt;\n            if (pending > 0) {\n                (address to, uint256 amounts) = supportable.shareRewards(pending, msg.sender, pool.supportingRatio);\n                if (amounts > 0) safeRewardTransfer(to, amounts);\n                safeRewardTransfer(msg.sender, pending - amounts);\n            }\n        }\n        if (amount > 0) {\n            if (_amount == 0) {\n                supportable.setSupportingTo(msg.sender, supportTo, amount);\n            } else {\n                supportable.changeSupportedPower(msg.sender, int256(amount));\n            }\n            IERC20(pool.addr).safeTransferFrom(msg.sender, address(this), amount);\n\n            uint256 _mcPid = masterChefPid;\n            if (_mcPid > 0 && pool.addr == address(lpToken)) {\n                sushiRewardDebt[pid][msg.sender] = _depositModule(\n                    _mcPid,\n                    amount,\n                    _amount,\n                    sushiRewardDebt[pid][msg.sender]\n                );\n            }\n\n            pool.supply += amount;\n            _amount += amount;\n            user.amount = _amount;\n        }\n        user.rewardDebt = (_amount * _accRewardPerShare) / PRECISION;\n        emit Support(msg.sender, pid, amount);\n    }\n\n    function supportWithPermit(\n        uint256 pid,\n        uint256 amount,\n        uint256 supportTo,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external override {\n        IUniswapV2ERC20(poolInfo[pid].addr).permit(msg.sender, address(this), amount, deadline, v, r, s);\n        support(pid, amount, supportTo);\n    }\n\n    function supportWithPermitMax(\n        uint256 pid,\n        uint256 amount,\n        uint256 supportTo,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external override {\n        IUniswapV2ERC20(poolInfo[pid].addr).permit(msg.sender, address(this), type(uint256).max, deadline, v, r, s);\n        support(pid, amount, supportTo);\n    }\n\n    function desupport(uint256 pid, uint256 amount) external override {\n        PoolInfo storage pool = poolInfo[pid];\n        ISupportable supportable = pool.supportable;\n        require(address(supportable) != address(0), \"TheMaster: Use withdraw func\");\n        UserInfo storage user = userInfo[pid][uint256(uint160(msg.sender))];\n        uint256 _amount = user.amount;\n        require(_amount >= amount, \"TheMaster: Insufficient amount\");\n        updatePool(pool);\n        uint256 _accRewardPerShare = pool.accRewardPerShare;\n        uint256 pending = ((_amount * _accRewardPerShare) / PRECISION) - user.rewardDebt;\n        if (pending > 0) {\n            (address to, uint256 amounts) = supportable.shareRewards(pending, msg.sender, pool.supportingRatio);\n            if (amounts > 0) safeRewardTransfer(to, amounts);\n            safeRewardTransfer(msg.sender, pending - amounts);\n        }\n        if (amount > 0) {\n            supportable.changeSupportedPower(msg.sender, -int256(amount));\n\n            uint256 _mcPid = masterChefPid;\n            if (_mcPid > 0 && pool.addr == address(lpToken)) {\n                sushiRewardDebt[pid][msg.sender] = _withdrawModule(\n                    _mcPid,\n                    amount,\n                    _amount,\n                    sushiRewardDebt[pid][msg.sender]\n                );\n            }\n\n            pool.supply -= amount;\n            _amount -= amount;\n            user.amount = _amount;\n            IERC20(pool.addr).safeTransfer(msg.sender, amount);\n        }\n        user.rewardDebt = (_amount * _accRewardPerShare) / PRECISION;\n        emit Desupport(msg.sender, pid, amount);\n    }\n\n    function emergencyDesupport(uint256 pid) external override {\n        PoolInfo storage pool = poolInfo[pid];\n        ISupportable supportable = pool.supportable;\n        require(address(supportable) != address(0), \"TheMaster: Use emergencyWithdraw func\");\n        UserInfo storage user = userInfo[pid][uint256(uint160(msg.sender))];\n        uint256 amounts = user.amount;\n        user.amount = 0;\n        user.rewardDebt = 0;\n        pool.supply -= amounts;\n        supportable.changeSupportedPower(msg.sender, -int256(amounts));\n\n        uint256 _mcPid = masterChefPid;\n        if (_mcPid > 0 && pool.addr == address(lpToken)) {\n            sushiRewardDebt[pid][msg.sender] = _withdrawModule(\n                _mcPid,\n                amounts,\n                amounts,\n                sushiRewardDebt[pid][msg.sender]\n            );\n        }\n\n        IERC20(pool.addr).safeTransfer(msg.sender, amounts);\n        emit EmergencyDesupport(msg.sender, pid, amounts);\n    }\n\n    function mint(address to, uint256 amount) external override {\n        require(mintableByAddr[msg.sender], \"TheMaster: Called from un-mintable\");\n        maidCoin.mint(to, amount);\n    }\n\n    function safeRewardTransfer(address to, uint256 amount) internal {\n        uint256 balance = maidCoin.balanceOf(address(this));\n        if (amount > balance) {\n            maidCoin.transfer(to, balance);\n        } else {\n            maidCoin.transfer(to, amount);\n        }\n    }\n\n    function pendingSushiReward(uint256 pid) external view override returns (uint256) {\n        return\n            _pendingSushiReward(userInfo[pid][uint256(uint160(msg.sender))].amount, sushiRewardDebt[pid][msg.sender]);\n    }\n\n    function claimSushiReward(uint256 pid) public override {\n        PoolInfo storage pool = poolInfo[pid];\n        require(pool.addr == address(lpToken) && !pool.delegate, \"TheMaster: Invalid pid\");\n\n        sushiRewardDebt[pid][msg.sender] = _claimSushiReward(\n            userInfo[pid][uint256(uint160(msg.sender))].amount,\n            sushiRewardDebt[pid][msg.sender]\n        );\n    }\n\n    function claimAllReward(uint256 pid) public {\n        PoolInfo storage pool = poolInfo[pid];\n        require(pool.addr == address(lpToken) && !pool.delegate, \"TheMaster: Invalid pid\");\n\n        UserInfo storage user = userInfo[pid][uint256(uint160(msg.sender))];\n        uint256 amount = user.amount;\n        require(amount > 0, \"TheMaster: Nothing can be claimed\");\n        sushiRewardDebt[pid][msg.sender] = _claimSushiReward(amount, sushiRewardDebt[pid][msg.sender]);\n\n        updatePool(pool);\n        ISupportable supportable = pool.supportable;\n\n        if (address(supportable) == address(0)) {\n            uint256 _accRewardPerShare = pool.accRewardPerShare;\n            uint256 pending = ((amount * _accRewardPerShare) / PRECISION) - user.rewardDebt;\n            if (pending > 0) safeRewardTransfer(msg.sender, pending);\n            user.rewardDebt = (amount * _accRewardPerShare) / PRECISION;\n        } else {\n            uint256 _accRewardPerShare = pool.accRewardPerShare;\n            uint256 pending = ((amount * _accRewardPerShare) / PRECISION) - user.rewardDebt;\n            if (pending > 0) {\n                (address to, uint256 amounts) = supportable.shareRewards(pending, msg.sender, pool.supportingRatio);\n                if (amounts > 0) safeRewardTransfer(to, amounts);\n                safeRewardTransfer(msg.sender, pending - amounts);\n            }\n            user.rewardDebt = (amount * _accRewardPerShare) / PRECISION;\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        // solhint-disable-next-line max-line-length\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) { // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "contracts/uniswapv2/interfaces/IUniswapV2ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.5.0;\n\ninterface IUniswapV2ERC20 {\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    function name() external pure returns (string memory);\n\n    function symbol() external pure returns (string memory);\n\n    function decimals() external pure returns (uint8);\n\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address owner) external view returns (uint256);\n\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 value) external returns (bool);\n\n    function transfer(address to, uint256 value) external returns (bool);\n\n    function transferFrom(\n        address from,\n        address to,\n        uint256 value\n    ) external returns (bool);\n\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n\n    function nonces(address owner) external view returns (uint256);\n\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n}\n"
    },
    "contracts/test/PermitTest.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.5;\n\nimport \"../interfaces/IMaidCoin.sol\";\nimport \"../interfaces/IMaids.sol\";\nimport \"../interfaces/INursePart.sol\";\nimport \"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\";\nimport \"@openzeppelin/contracts/utils/introspection/ERC165.sol\";\nimport \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\";\n\ncontract PermitTest is IERC1155Receiver, ERC165 {\n    IMaidCoin private maidCoin;\n    IMaids private maids;\n    INursePart private nursePart;\n\n    constructor(\n        IMaidCoin _maidCoin,\n        IMaids _maids,\n        INursePart _nursePart\n    ) {\n        maidCoin = _maidCoin;\n        maids = _maids;\n        nursePart = _nursePart;\n    }\n\n    function maidCoinPermitTest(\n        uint256 amount,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external {\n        maidCoin.permit(msg.sender, address(this), amount, deadline, v, r, s);\n        maidCoin.transferFrom(msg.sender, address(this), amount);\n    }\n\n    function maidPermitTest(\n        uint256 id,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external {\n        maids.permit(address(this), id, deadline, v, r, s);\n        maids.transferFrom(msg.sender, address(this), id);\n    }\n\n    function nursePartPermitTest(\n        uint256 id,\n        uint256 amount,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external {\n        nursePart.permit(msg.sender, address(this), deadline, v, r, s);\n        nursePart.safeTransferFrom(msg.sender, address(this), id, amount, \"\");\n    }\n\n    function onERC1155Received(\n        address operator,\n        address from,\n        uint256 id,\n        uint256 value,\n        bytes calldata data\n    ) external override returns (bytes4) {\n        return bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"));\n    }\n\n    function onERC1155BatchReceived(\n        address operator,\n        address from,\n        uint256[] calldata ids,\n        uint256[] calldata values,\n        bytes calldata data\n    ) external override returns (bytes4) {\n        return bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"));\n    }\n\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return interfaceId == type(IERC1155).interfaceId || super.supportsInterface(interfaceId);\n    }\n}\n"
    },
    "contracts/interfaces/INurseRaid.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.5.0;\n\nimport \"./IMaids.sol\";\nimport \"./IMaidCoin.sol\";\nimport \"./IMaidCafe.sol\";\nimport \"./INursePart.sol\";\nimport \"./ICloneNurses.sol\";\nimport \"./IRNG.sol\";\n\ninterface INurseRaid {\n    event Create(\n        uint256 indexed id,\n        uint256 entranceFee,\n        uint256 indexed nursePart,\n        uint256 maxRewardCount,\n        uint256 duration,\n        uint256 endBlock\n    );\n    event Enter(address indexed challenger, uint256 indexed id, IMaids indexed maids, uint256 maidId);\n    event Exit(address indexed challenger, uint256 indexed id);\n    event ChangeMaidEfficacy(uint256 numerator, uint256 denominator);\n\n    function isMaidsApproved(IMaids maids) external view returns (bool);\n\n    function maidCoin() external view returns (IMaidCoin);\n\n    function maidCafe() external view returns (IMaidCafe);\n\n    function nursePart() external view returns (INursePart);\n\n    function rng() external view returns (IRNG);\n\n    function cloneNurses() external view returns (ICloneNurses);\n\n    function maidEfficacy() external view returns (uint256, uint256);\n\n    function raidCount() external view returns (uint256);\n\n    function create(\n        uint256[] calldata entranceFee,\n        uint256[] calldata nursePart,\n        uint256[] calldata maxRewardCount,\n        uint256[] calldata duration,\n        uint256[] calldata endBlock\n    ) external returns (uint256 id);\n\n    function enter(\n        uint256 id,\n        IMaids maids,\n        uint256 maidId\n    ) external;\n\n    function enterWithPermit(\n        uint256 id,\n        IMaids maids,\n        uint256 maidId,\n        uint256 deadline,\n        uint8 v1,\n        bytes32 r1,\n        bytes32 s1,\n        uint8 v2,\n        bytes32 r2,\n        bytes32 s2\n    ) external;\n\n    function enterWithPermitAll(\n        uint256 id,\n        IMaids maids,\n        uint256 maidId,\n        uint256 deadline,\n        uint8 v1,\n        bytes32 r1,\n        bytes32 s1,\n        uint8 v2,\n        bytes32 r2,\n        bytes32 s2\n    ) external;\n\n    function checkDone(uint256 id) external view returns (bool);\n\n    function exit(uint256[] calldata ids) external;\n}\n"
    },
    "contracts/interfaces/IMaidCafe.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.5.0;\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"./IMaidCoin.sol\";\n\ninterface IMaidCafe {\n    event Enter(address indexed user, uint256 amount);\n    event Leave(address indexed user, uint256 share);\n\n    function maidCoin() external view returns (IMaidCoin);\n\n    function enter(uint256 _amount) external;\n\n    function enterWithPermit(\n        uint256 _amount,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    function leave(uint256 _share) external;\n}\n"
    },
    "contracts/interfaces/IRNG.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.5.0;\n\ninterface IRNG {\n    function generateRandomNumber(uint256 seed, address sender) external returns (uint256);\n}\n"
    },
    "contracts/NurseRaid.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.5;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"./interfaces/INurseRaid.sol\";\nimport \"./libraries/MaidPower.sol\";\n\ncontract NurseRaid is Ownable, MaidPower, INurseRaid {\n    struct Raid {\n        uint256 entranceFee;\n        uint256 nursePart;\n        uint256 maxRewardCount;\n        uint256 duration;\n        uint256 endBlock;\n    }\n\n    struct Challenger {\n        uint256 enterBlock;\n        IMaids maids;\n        uint256 maidId;\n    }\n\n    struct MaidEfficacy {\n        uint256 numerator;\n        uint256 denominator;\n    }\n\n    Raid[] public raids;\n    mapping(uint256 => mapping(address => Challenger)) public challengers;\n\n    mapping(IMaids => bool) public override isMaidsApproved;\n\n    IMaidCoin public immutable override maidCoin;\n    IMaidCafe public override maidCafe;\n    INursePart public immutable override nursePart;\n    ICloneNurses public immutable override cloneNurses;\n    IRNG public override rng;\n\n    MaidEfficacy public override maidEfficacy = MaidEfficacy({numerator: 1, denominator: 1000});\n\n    constructor(\n        IMaidCoin _maidCoin,\n        IMaidCafe _maidCafe,\n        INursePart _nursePart,\n        ICloneNurses _cloneNurses,\n        IRNG _rng,\n        address _sushiGirls,\n        address _lingerieGirls\n    ) MaidPower(_sushiGirls, _lingerieGirls) {\n        maidCoin = _maidCoin;\n        maidCafe = _maidCafe;\n        nursePart = _nursePart;\n        cloneNurses = _cloneNurses;\n        rng = _rng;\n    }\n\n    function changeMaidEfficacy(uint256 _numerator, uint256 _denominator) external onlyOwner {\n        maidEfficacy = MaidEfficacy({numerator: _numerator, denominator: _denominator});\n        emit ChangeMaidEfficacy(_numerator, _denominator);\n    }\n\n    function setMaidCafe(IMaidCafe _maidCafe) external onlyOwner {\n        maidCafe = _maidCafe;\n    }\n\n    function approveMaids(IMaids[] calldata maids) public onlyOwner {\n        for (uint256 i = 0; i < maids.length; i += 1) {\n            isMaidsApproved[maids[i]] = true;\n        }\n    }\n\n    function disapproveMaids(IMaids[] calldata maids) public onlyOwner {\n        for (uint256 i = 0; i < maids.length; i += 1) {\n            isMaidsApproved[maids[i]] = false;\n        }\n    }\n\n    modifier onlyApprovedMaids(IMaids maids) {\n        require(address(maids) == address(0) || isMaidsApproved[maids], \"NurseRaid: The maids is not approved\");\n        _;\n    }\n\n    function changeRNG(address addr) external onlyOwner {\n        rng = IRNG(addr);\n    }\n\n    function raidCount() external view override returns (uint256) {\n        return raids.length;\n    }\n\n    function create(\n        uint256[] calldata entranceFees,\n        uint256[] calldata _nurseParts,\n        uint256[] calldata maxRewardCounts,\n        uint256[] calldata durations,\n        uint256[] calldata endBlocks\n    ) external override onlyOwner returns (uint256 id) {\n        uint256 length = entranceFees.length;\n        for (uint256 i = 0; i < length; i++) {\n            require(maxRewardCounts[i] < 255, \"NurseRaid: Invalid number\");\n            {   // scope to avoid stack too deep errors\n                (uint256 nursePartCount, uint256 nurseDestroyReturn, , ) = cloneNurses.nurseTypes(_nurseParts[i]);\n\n                require(\n                    entranceFees[i] >= (nurseDestroyReturn * maxRewardCounts[i]) / nursePartCount,\n                    \"NurseRaid: Fee should be higher\"\n                );\n            }\n            id = raids.length;\n            raids.push(\n                Raid({\n                    entranceFee: entranceFees[i],\n                    nursePart: _nurseParts[i],\n                    maxRewardCount: maxRewardCounts[i],\n                    duration: durations[i],\n                    endBlock: endBlocks[i]\n                })\n            );\n            emit Create(id, entranceFees[i], _nurseParts[i], maxRewardCounts[i], durations[i], endBlocks[i]);\n        }\n    }\n\n    function enter(\n        uint256 id,\n        IMaids maids,\n        uint256 maidId\n    ) public override onlyApprovedMaids(maids) {\n        Raid storage raid = raids[id];\n        require(block.number < raid.endBlock, \"NurseRaid: Raid has ended\");\n        require(challengers[id][msg.sender].enterBlock == 0, \"NurseRaid: Raid is in progress\");\n        challengers[id][msg.sender] = Challenger({enterBlock: block.number, maids: maids, maidId: maidId});\n        if (address(maids) != address(0)) {\n            maids.transferFrom(msg.sender, address(this), maidId);\n        }\n        uint256 _entranceFee = raid.entranceFee;\n        maidCoin.transferFrom(msg.sender, address(this), _entranceFee);\n        uint256 feeToCafe = (_entranceFee * 3) / 1000;\n        _feeTransfer(feeToCafe);\n        maidCoin.burn(_entranceFee - feeToCafe);\n        emit Enter(msg.sender, id, maids, maidId);\n    }\n\n    function enterWithPermit(\n        uint256 id,\n        IMaids maids,\n        uint256 maidId,\n        uint256 deadline,\n        uint8 v1,\n        bytes32 r1,\n        bytes32 s1,\n        uint8 v2,\n        bytes32 r2,\n        bytes32 s2\n    ) external override {\n        maidCoin.permit(msg.sender, address(this), raids[id].entranceFee, deadline, v1, r1, s1);\n        if (address(maids) != address(0)) {\n            maids.permit(msg.sender, maidId, deadline, v2, r2, s2);\n        }\n        enter(id, maids, maidId);\n    }\n\n    function enterWithPermitAll(\n        uint256 id,\n        IMaids maids,\n        uint256 maidId,\n        uint256 deadline,\n        uint8 v1,\n        bytes32 r1,\n        bytes32 s1,\n        uint8 v2,\n        bytes32 r2,\n        bytes32 s2\n    ) external override {\n        maidCoin.permit(msg.sender, address(this), type(uint256).max, deadline, v1, r1, s1);\n        if (address(maids) != address(0)) {\n            maids.permitAll(msg.sender, address(this), deadline, v2, r2, s2);\n        }\n        enter(id, maids, maidId);\n    }\n\n    function checkDone(uint256 id) public view override returns (bool) {\n        Raid memory raid = raids[id];\n        Challenger memory challenger = challengers[id][msg.sender];\n\n        return _checkDone(raid.duration, challenger);\n    }\n\n    function _checkDone(uint256 duration, Challenger memory challenger) internal view returns (bool) {\n        if (address(challenger.maids) == address(0)) {\n            return block.number - challenger.enterBlock >= duration;\n        } else {\n            return\n                block.number - challenger.enterBlock >=\n                duration -\n                    ((duration * powerOfMaids(challenger.maids, challenger.maidId) * maidEfficacy.numerator) /\n                        maidEfficacy.denominator);\n        }\n    }\n\n    function exit(uint256[] calldata ids) external override {\n        for (uint256 i = 0; i < ids.length; i++) {\n            Challenger memory challenger = challengers[ids[i]][msg.sender];\n            require(challenger.enterBlock != 0, \"NurseRaid: Not participating in the raid\");\n\n            Raid storage raid = raids[ids[i]];\n\n            if (_checkDone(raid.duration, challenger)) {\n                uint256 rewardCount = _randomReward(ids[i], raid.maxRewardCount, msg.sender);\n                nursePart.mint(msg.sender, raid.nursePart, rewardCount);\n            }\n\n            if (address(challenger.maids) != address(0)) {\n                challenger.maids.transferFrom(address(this), msg.sender, challenger.maidId);\n            }\n\n            delete challengers[ids[i]][msg.sender];\n            emit Exit(msg.sender, ids[i]);\n        }\n    }\n\n    function _randomReward(\n        uint256 _id,\n        uint256 _maxRewardCount,\n        address sender\n    ) internal returns (uint256 rewardCount) {\n        uint256 totalNumber = 2 * (2**_maxRewardCount - 1);\n        uint256 randomNumber = (rng.generateRandomNumber(_id, sender) % totalNumber) + 1;\n\n        uint256 ceil;\n        uint256 i = 0;\n\n        while (randomNumber > ceil) {\n            i += 1;\n            ceil = (2**(_maxRewardCount + 1)) - (2**(_maxRewardCount + 1 - i));\n        }\n\n        rewardCount = i;\n    }\n\n    function _feeTransfer(uint256 feeToCafe) internal {\n        maidCoin.transfer(address(maidCafe), feeToCafe);\n    }\n}\n"
    },
    "contracts/libraries/MaidPower.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.5;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"../interfaces/IMaids.sol\";\nimport \"../interfaces/ISushiGirlsLingerieGIrls.sol\";\n\nabstract contract MaidPower is Ownable {\n    uint256 public lpTokenToMaidPower = 1000;   //1000 : 1LP(1e18 as wei) => 1Power\n    address public immutable sushiGirls;\n    address public immutable lingerieGirls;\n\n    event ChangeLPTokenToMaidPower(uint256 value);\n\n    constructor(address _sushiGirls, address _lingerieGirls) {\n        sushiGirls = _sushiGirls;\n        lingerieGirls = _lingerieGirls;\n    }\n\n    function changeLPTokenToMaidPower(uint256 value) external onlyOwner {\n        lpTokenToMaidPower = value;\n        emit ChangeLPTokenToMaidPower(value);\n    }\n\n    function powerOfMaids(IMaids maids, uint256 id) public view returns (uint256) {\n        uint256 originPower;\n        uint256 supportedLPAmount;\n\n        if (address(maids) == sushiGirls) {\n            (originPower, supportedLPAmount,) = ISushiGirls(sushiGirls).sushiGirls(id);\n        } else if (address(maids) == lingerieGirls) {\n            (originPower, supportedLPAmount,) = ILingerieGirls(lingerieGirls).lingerieGirls(id);\n        } else {\n            (originPower, supportedLPAmount) = maids.powerAndLP(id);\n        }\n\n        return originPower + (supportedLPAmount * lpTokenToMaidPower) / 1e21;\n    }\n}\n"
    },
    "contracts/interfaces/ISushiGirlsLingerieGIrls.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.5.0;\n\ninterface ISushiGirls {\n    function sushiGirls(uint256 id)\n        external\n        view\n        returns (\n            uint256 originPower,\n            uint256 supportedLPTokenAmount,\n            uint256 sushiRewardDebt\n        );\n}\n\ninterface ILingerieGirls {\n    function lingerieGirls(uint256 id)\n        external\n        view\n        returns (\n            uint256 originPower,\n            uint256 supportedLPTokenAmount,\n            uint256 sushiRewardDebt\n        );\n}\n"
    },
    "contracts/test/TestSushiToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.5;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\n\n// WARNING: There is a known vuln contained within this contract related to vote delegation,\n// it's NOT recommmended to use this in production.\n\n// SushiToken with Governance.\ncontract TestSushiToken is ERC20(\"SushiToken\", \"SUSHI\"), Ownable {\n    using SafeMath for uint256;\n\n    /// @notice Creates `_amount` token to `_to`. Must only be called by the owner (MasterChef).\n    function mint(address _to, uint256 _amount) public onlyOwner {\n        _mint(_to, _amount);\n        _moveDelegates(address(0), _delegates[_to], _amount);\n    }\n\n    // Copied and modified from YAM code:\n    // https://github.com/yam-finance/yam-protocol/blob/master/contracts/token/YAMGovernanceStorage.sol\n    // https://github.com/yam-finance/yam-protocol/blob/master/contracts/token/YAMGovernance.sol\n    // Which is copied and modified from COMPOUND:\n    // https://github.com/compound-finance/compound-protocol/blob/master/contracts/Governance/Comp.sol\n\n    /// @notice A record of each accounts delegate\n    mapping(address => address) internal _delegates;\n\n    /// @notice A checkpoint for marking number of votes from a given block\n    struct Checkpoint {\n        uint32 fromBlock;\n        uint256 votes;\n    }\n\n    /// @notice A record of votes checkpoints for each account, by index\n    mapping(address => mapping(uint32 => Checkpoint)) public checkpoints;\n\n    /// @notice The number of checkpoints for each account\n    mapping(address => uint32) public numCheckpoints;\n\n    /// @notice The EIP-712 typehash for the contract's domain\n    bytes32 public constant DOMAIN_TYPEHASH =\n        keccak256(\"EIP712Domain(string name,uint256 chainId,address verifyingContract)\");\n\n    /// @notice The EIP-712 typehash for the delegation struct used by the contract\n    bytes32 public constant DELEGATION_TYPEHASH =\n        keccak256(\"Delegation(address delegatee,uint256 nonce,uint256 expiry)\");\n\n    /// @notice A record of states for signing / validating signatures\n    mapping(address => uint256) public nonces;\n\n    /// @notice An event thats emitted when an account changes its delegate\n    event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate);\n\n    /// @notice An event thats emitted when a delegate account's vote balance changes\n    event DelegateVotesChanged(address indexed delegate, uint256 previousBalance, uint256 newBalance);\n\n    /**\n     * @notice Delegate votes from `msg.sender` to `delegatee`\n     * @param delegator The address to get delegatee for\n     */\n    function delegates(address delegator) external view returns (address) {\n        return _delegates[delegator];\n    }\n\n    /**\n     * @notice Delegate votes from `msg.sender` to `delegatee`\n     * @param delegatee The address to delegate votes to\n     */\n    function delegate(address delegatee) external {\n        return _delegate(msg.sender, delegatee);\n    }\n\n    /**\n     * @notice Delegates votes from signatory to `delegatee`\n     * @param delegatee The address to delegate votes to\n     * @param nonce The contract state required to match the signature\n     * @param expiry The time at which to expire the signature\n     * @param v The recovery byte of the signature\n     * @param r Half of the ECDSA signature pair\n     * @param s Half of the ECDSA signature pair\n     */\n    function delegateBySig(\n        address delegatee,\n        uint256 nonce,\n        uint256 expiry,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external {\n        bytes32 domainSeparator = keccak256(\n            abi.encode(DOMAIN_TYPEHASH, keccak256(bytes(name())), getChainId(), address(this))\n        );\n\n        bytes32 structHash = keccak256(abi.encode(DELEGATION_TYPEHASH, delegatee, nonce, expiry));\n\n        bytes32 digest = keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n\n        address signatory = ecrecover(digest, v, r, s);\n        require(signatory != address(0), \"SUSHI::delegateBySig: invalid signature\");\n        require(nonce == nonces[signatory]++, \"SUSHI::delegateBySig: invalid nonce\");\n        require(block.timestamp <= expiry, \"SUSHI::delegateBySig: signature expired\");\n        return _delegate(signatory, delegatee);\n    }\n\n    /**\n     * @notice Gets the current votes balance for `account`\n     * @param account The address to get votes balance\n     * @return The number of current votes for `account`\n     */\n    function getCurrentVotes(address account) external view returns (uint256) {\n        uint32 nCheckpoints = numCheckpoints[account];\n        return nCheckpoints > 0 ? checkpoints[account][nCheckpoints - 1].votes : 0;\n    }\n\n    /**\n     * @notice Determine the prior number of votes for an account as of a block number\n     * @dev Block number must be a finalized block or else this function will revert to prevent misinformation.\n     * @param account The address of the account to check\n     * @param blockNumber The block number to get the vote balance at\n     * @return The number of votes the account had as of the given block\n     */\n    function getPriorVotes(address account, uint256 blockNumber) external view returns (uint256) {\n        require(blockNumber < block.number, \"SUSHI::getPriorVotes: not yet determined\");\n\n        uint32 nCheckpoints = numCheckpoints[account];\n        if (nCheckpoints == 0) {\n            return 0;\n        }\n\n        // First check most recent balance\n        if (checkpoints[account][nCheckpoints - 1].fromBlock <= blockNumber) {\n            return checkpoints[account][nCheckpoints - 1].votes;\n        }\n\n        // Next check implicit zero balance\n        if (checkpoints[account][0].fromBlock > blockNumber) {\n            return 0;\n        }\n\n        uint32 lower = 0;\n        uint32 upper = nCheckpoints - 1;\n        while (upper > lower) {\n            uint32 center = upper - (upper - lower) / 2; // ceil, avoiding overflow\n            Checkpoint memory cp = checkpoints[account][center];\n            if (cp.fromBlock == blockNumber) {\n                return cp.votes;\n            } else if (cp.fromBlock < blockNumber) {\n                lower = center;\n            } else {\n                upper = center - 1;\n            }\n        }\n        return checkpoints[account][lower].votes;\n    }\n\n    function _delegate(address delegator, address delegatee) internal {\n        address currentDelegate = _delegates[delegator];\n        uint256 delegatorBalance = balanceOf(delegator); // balance of underlying SUSHIs (not scaled);\n        _delegates[delegator] = delegatee;\n\n        emit DelegateChanged(delegator, currentDelegate, delegatee);\n\n        _moveDelegates(currentDelegate, delegatee, delegatorBalance);\n    }\n\n    function _moveDelegates(\n        address srcRep,\n        address dstRep,\n        uint256 amount\n    ) internal {\n        if (srcRep != dstRep && amount > 0) {\n            if (srcRep != address(0)) {\n                // decrease old representative\n                uint32 srcRepNum = numCheckpoints[srcRep];\n                uint256 srcRepOld = srcRepNum > 0 ? checkpoints[srcRep][srcRepNum - 1].votes : 0;\n                uint256 srcRepNew = srcRepOld.sub(amount);\n                _writeCheckpoint(srcRep, srcRepNum, srcRepOld, srcRepNew);\n            }\n\n            if (dstRep != address(0)) {\n                // increase new representative\n                uint32 dstRepNum = numCheckpoints[dstRep];\n                uint256 dstRepOld = dstRepNum > 0 ? checkpoints[dstRep][dstRepNum - 1].votes : 0;\n                uint256 dstRepNew = dstRepOld.add(amount);\n                _writeCheckpoint(dstRep, dstRepNum, dstRepOld, dstRepNew);\n            }\n        }\n    }\n\n    function _writeCheckpoint(\n        address delegatee,\n        uint32 nCheckpoints,\n        uint256 oldVotes,\n        uint256 newVotes\n    ) internal {\n        uint32 blockNumber = safe32(block.number, \"SUSHI::_writeCheckpoint: block number exceeds 32 bits\");\n\n        if (nCheckpoints > 0 && checkpoints[delegatee][nCheckpoints - 1].fromBlock == blockNumber) {\n            checkpoints[delegatee][nCheckpoints - 1].votes = newVotes;\n        } else {\n            checkpoints[delegatee][nCheckpoints] = Checkpoint(blockNumber, newVotes);\n            numCheckpoints[delegatee] = nCheckpoints + 1;\n        }\n\n        emit DelegateVotesChanged(delegatee, oldVotes, newVotes);\n    }\n\n    function safe32(uint256 n, string memory errorMessage) internal pure returns (uint32) {\n        require(n < 2**32, errorMessage);\n        return uint32(n);\n    }\n\n    function getChainId() internal view returns (uint256) {\n        uint256 chainId;\n        assembly {\n            chainId := chainid()\n        }\n        return chainId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin guidelines: functions revert instead\n * of returning `false` on failure. This behavior is nonetheless conventional\n * and does not conflict with the expectations of ERC20 applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping (address => uint256) private _balances;\n\n    mapping (address => mapping (address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The defaut value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor (string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\n        _approve(sender, _msgSender(), currentAllowance - amount);\n\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        _approve(_msgSender(), spender, currentAllowance - subtractedValue);\n\n        return true;\n    }\n\n    /**\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\n     *\n     * This is internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        uint256 senderBalance = _balances[sender];\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        _balances[sender] = senderBalance - amount;\n        _balances[recipient] += amount;\n\n        emit Transfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        _balances[account] = accountBalance - amount;\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be to transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "contracts/test/TestMasterChef.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.5;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"./TestSushiToken.sol\";\n\ninterface IMigratorChef {\n    // Perform LP token migration from legacy UniswapV2 to SushiSwap.\n    // Take the current LP token address and return the new LP token address.\n    // Migrator should have full access to the caller's LP token.\n    // Return the new LP token address.\n    //\n    // XXX Migrator must have allowance access to UniswapV2 LP tokens.\n    // SushiSwap must mint EXACTLY the same amount of SushiSwap LP tokens or\n    // else something bad will happen. Traditional UniswapV2 does not\n    // do that so be careful!\n    function migrate(IERC20 token) external returns (IERC20);\n}\n\n// MasterChef is the master of Sushi. He can make Sushi and he is a fair guy.\n//\n// Note that it's ownable and the owner wields tremendous power. The ownership\n// will be transferred to a governance smart contract once SUSHI is sufficiently\n// distributed and the community can show to govern itself.\n//\n// Have fun reading it. Hopefully it's bug-free. God bless.\ncontract TestMasterChef is Ownable {\n    using SafeMath for uint256;\n    using SafeERC20 for IERC20;\n    // Info of each user.\n    struct UserInfo {\n        uint256 amount; // How many LP tokens the user has provided.\n        uint256 rewardDebt; // Reward debt. See explanation below.\n        //\n        // We do some fancy math here. Basically, any point in time, the amount of SUSHIs\n        // entitled to a user but is pending to be distributed is:\n        //\n        //   pending reward = (user.amount * pool.accSushiPerShare) - user.rewardDebt\n        //\n        // Whenever a user deposits or withdraws LP tokens to a pool. Here's what happens:\n        //   1. The pool's `accSushiPerShare` (and `lastRewardBlock`) gets updated.\n        //   2. User receives the pending reward sent to his/her address.\n        //   3. User's `amount` gets updated.\n        //   4. User's `rewardDebt` gets updated.\n    }\n    // Info of each pool.\n    struct PoolInfo {\n        IERC20 lpToken; // Address of LP token contract.\n        uint256 allocPoint; // How many allocation points assigned to this pool. SUSHIs to distribute per block.\n        uint256 lastRewardBlock; // Last block number that SUSHIs distribution occurs.\n        uint256 accSushiPerShare; // Accumulated SUSHIs per share, times 1e12. See below.\n    }\n    // The SUSHI TOKEN!\n    TestSushiToken public sushi;\n    // Dev address.\n    address public devaddr;\n    // Block number when bonus SUSHI period ends.\n    uint256 public bonusEndBlock;\n    // SUSHI tokens created per block.\n    uint256 public sushiPerBlock;\n    // Bonus muliplier for early sushi makers.\n    uint256 public constant BONUS_MULTIPLIER = 10;\n    // The migrator contract. It has a lot of power. Can only be set through governance (owner).\n    IMigratorChef public migrator;\n    // Info of each pool.\n    PoolInfo[] public poolInfo;\n    // Info of each user that stakes LP tokens.\n    mapping(uint256 => mapping(address => UserInfo)) public userInfo;\n    // Total allocation poitns. Must be the sum of all allocation points in all pools.\n    uint256 public totalAllocPoint = 0;\n    // The block number when SUSHI mining starts.\n    uint256 public startBlock;\n    event Deposit(address indexed user, uint256 indexed pid, uint256 amount);\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\n    event EmergencyWithdraw(address indexed user, uint256 indexed pid, uint256 amount);\n\n    constructor(\n        TestSushiToken _sushi,\n        address _devaddr,\n        uint256 _sushiPerBlock,\n        uint256 _startBlock,\n        uint256 _bonusEndBlock\n    ) public {\n        sushi = _sushi;\n        devaddr = _devaddr;\n        sushiPerBlock = _sushiPerBlock;\n        bonusEndBlock = _bonusEndBlock;\n        startBlock = _startBlock;\n    }\n\n    function poolLength() external view returns (uint256) {\n        return poolInfo.length;\n    }\n\n    // Add a new lp to the pool. Can only be called by the owner.\n    // XXX DO NOT add the same LP token more than once. Rewards will be messed up if you do.\n    function add(\n        uint256 _allocPoint,\n        IERC20 _lpToken,\n        bool _withUpdate\n    ) public onlyOwner {\n        if (_withUpdate) {\n            massUpdatePools();\n        }\n        uint256 lastRewardBlock = block.number > startBlock ? block.number : startBlock;\n        totalAllocPoint = totalAllocPoint.add(_allocPoint);\n        poolInfo.push(\n            PoolInfo({\n                lpToken: _lpToken,\n                allocPoint: _allocPoint,\n                lastRewardBlock: lastRewardBlock,\n                accSushiPerShare: 0\n            })\n        );\n    }\n\n    // Update the given pool's SUSHI allocation point. Can only be called by the owner.\n    function set(\n        uint256 _pid,\n        uint256 _allocPoint,\n        bool _withUpdate\n    ) public onlyOwner {\n        if (_withUpdate) {\n            massUpdatePools();\n        }\n        totalAllocPoint = totalAllocPoint.sub(poolInfo[_pid].allocPoint).add(_allocPoint);\n        poolInfo[_pid].allocPoint = _allocPoint;\n    }\n\n    // Set the migrator contract. Can only be called by the owner.\n    function setMigrator(IMigratorChef _migrator) public onlyOwner {\n        migrator = _migrator;\n    }\n\n    // Migrate lp token to another lp contract. Can be called by anyone. We trust that migrator contract is good.\n    function migrate(uint256 _pid) public {\n        require(address(migrator) != address(0), \"migrate: no migrator\");\n        PoolInfo storage pool = poolInfo[_pid];\n        IERC20 lpToken = pool.lpToken;\n        uint256 bal = lpToken.balanceOf(address(this));\n        lpToken.safeApprove(address(migrator), bal);\n        IERC20 newLpToken = migrator.migrate(lpToken);\n        require(bal == newLpToken.balanceOf(address(this)), \"migrate: bad\");\n        pool.lpToken = newLpToken;\n    }\n\n    // Return reward multiplier over the given _from to _to block.\n    function getMultiplier(uint256 _from, uint256 _to) public view returns (uint256) {\n        if (_to <= bonusEndBlock) {\n            return _to.sub(_from).mul(BONUS_MULTIPLIER);\n        } else if (_from >= bonusEndBlock) {\n            return _to.sub(_from);\n        } else {\n            return bonusEndBlock.sub(_from).mul(BONUS_MULTIPLIER).add(_to.sub(bonusEndBlock));\n        }\n    }\n\n    // View function to see pending SUSHIs on frontend.\n    function pendingSushi(uint256 _pid, address _user) external view returns (uint256) {\n        PoolInfo storage pool = poolInfo[_pid];\n        UserInfo storage user = userInfo[_pid][_user];\n        uint256 accSushiPerShare = pool.accSushiPerShare;\n        uint256 lpSupply = pool.lpToken.balanceOf(address(this));\n        if (block.number > pool.lastRewardBlock && lpSupply != 0) {\n            uint256 multiplier = getMultiplier(pool.lastRewardBlock, block.number);\n            uint256 sushiReward = multiplier.mul(sushiPerBlock).mul(pool.allocPoint).div(totalAllocPoint);\n            accSushiPerShare = accSushiPerShare.add(sushiReward.mul(1e12).div(lpSupply));\n        }\n        return user.amount.mul(accSushiPerShare).div(1e12).sub(user.rewardDebt);\n    }\n\n    // Update reward vairables for all pools. Be careful of gas spending!\n    function massUpdatePools() public {\n        uint256 length = poolInfo.length;\n        for (uint256 pid = 0; pid < length; ++pid) {\n            updatePool(pid);\n        }\n    }\n\n    // Update reward variables of the given pool to be up-to-date.\n    function updatePool(uint256 _pid) public {\n        PoolInfo storage pool = poolInfo[_pid];\n        if (block.number <= pool.lastRewardBlock) {\n            return;\n        }\n        uint256 lpSupply = pool.lpToken.balanceOf(address(this));\n        if (lpSupply == 0) {\n            pool.lastRewardBlock = block.number;\n            return;\n        }\n        uint256 multiplier = getMultiplier(pool.lastRewardBlock, block.number);\n        uint256 sushiReward = multiplier.mul(sushiPerBlock).mul(pool.allocPoint).div(totalAllocPoint);\n        sushi.mint(devaddr, sushiReward.div(10));\n        sushi.mint(address(this), sushiReward);\n        pool.accSushiPerShare = pool.accSushiPerShare.add(sushiReward.mul(1e12).div(lpSupply));\n        pool.lastRewardBlock = block.number;\n    }\n\n    // Deposit LP tokens to MasterChef for SUSHI allocation.\n    function deposit(uint256 _pid, uint256 _amount) public {\n        PoolInfo storage pool = poolInfo[_pid];\n        UserInfo storage user = userInfo[_pid][msg.sender];\n        updatePool(_pid);\n        if (user.amount > 0) {\n            uint256 pending = user.amount.mul(pool.accSushiPerShare).div(1e12).sub(user.rewardDebt);\n            safeSushiTransfer(msg.sender, pending);\n        }\n        pool.lpToken.safeTransferFrom(address(msg.sender), address(this), _amount);\n        user.amount = user.amount.add(_amount);\n        user.rewardDebt = user.amount.mul(pool.accSushiPerShare).div(1e12);\n        emit Deposit(msg.sender, _pid, _amount);\n    }\n\n    // Withdraw LP tokens from MasterChef.\n    function withdraw(uint256 _pid, uint256 _amount) public {\n        PoolInfo storage pool = poolInfo[_pid];\n        UserInfo storage user = userInfo[_pid][msg.sender];\n        require(user.amount >= _amount, \"withdraw: not good\");\n        updatePool(_pid);\n        uint256 pending = user.amount.mul(pool.accSushiPerShare).div(1e12).sub(user.rewardDebt);\n        safeSushiTransfer(msg.sender, pending);\n        user.amount = user.amount.sub(_amount);\n        user.rewardDebt = user.amount.mul(pool.accSushiPerShare).div(1e12);\n        pool.lpToken.safeTransfer(address(msg.sender), _amount);\n        emit Withdraw(msg.sender, _pid, _amount);\n    }\n\n    // Withdraw without caring about rewards. EMERGENCY ONLY.\n    function emergencyWithdraw(uint256 _pid) public {\n        PoolInfo storage pool = poolInfo[_pid];\n        UserInfo storage user = userInfo[_pid][msg.sender];\n        pool.lpToken.safeTransfer(address(msg.sender), user.amount);\n        emit EmergencyWithdraw(msg.sender, _pid, user.amount);\n        user.amount = 0;\n        user.rewardDebt = 0;\n    }\n\n    // Safe sushi transfer function, just in case if rounding error causes pool to not have enough SUSHIs.\n    function safeSushiTransfer(address _to, uint256 _amount) internal {\n        uint256 sushiBal = sushi.balanceOf(address(this));\n        if (_amount > sushiBal) {\n            sushi.transfer(_to, sushiBal);\n        } else {\n            sushi.transfer(_to, _amount);\n        }\n    }\n\n    // Update dev address by the previous dev.\n    function dev(address _devaddr) public {\n        require(msg.sender == devaddr, \"dev: wut?\");\n        devaddr = _devaddr;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/structs/EnumerableSet.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping (bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\n\n            bytes32 lastvalue = set._values[lastIndex];\n\n            // Move the last value to the index where the value to delete is\n            set._values[toDeleteIndex] = lastvalue;\n            // Update the index for the moved value\n            set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n   /**\n    * @dev Returns the value stored at position `index` in the set. O(1).\n    *\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        require(set._values.length > index, \"EnumerableSet: index out of bounds\");\n        return set._values[index];\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n   /**\n    * @dev Returns the value stored at position `index` in the set. O(1).\n    *\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n   /**\n    * @dev Returns the value stored at position `index` in the set. O(1).\n    *\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n   /**\n    * @dev Returns the value stored at position `index` in the set. O(1).\n    *\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n}\n"
    },
    "contracts/mock/MockERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.5;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\ncontract MockERC20 is Ownable, ERC20(\"Mock\", \"MOCK\") {\n    function mint(address to, uint256 amount) external onlyOwner {\n        _mint(to, amount);\n    }\n}\n"
    },
    "contracts/MasterCoin.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.5;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\ncontract MasterCoin is ERC20(\"MasterCoin\", \"$MASTER\") {\n    uint256 public constant TOTAL_SUPPLY = 100 * 1e18;\n\n    constructor() {\n        _mint(msg.sender, TOTAL_SUPPLY);\n    }\n}\n"
    },
    "contracts/MaidCafe.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.5;\n\nimport \"./interfaces/IMaidCafe.sol\";\nimport \"./interfaces/IUniswapV2Router02.sol\";\nimport \"./interfaces/IWETH.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\ncontract MaidCafe is IMaidCafe, ERC20(\"Maid Cafe\", \"$OMU\"), Ownable {\n    using SafeERC20 for IERC20;\n    IMaidCoin public immutable override maidCoin;\n    IWETH public immutable WETH;\n\n    constructor(IMaidCoin _maidCoin, IWETH _WETH) {\n        maidCoin = _maidCoin;\n        WETH = _WETH;\n    }\n\n    receive() external payable {}\n\n    // Enter the Maid Café. Pay some $MAIDs. Earn some shares.\n    // Locks $MAID and mints $OMU (Omurice)\n    function enter(uint256 _amount) public override {\n        // Gets the amount of $MAID locked in the Maid Café\n        uint256 totalMaidCoin = maidCoin.balanceOf(address(this));\n        // Gets the amount of $OMU in existence\n        uint256 totalShares = totalSupply();\n        // If no $OMU exists, mint it 1:1 to the amount put in\n        if (totalShares == 0 || totalMaidCoin == 0) {\n            _mint(msg.sender, _amount);\n        }\n        // Calculate and mint the amount of $OMU the $MAID is worth. The ratio will change overtime, as $OMU is burned/minted and $MAID deposited + gained from fees / withdrawn.\n        else {\n            uint256 what = (_amount * totalShares) / totalMaidCoin;\n            _mint(msg.sender, what);\n        }\n        // Lock the $MAID in the Maid Café\n        IERC20(address(maidCoin)).safeTransferFrom(msg.sender, address(this), _amount);\n        emit Enter(msg.sender, _amount);\n    }\n\n    function enterWithPermit(\n        uint256 _amount,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external override {\n        maidCoin.permit(msg.sender, address(this), _amount, deadline, v, r, s);\n        enter(_amount);\n    }\n\n    // Leave the Maid Café. Claim back your $MAIDs.\n    // Unlocks the staked + gained $MAID and burns $OMU\n    function leave(uint256 _share) external override {\n        // Gets the amount of $OMU in existence\n        uint256 totalShares = totalSupply();\n        // Calculates the amount of $MAID the $OMU is worth\n        uint256 what = (_share * maidCoin.balanceOf(address(this))) / totalShares;\n        _burn(msg.sender, _share);\n        IERC20(address(maidCoin)).safeTransfer(msg.sender, what);\n        emit Leave(msg.sender, _share);\n    }\n\n    function swap(\n        address token,\n        IUniswapV2Router02 router,\n        address[] calldata path,\n        uint256 amountOutMin,\n        uint256 deadline\n    ) external onlyOwner {\n        require(token != address(maidCoin), \"MaidCafe: Invalid token\");\n        require(path[path.length - 1] == address(maidCoin), \"MaidCafe: Invalid path\");\n        uint256 amountIn;\n        if (token == address(0)) {\n            require(path[0] == address(WETH), \"MaidCafe: Invalid path\");\n            amountIn = address(this).balance;\n            require(amountIn > 0, \"MaidCafe: Invalid amount\");\n            WETH.deposit{value: amountIn}();\n        } else {\n            require(path[0] == token, \"MaidCafe: Invalid path\");\n            amountIn = IERC20(token).balanceOf(address(this));\n            require(amountIn > 0, \"MaidCafe: Invalid amount\");\n        }\n        IERC20(path[0]).approve(address(router), amountIn);\n        router.swapExactTokensForTokens(amountIn, amountOutMin, path, address(this), deadline);\n    }\n}\n"
    },
    "contracts/interfaces/IUniswapV2Router02.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.6.12;\n\ninterface IUniswapV2Router01 {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint256 amountADesired,\n        uint256 amountBDesired,\n        uint256 amountAMin,\n        uint256 amountBMin,\n        address to,\n        uint256 deadline\n    )\n        external\n        returns (\n            uint256 amountA,\n            uint256 amountB,\n            uint256 liquidity\n        );\n\n    function addLiquidityETH(\n        address token,\n        uint256 amountTokenDesired,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline\n    )\n        external\n        payable\n        returns (\n            uint256 amountToken,\n            uint256 amountETH,\n            uint256 liquidity\n        );\n\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint256 liquidity,\n        uint256 amountAMin,\n        uint256 amountBMin,\n        address to,\n        uint256 deadline\n    ) external returns (uint256 amountA, uint256 amountB);\n\n    function removeLiquidityETH(\n        address token,\n        uint256 liquidity,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline\n    ) external returns (uint256 amountToken, uint256 amountETH);\n\n    function removeLiquidityWithPermit(\n        address tokenA,\n        address tokenB,\n        uint256 liquidity,\n        uint256 amountAMin,\n        uint256 amountBMin,\n        address to,\n        uint256 deadline,\n        bool approveMax,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external returns (uint256 amountA, uint256 amountB);\n\n    function removeLiquidityETHWithPermit(\n        address token,\n        uint256 liquidity,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline,\n        bool approveMax,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external returns (uint256 amountToken, uint256 amountETH);\n\n    function swapExactTokensForTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    function swapTokensForExactTokens(\n        uint256 amountOut,\n        uint256 amountInMax,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    function swapExactETHForTokens(\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external payable returns (uint256[] memory amounts);\n\n    function swapTokensForExactETH(\n        uint256 amountOut,\n        uint256 amountInMax,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    function swapExactTokensForETH(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    function swapETHForExactTokens(\n        uint256 amountOut,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external payable returns (uint256[] memory amounts);\n\n    function quote(\n        uint256 amountA,\n        uint256 reserveA,\n        uint256 reserveB\n    ) external pure returns (uint256 amountB);\n\n    function getAmountOut(\n        uint256 amountIn,\n        uint256 reserveIn,\n        uint256 reserveOut\n    ) external pure returns (uint256 amountOut);\n\n    function getAmountIn(\n        uint256 amountOut,\n        uint256 reserveIn,\n        uint256 reserveOut\n    ) external pure returns (uint256 amountIn);\n\n    function getAmountsOut(uint256 amountIn, address[] calldata path) external view returns (uint256[] memory amounts);\n\n    function getAmountsIn(uint256 amountOut, address[] calldata path) external view returns (uint256[] memory amounts);\n}\n\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\n        address token,\n        uint256 liquidity,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline\n    ) external returns (uint256 amountETH);\n\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n        address token,\n        uint256 liquidity,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline,\n        bool approveMax,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external returns (uint256 amountETH);\n\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external;\n\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external payable;\n\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external;\n}\n"
    },
    "contracts/interfaces/IWETH.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity >=0.5.0;\n\ninterface IWETH {\n    function deposit() external payable;\n\n    function transfer(address to, uint256 value) external returns (bool);\n\n    function withdraw(uint256) external;\n}\n"
    },
    "contracts/test/TestRNG.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.5;\n\nimport \"../interfaces/IRNG.sol\";\n\ncontract TestRNG is IRNG {\n    function generateRandomNumber(uint256 seed, address sender) external override returns (uint256) {\n        return uint256(keccak256(abi.encodePacked(block.timestamp)));\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}